### YamlMime:ManagedReference
items:
- uid: AdvancedSceneManager.Core.CollectionManager
  commentId: T:AdvancedSceneManager.Core.CollectionManager
  id: CollectionManager
  parent: AdvancedSceneManager.Core
  children:
  - AdvancedSceneManager.Core.CollectionManager.CanOpen(AdvancedSceneManager.Models.Scene)
  - AdvancedSceneManager.Core.CollectionManager.Close
  - AdvancedSceneManager.Core.CollectionManager.Close(AdvancedSceneManager.Core.OpenSceneInfo)
  - AdvancedSceneManager.Core.CollectionManager.closed
  - AdvancedSceneManager.Core.CollectionManager.CloseMultiple(AdvancedSceneManager.Core.OpenSceneInfo[])
  - AdvancedSceneManager.Core.CollectionManager.current
  - AdvancedSceneManager.Core.CollectionManager.IsOpen(AdvancedSceneManager.Models.SceneCollection)
  - AdvancedSceneManager.Core.CollectionManager.OnAfterDeserialize2
  - AdvancedSceneManager.Core.CollectionManager.op_Implicit(AdvancedSceneManager.Core.CollectionManager)~AdvancedSceneManager.Models.SceneCollection
  - AdvancedSceneManager.Core.CollectionManager.op_Implicit(AdvancedSceneManager.Core.CollectionManager)~System.Boolean
  - AdvancedSceneManager.Core.CollectionManager.Open(AdvancedSceneManager.Models.Scene)
  - AdvancedSceneManager.Core.CollectionManager.Open(AdvancedSceneManager.Models.SceneCollection,System.Boolean,System.Boolean)
  - AdvancedSceneManager.Core.CollectionManager.opened
  - AdvancedSceneManager.Core.CollectionManager.OpenMultiple(AdvancedSceneManager.Models.Scene[])
  - AdvancedSceneManager.Core.CollectionManager.previous
  - AdvancedSceneManager.Core.CollectionManager.Reopen(System.Boolean)
  - AdvancedSceneManager.Core.CollectionManager.Toggle(AdvancedSceneManager.Models.SceneCollection,System.Nullable{System.Boolean})
  langs:
  - csharp
  - vb
  name: CollectionManager
  nameWithType: CollectionManager
  fullName: AdvancedSceneManager.Core.CollectionManager
  type: Class
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Managers/CollectionManager.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: CollectionManager
    path: ../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Managers/CollectionManager.cs
    startLine: 15
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core
  summary: The manager for collection scenes.
  remarks: 'Usage: <xref href="AdvancedSceneManager.SceneManager.collection" data-throw-if-not-resolved="false"></xref>.'
  example: []
  syntax:
    content: 'public class CollectionManager : SceneManagerBase, ISerializationCallbackReceiver'
    content.vb: >-
      Public Class CollectionManager
          Inherits SceneManagerBase
          Implements ISerializationCallbackReceiver
  inheritance:
  - System.Object
  - UnityEngine.Object
  - UnityEngine.ScriptableObject
  - AdvancedSceneManager.Core.SceneManagerBase
  extensionMethods:
  - UnityEngine.ScriptableObject.AdvancedSceneManager.Utility.ScriptableObjectUtility.Save
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: AdvancedSceneManager.Core.CollectionManager.op_Implicit(AdvancedSceneManager.Core.CollectionManager)~AdvancedSceneManager.Models.SceneCollection
  commentId: M:AdvancedSceneManager.Core.CollectionManager.op_Implicit(AdvancedSceneManager.Core.CollectionManager)~AdvancedSceneManager.Models.SceneCollection
  id: op_Implicit(AdvancedSceneManager.Core.CollectionManager)~AdvancedSceneManager.Models.SceneCollection
  parent: AdvancedSceneManager.Core.CollectionManager
  langs:
  - csharp
  - vb
  name: Implicit(CollectionManager to SceneCollection)
  nameWithType: CollectionManager.Implicit(CollectionManager to SceneCollection)
  fullName: AdvancedSceneManager.Core.CollectionManager.Implicit(AdvancedSceneManager.Core.CollectionManager to AdvancedSceneManager.Models.SceneCollection)
  type: Operator
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Managers/CollectionManager.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: op_Implicit
    path: ../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Managers/CollectionManager.cs
    startLine: 18
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core
  syntax:
    content: public static implicit operator SceneCollection(CollectionManager manager)
    parameters:
    - id: manager
      type: AdvancedSceneManager.Core.CollectionManager
    return:
      type: AdvancedSceneManager.Models.SceneCollection
    content.vb: Public Shared Widening Operator CType(manager As CollectionManager) As SceneCollection
  overload: AdvancedSceneManager.Core.CollectionManager.op_Implicit*
  nameWithType.vb: CollectionManager.Widening(CollectionManager to SceneCollection)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AdvancedSceneManager.Core.CollectionManager.Widening(AdvancedSceneManager.Core.CollectionManager to AdvancedSceneManager.Models.SceneCollection)
  name.vb: Widening(CollectionManager to SceneCollection)
- uid: AdvancedSceneManager.Core.CollectionManager.op_Implicit(AdvancedSceneManager.Core.CollectionManager)~System.Boolean
  commentId: M:AdvancedSceneManager.Core.CollectionManager.op_Implicit(AdvancedSceneManager.Core.CollectionManager)~System.Boolean
  id: op_Implicit(AdvancedSceneManager.Core.CollectionManager)~System.Boolean
  parent: AdvancedSceneManager.Core.CollectionManager
  langs:
  - csharp
  - vb
  name: Implicit(CollectionManager to Boolean)
  nameWithType: CollectionManager.Implicit(CollectionManager to Boolean)
  fullName: AdvancedSceneManager.Core.CollectionManager.Implicit(AdvancedSceneManager.Core.CollectionManager to System.Boolean)
  type: Operator
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Managers/CollectionManager.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: op_Implicit
    path: ../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Managers/CollectionManager.cs
    startLine: 21
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core
  syntax:
    content: public static implicit operator bool (CollectionManager manager)
    parameters:
    - id: manager
      type: AdvancedSceneManager.Core.CollectionManager
    return:
      type: System.Boolean
    content.vb: Public Shared Widening Operator CType(manager As CollectionManager) As Boolean
  overload: AdvancedSceneManager.Core.CollectionManager.op_Implicit*
  nameWithType.vb: CollectionManager.Widening(CollectionManager to Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AdvancedSceneManager.Core.CollectionManager.Widening(AdvancedSceneManager.Core.CollectionManager to System.Boolean)
  name.vb: Widening(CollectionManager to Boolean)
- uid: AdvancedSceneManager.Core.CollectionManager.opened
  commentId: E:AdvancedSceneManager.Core.CollectionManager.opened
  id: opened
  parent: AdvancedSceneManager.Core.CollectionManager
  langs:
  - csharp
  - vb
  name: opened
  nameWithType: CollectionManager.opened
  fullName: AdvancedSceneManager.Core.CollectionManager.opened
  type: Event
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Managers/CollectionManager.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: opened
    path: ../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Managers/CollectionManager.cs
    startLine: 25
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core
  summary: Called when a collection is opened.
  example: []
  syntax:
    content: public event Action<SceneCollection> opened
    return:
      type: System.Action{AdvancedSceneManager.Models.SceneCollection}
    content.vb: Public Event opened As Action(Of SceneCollection)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AdvancedSceneManager.Core.CollectionManager.closed
  commentId: E:AdvancedSceneManager.Core.CollectionManager.closed
  id: closed
  parent: AdvancedSceneManager.Core.CollectionManager
  langs:
  - csharp
  - vb
  name: closed
  nameWithType: CollectionManager.closed
  fullName: AdvancedSceneManager.Core.CollectionManager.closed
  type: Event
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Managers/CollectionManager.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: closed
    path: ../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Managers/CollectionManager.cs
    startLine: 28
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core
  summary: Called when a collection is closed.
  example: []
  syntax:
    content: public event Action<SceneCollection> closed
    return:
      type: System.Action{AdvancedSceneManager.Models.SceneCollection}
    content.vb: Public Event closed As Action(Of SceneCollection)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AdvancedSceneManager.Core.CollectionManager.current
  commentId: P:AdvancedSceneManager.Core.CollectionManager.current
  id: current
  parent: AdvancedSceneManager.Core.CollectionManager
  langs:
  - csharp
  - vb
  name: current
  nameWithType: CollectionManager.current
  fullName: AdvancedSceneManager.Core.CollectionManager.current
  type: Property
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Managers/CollectionManager.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: current
    path: ../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Managers/CollectionManager.cs
    startLine: 34
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core
  summary: The currently open collection.
  example: []
  syntax:
    content: public SceneCollection current { get; }
    parameters: []
    return:
      type: AdvancedSceneManager.Models.SceneCollection
    content.vb: Public ReadOnly Property current As SceneCollection
  overload: AdvancedSceneManager.Core.CollectionManager.current*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: AdvancedSceneManager.Core.CollectionManager.previous
  commentId: P:AdvancedSceneManager.Core.CollectionManager.previous
  id: previous
  parent: AdvancedSceneManager.Core.CollectionManager
  langs:
  - csharp
  - vb
  name: previous
  nameWithType: CollectionManager.previous
  fullName: AdvancedSceneManager.Core.CollectionManager.previous
  type: Property
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Managers/CollectionManager.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: previous
    path: ../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Managers/CollectionManager.cs
    startLine: 37
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core
  summary: The previously open collection.
  example: []
  syntax:
    content: public SceneCollection previous { get; }
    parameters: []
    return:
      type: AdvancedSceneManager.Models.SceneCollection
    content.vb: Public ReadOnly Property previous As SceneCollection
  overload: AdvancedSceneManager.Core.CollectionManager.previous*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: AdvancedSceneManager.Core.CollectionManager.OnAfterDeserialize2
  commentId: M:AdvancedSceneManager.Core.CollectionManager.OnAfterDeserialize2
  id: OnAfterDeserialize2
  parent: AdvancedSceneManager.Core.CollectionManager
  langs:
  - csharp
  - vb
  name: OnAfterDeserialize2()
  nameWithType: CollectionManager.OnAfterDeserialize2()
  fullName: AdvancedSceneManager.Core.CollectionManager.OnAfterDeserialize2()
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Managers/CollectionManager.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: OnAfterDeserialize2
    path: ../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Managers/CollectionManager.cs
    startLine: 39
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core
  syntax:
    content: public override void OnAfterDeserialize2()
    content.vb: Public Overrides Sub OnAfterDeserialize2
  overridden: AdvancedSceneManager.Core.SceneManagerBase.OnAfterDeserialize2
  overload: AdvancedSceneManager.Core.CollectionManager.OnAfterDeserialize2*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: AdvancedSceneManager.Core.CollectionManager.Open(AdvancedSceneManager.Models.SceneCollection,System.Boolean,System.Boolean)
  commentId: M:AdvancedSceneManager.Core.CollectionManager.Open(AdvancedSceneManager.Models.SceneCollection,System.Boolean,System.Boolean)
  id: Open(AdvancedSceneManager.Models.SceneCollection,System.Boolean,System.Boolean)
  parent: AdvancedSceneManager.Core.CollectionManager
  langs:
  - csharp
  - vb
  name: Open(SceneCollection, Boolean, Boolean)
  nameWithType: CollectionManager.Open(SceneCollection, Boolean, Boolean)
  fullName: AdvancedSceneManager.Core.CollectionManager.Open(AdvancedSceneManager.Models.SceneCollection, System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Managers/CollectionManager.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: Open
    path: ../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Managers/CollectionManager.cs
    startLine: 67
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core
  summary: Opens the collection.
  example: []
  syntax:
    content: public SceneOperation Open(SceneCollection collection, bool ignoreLoadingScreen = false, bool force = false)
    parameters:
    - id: collection
      type: AdvancedSceneManager.Models.SceneCollection
    - id: ignoreLoadingScreen
      type: System.Boolean
    - id: force
      type: System.Boolean
      description: Open even if scene is tagged with DoNotOpen.
    return:
      type: AdvancedSceneManager.Core.SceneOperation
    content.vb: Public Function Open(collection As SceneCollection, ignoreLoadingScreen As Boolean = False, force As Boolean = False) As SceneOperation
  overload: AdvancedSceneManager.Core.CollectionManager.Open*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AdvancedSceneManager.Core.CollectionManager.Reopen(System.Boolean)
  commentId: M:AdvancedSceneManager.Core.CollectionManager.Reopen(System.Boolean)
  id: Reopen(System.Boolean)
  parent: AdvancedSceneManager.Core.CollectionManager
  langs:
  - csharp
  - vb
  name: Reopen(Boolean)
  nameWithType: CollectionManager.Reopen(Boolean)
  fullName: AdvancedSceneManager.Core.CollectionManager.Reopen(System.Boolean)
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Managers/CollectionManager.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: Reopen
    path: ../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Managers/CollectionManager.cs
    startLine: 73
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core
  summary: Reopens the current collection.
  example: []
  syntax:
    content: public SceneOperation Reopen(bool reopenPersistent = false)
    parameters:
    - id: reopenPersistent
      type: System.Boolean
    return:
      type: AdvancedSceneManager.Core.SceneOperation
    content.vb: Public Function Reopen(reopenPersistent As Boolean = False) As SceneOperation
  overload: AdvancedSceneManager.Core.CollectionManager.Reopen*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AdvancedSceneManager.Core.CollectionManager.Close
  commentId: M:AdvancedSceneManager.Core.CollectionManager.Close
  id: Close
  parent: AdvancedSceneManager.Core.CollectionManager
  langs:
  - csharp
  - vb
  name: Close()
  nameWithType: CollectionManager.Close()
  fullName: AdvancedSceneManager.Core.CollectionManager.Close()
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Managers/CollectionManager.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: Close
    path: ../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Managers/CollectionManager.cs
    startLine: 109
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core
  summary: Closes the current collection.
  example: []
  syntax:
    content: public SceneOperation Close()
    return:
      type: AdvancedSceneManager.Core.SceneOperation
    content.vb: Public Function Close As SceneOperation
  overload: AdvancedSceneManager.Core.CollectionManager.Close*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AdvancedSceneManager.Core.CollectionManager.Toggle(AdvancedSceneManager.Models.SceneCollection,System.Nullable{System.Boolean})
  commentId: M:AdvancedSceneManager.Core.CollectionManager.Toggle(AdvancedSceneManager.Models.SceneCollection,System.Nullable{System.Boolean})
  id: Toggle(AdvancedSceneManager.Models.SceneCollection,System.Nullable{System.Boolean})
  parent: AdvancedSceneManager.Core.CollectionManager
  langs:
  - csharp
  - vb
  name: Toggle(SceneCollection, Nullable<Boolean>)
  nameWithType: CollectionManager.Toggle(SceneCollection, Nullable<Boolean>)
  fullName: AdvancedSceneManager.Core.CollectionManager.Toggle(AdvancedSceneManager.Models.SceneCollection, System.Nullable<System.Boolean>)
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Managers/CollectionManager.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: Toggle
    path: ../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Managers/CollectionManager.cs
    startLine: 125
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core
  summary: Toggles the collection.
  example: []
  syntax:
    content: public SceneOperation Toggle(SceneCollection collection, bool? enabled = null)
    parameters:
    - id: collection
      type: AdvancedSceneManager.Models.SceneCollection
    - id: enabled
      type: System.Nullable{System.Boolean}
      description: If null, collection will be toggled on or off depending on whatever collection is open or not. Pass a value to ensure that collection either open or closed.
    return:
      type: AdvancedSceneManager.Core.SceneOperation
    content.vb: Public Function Toggle(collection As SceneCollection, enabled As Boolean? = Nothing) As SceneOperation
  overload: AdvancedSceneManager.Core.CollectionManager.Toggle*
  nameWithType.vb: CollectionManager.Toggle(SceneCollection, Nullable(Of Boolean))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: AdvancedSceneManager.Core.CollectionManager.Toggle(AdvancedSceneManager.Models.SceneCollection, System.Nullable(Of System.Boolean))
  name.vb: Toggle(SceneCollection, Nullable(Of Boolean))
- uid: AdvancedSceneManager.Core.CollectionManager.IsOpen(AdvancedSceneManager.Models.SceneCollection)
  commentId: M:AdvancedSceneManager.Core.CollectionManager.IsOpen(AdvancedSceneManager.Models.SceneCollection)
  id: IsOpen(AdvancedSceneManager.Models.SceneCollection)
  parent: AdvancedSceneManager.Core.CollectionManager
  langs:
  - csharp
  - vb
  name: IsOpen(SceneCollection)
  nameWithType: CollectionManager.IsOpen(SceneCollection)
  fullName: AdvancedSceneManager.Core.CollectionManager.IsOpen(AdvancedSceneManager.Models.SceneCollection)
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Managers/CollectionManager.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: IsOpen
    path: ../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Managers/CollectionManager.cs
    startLine: 151
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core
  summary: Gets whatever the collection is currently open.
  example: []
  syntax:
    content: public bool IsOpen(SceneCollection collection)
    parameters:
    - id: collection
      type: AdvancedSceneManager.Models.SceneCollection
    return:
      type: System.Boolean
    content.vb: Public Function IsOpen(collection As SceneCollection) As Boolean
  overload: AdvancedSceneManager.Core.CollectionManager.IsOpen*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AdvancedSceneManager.Core.CollectionManager.CanOpen(AdvancedSceneManager.Models.Scene)
  commentId: M:AdvancedSceneManager.Core.CollectionManager.CanOpen(AdvancedSceneManager.Models.Scene)
  id: CanOpen(AdvancedSceneManager.Models.Scene)
  parent: AdvancedSceneManager.Core.CollectionManager
  langs:
  - csharp
  - vb
  name: CanOpen(Scene)
  nameWithType: CollectionManager.CanOpen(Scene)
  fullName: AdvancedSceneManager.Core.CollectionManager.CanOpen(AdvancedSceneManager.Models.Scene)
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Managers/CollectionManager.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: CanOpen
    path: ../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Managers/CollectionManager.cs
    startLine: 158
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core
  summary: Gets whatever the scene can be opened by the current collection.
  example: []
  syntax:
    content: public override bool CanOpen(Scene scene)
    parameters:
    - id: scene
      type: AdvancedSceneManager.Models.Scene
    return:
      type: System.Boolean
    content.vb: Public Overrides Function CanOpen(scene As Scene) As Boolean
  overridden: AdvancedSceneManager.Core.SceneManagerBase.CanOpen(AdvancedSceneManager.Models.Scene)
  overload: AdvancedSceneManager.Core.CollectionManager.CanOpen*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: AdvancedSceneManager.Core.CollectionManager.Open(AdvancedSceneManager.Models.Scene)
  commentId: M:AdvancedSceneManager.Core.CollectionManager.Open(AdvancedSceneManager.Models.Scene)
  id: Open(AdvancedSceneManager.Models.Scene)
  parent: AdvancedSceneManager.Core.CollectionManager
  langs:
  - csharp
  - vb
  name: Open(Scene)
  nameWithType: CollectionManager.Open(Scene)
  fullName: AdvancedSceneManager.Core.CollectionManager.Open(AdvancedSceneManager.Models.Scene)
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Managers/CollectionManager.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: Open
    path: ../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Managers/CollectionManager.cs
    startLine: 163
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core
  summary: Opens a scene.
  remarks: Throws a <xref href="AdvancedSceneManager.Exceptions.OpenSceneException" data-throw-if-not-resolved="false"></xref> if the scene cannot be opened by the current collection.
  example: []
  syntax:
    content: public override SceneOperation<OpenSceneInfo> Open(Scene scene)
    parameters:
    - id: scene
      type: AdvancedSceneManager.Models.Scene
    return:
      type: AdvancedSceneManager.Core.SceneOperation{AdvancedSceneManager.Core.OpenSceneInfo}
    content.vb: Public Overrides Function Open(scene As Scene) As SceneOperation(Of OpenSceneInfo)
  overridden: AdvancedSceneManager.Core.SceneManagerBase.Open(AdvancedSceneManager.Models.Scene)
  overload: AdvancedSceneManager.Core.CollectionManager.Open*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: AdvancedSceneManager.Core.CollectionManager.OpenMultiple(AdvancedSceneManager.Models.Scene[])
  commentId: M:AdvancedSceneManager.Core.CollectionManager.OpenMultiple(AdvancedSceneManager.Models.Scene[])
  id: OpenMultiple(AdvancedSceneManager.Models.Scene[])
  parent: AdvancedSceneManager.Core.CollectionManager
  langs:
  - csharp
  - vb
  name: OpenMultiple(Scene[])
  nameWithType: CollectionManager.OpenMultiple(Scene[])
  fullName: AdvancedSceneManager.Core.CollectionManager.OpenMultiple(AdvancedSceneManager.Models.Scene[])
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Managers/CollectionManager.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: OpenMultiple
    path: ../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Managers/CollectionManager.cs
    startLine: 170
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core
  summary: Opens the scenes.
  remarks: Throws a <xref href="AdvancedSceneManager.Exceptions.OpenSceneException" data-throw-if-not-resolved="false"></xref> if a scene cannot be opened by the current collection.
  example: []
  syntax:
    content: public override SceneOperation<OpenSceneInfo[]> OpenMultiple(params Scene[] scenes)
    parameters:
    - id: scenes
      type: AdvancedSceneManager.Models.Scene[]
    return:
      type: AdvancedSceneManager.Core.SceneOperation{AdvancedSceneManager.Core.OpenSceneInfo[]}
    content.vb: Public Overrides Function OpenMultiple(ParamArray scenes As Scene()) As SceneOperation(Of OpenSceneInfo())
  overridden: AdvancedSceneManager.Core.SceneManagerBase.OpenMultiple(AdvancedSceneManager.Models.Scene[])
  overload: AdvancedSceneManager.Core.CollectionManager.OpenMultiple*
  nameWithType.vb: CollectionManager.OpenMultiple(Scene())
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: AdvancedSceneManager.Core.CollectionManager.OpenMultiple(AdvancedSceneManager.Models.Scene())
  name.vb: OpenMultiple(Scene())
- uid: AdvancedSceneManager.Core.CollectionManager.Close(AdvancedSceneManager.Core.OpenSceneInfo)
  commentId: M:AdvancedSceneManager.Core.CollectionManager.Close(AdvancedSceneManager.Core.OpenSceneInfo)
  id: Close(AdvancedSceneManager.Core.OpenSceneInfo)
  parent: AdvancedSceneManager.Core.CollectionManager
  langs:
  - csharp
  - vb
  name: Close(OpenSceneInfo)
  nameWithType: CollectionManager.Close(OpenSceneInfo)
  fullName: AdvancedSceneManager.Core.CollectionManager.Close(AdvancedSceneManager.Core.OpenSceneInfo)
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Managers/CollectionManager.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: Close
    path: ../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Managers/CollectionManager.cs
    startLine: 183
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core
  summary: Closes a scene.
  remarks: Throws a <xref href="AdvancedSceneManager.Exceptions.CloseSceneException" data-throw-if-not-resolved="false"></xref> if the scene is not a part of the current collection.
  example: []
  syntax:
    content: public override SceneOperation Close(OpenSceneInfo scene)
    parameters:
    - id: scene
      type: AdvancedSceneManager.Core.OpenSceneInfo
    return:
      type: AdvancedSceneManager.Core.SceneOperation
    content.vb: Public Overrides Function Close(scene As OpenSceneInfo) As SceneOperation
  overridden: AdvancedSceneManager.Core.SceneManagerBase.Close(AdvancedSceneManager.Core.OpenSceneInfo)
  overload: AdvancedSceneManager.Core.CollectionManager.Close*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: AdvancedSceneManager.Core.CollectionManager.CloseMultiple(AdvancedSceneManager.Core.OpenSceneInfo[])
  commentId: M:AdvancedSceneManager.Core.CollectionManager.CloseMultiple(AdvancedSceneManager.Core.OpenSceneInfo[])
  id: CloseMultiple(AdvancedSceneManager.Core.OpenSceneInfo[])
  parent: AdvancedSceneManager.Core.CollectionManager
  langs:
  - csharp
  - vb
  name: CloseMultiple(OpenSceneInfo[])
  nameWithType: CollectionManager.CloseMultiple(OpenSceneInfo[])
  fullName: AdvancedSceneManager.Core.CollectionManager.CloseMultiple(AdvancedSceneManager.Core.OpenSceneInfo[])
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Managers/CollectionManager.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: CloseMultiple
    path: ../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Managers/CollectionManager.cs
    startLine: 193
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core
  summary: Closes the scenes.
  remarks: Throws a <xref href="AdvancedSceneManager.Exceptions.CloseSceneException" data-throw-if-not-resolved="false"></xref> if a scene is not a part of the current collection.
  example: []
  syntax:
    content: public override SceneOperation CloseMultiple(params OpenSceneInfo[] scenes)
    parameters:
    - id: scenes
      type: AdvancedSceneManager.Core.OpenSceneInfo[]
    return:
      type: AdvancedSceneManager.Core.SceneOperation
    content.vb: Public Overrides Function CloseMultiple(ParamArray scenes As OpenSceneInfo()) As SceneOperation
  overridden: AdvancedSceneManager.Core.SceneManagerBase.CloseMultiple(AdvancedSceneManager.Core.OpenSceneInfo[])
  overload: AdvancedSceneManager.Core.CollectionManager.CloseMultiple*
  nameWithType.vb: CollectionManager.CloseMultiple(OpenSceneInfo())
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: AdvancedSceneManager.Core.CollectionManager.CloseMultiple(AdvancedSceneManager.Core.OpenSceneInfo())
  name.vb: CloseMultiple(OpenSceneInfo())
references:
- uid: AdvancedSceneManager.SceneManager.collection
  commentId: P:AdvancedSceneManager.SceneManager.collection
  isExternal: true
- uid: AdvancedSceneManager.Core
  commentId: N:AdvancedSceneManager.Core
  name: AdvancedSceneManager.Core
  nameWithType: AdvancedSceneManager.Core
  fullName: AdvancedSceneManager.Core
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: UnityEngine.Object
  commentId: T:UnityEngine.Object
  parent: UnityEngine
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: UnityEngine.Object
- uid: UnityEngine.ScriptableObject
  commentId: T:UnityEngine.ScriptableObject
  parent: UnityEngine
  isExternal: true
  name: ScriptableObject
  nameWithType: ScriptableObject
  fullName: UnityEngine.ScriptableObject
- uid: AdvancedSceneManager.Core.SceneManagerBase
  commentId: T:AdvancedSceneManager.Core.SceneManagerBase
  parent: AdvancedSceneManager.Core
  name: SceneManagerBase
  nameWithType: SceneManagerBase
  fullName: AdvancedSceneManager.Core.SceneManagerBase
- uid: UnityEngine.ScriptableObject.AdvancedSceneManager.Utility.ScriptableObjectUtility.Save
  commentId: M:AdvancedSceneManager.Utility.ScriptableObjectUtility.Save(UnityEngine.ScriptableObject)
  parent: AdvancedSceneManager.Utility.ScriptableObjectUtility
  definition: AdvancedSceneManager.Utility.ScriptableObjectUtility.Save(UnityEngine.ScriptableObject)
  name: Save()
  nameWithType: ScriptableObjectUtility.Save()
  fullName: AdvancedSceneManager.Utility.ScriptableObjectUtility.Save()
  spec.csharp:
  - uid: AdvancedSceneManager.Utility.ScriptableObjectUtility.Save
    name: Save
    nameWithType: ScriptableObjectUtility.Save
    fullName: AdvancedSceneManager.Utility.ScriptableObjectUtility.Save
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AdvancedSceneManager.Utility.ScriptableObjectUtility.Save
    name: Save
    nameWithType: ScriptableObjectUtility.Save
    fullName: AdvancedSceneManager.Utility.ScriptableObjectUtility.Save
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: UnityEngine
  commentId: N:UnityEngine
  isExternal: true
  name: UnityEngine
  nameWithType: UnityEngine
  fullName: UnityEngine
- uid: AdvancedSceneManager.Utility.ScriptableObjectUtility.Save(UnityEngine.ScriptableObject)
  commentId: M:AdvancedSceneManager.Utility.ScriptableObjectUtility.Save(UnityEngine.ScriptableObject)
  isExternal: true
  name: Save(ScriptableObject)
  nameWithType: ScriptableObjectUtility.Save(ScriptableObject)
  fullName: AdvancedSceneManager.Utility.ScriptableObjectUtility.Save(UnityEngine.ScriptableObject)
  spec.csharp:
  - uid: AdvancedSceneManager.Utility.ScriptableObjectUtility.Save(UnityEngine.ScriptableObject)
    name: Save
    nameWithType: ScriptableObjectUtility.Save
    fullName: AdvancedSceneManager.Utility.ScriptableObjectUtility.Save
  - name: (
    nameWithType: (
    fullName: (
  - uid: UnityEngine.ScriptableObject
    name: ScriptableObject
    nameWithType: ScriptableObject
    fullName: UnityEngine.ScriptableObject
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AdvancedSceneManager.Utility.ScriptableObjectUtility.Save(UnityEngine.ScriptableObject)
    name: Save
    nameWithType: ScriptableObjectUtility.Save
    fullName: AdvancedSceneManager.Utility.ScriptableObjectUtility.Save
  - name: (
    nameWithType: (
    fullName: (
  - uid: UnityEngine.ScriptableObject
    name: ScriptableObject
    nameWithType: ScriptableObject
    fullName: UnityEngine.ScriptableObject
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: AdvancedSceneManager.Utility.ScriptableObjectUtility
  commentId: T:AdvancedSceneManager.Utility.ScriptableObjectUtility
  parent: AdvancedSceneManager.Utility
  name: ScriptableObjectUtility
  nameWithType: ScriptableObjectUtility
  fullName: AdvancedSceneManager.Utility.ScriptableObjectUtility
- uid: AdvancedSceneManager.Utility
  commentId: N:AdvancedSceneManager.Utility
  name: AdvancedSceneManager.Utility
  nameWithType: AdvancedSceneManager.Utility
  fullName: AdvancedSceneManager.Utility
- uid: AdvancedSceneManager.Core.CollectionManager.op_Implicit*
  commentId: Overload:AdvancedSceneManager.Core.CollectionManager.op_Implicit
  name: Implicit
  nameWithType: CollectionManager.Implicit
  fullName: AdvancedSceneManager.Core.CollectionManager.Implicit
  nameWithType.vb: CollectionManager.Widening
  fullName.vb: AdvancedSceneManager.Core.CollectionManager.Widening
  name.vb: Widening
- uid: AdvancedSceneManager.Core.CollectionManager
  commentId: T:AdvancedSceneManager.Core.CollectionManager
  parent: AdvancedSceneManager.Core
  name: CollectionManager
  nameWithType: CollectionManager
  fullName: AdvancedSceneManager.Core.CollectionManager
- uid: AdvancedSceneManager.Models.SceneCollection
  commentId: T:AdvancedSceneManager.Models.SceneCollection
  parent: AdvancedSceneManager.Models
  name: SceneCollection
  nameWithType: SceneCollection
  fullName: AdvancedSceneManager.Models.SceneCollection
- uid: AdvancedSceneManager.Models
  commentId: N:AdvancedSceneManager.Models
  name: AdvancedSceneManager.Models
  nameWithType: AdvancedSceneManager.Models
  fullName: AdvancedSceneManager.Models
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Action{AdvancedSceneManager.Models.SceneCollection}
  commentId: T:System.Action{AdvancedSceneManager.Models.SceneCollection}
  parent: System
  definition: System.Action`1
  name: Action<SceneCollection>
  nameWithType: Action<SceneCollection>
  fullName: System.Action<AdvancedSceneManager.Models.SceneCollection>
  nameWithType.vb: Action(Of SceneCollection)
  fullName.vb: System.Action(Of AdvancedSceneManager.Models.SceneCollection)
  name.vb: Action(Of SceneCollection)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: AdvancedSceneManager.Models.SceneCollection
    name: SceneCollection
    nameWithType: SceneCollection
    fullName: AdvancedSceneManager.Models.SceneCollection
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: AdvancedSceneManager.Models.SceneCollection
    name: SceneCollection
    nameWithType: SceneCollection
    fullName: AdvancedSceneManager.Models.SceneCollection
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: AdvancedSceneManager.Core.CollectionManager.current*
  commentId: Overload:AdvancedSceneManager.Core.CollectionManager.current
  name: current
  nameWithType: CollectionManager.current
  fullName: AdvancedSceneManager.Core.CollectionManager.current
- uid: AdvancedSceneManager.Core.CollectionManager.previous*
  commentId: Overload:AdvancedSceneManager.Core.CollectionManager.previous
  name: previous
  nameWithType: CollectionManager.previous
  fullName: AdvancedSceneManager.Core.CollectionManager.previous
- uid: AdvancedSceneManager.Core.SceneManagerBase.OnAfterDeserialize2
  commentId: M:AdvancedSceneManager.Core.SceneManagerBase.OnAfterDeserialize2
  parent: AdvancedSceneManager.Core.SceneManagerBase
  name: OnAfterDeserialize2()
  nameWithType: SceneManagerBase.OnAfterDeserialize2()
  fullName: AdvancedSceneManager.Core.SceneManagerBase.OnAfterDeserialize2()
  spec.csharp:
  - uid: AdvancedSceneManager.Core.SceneManagerBase.OnAfterDeserialize2
    name: OnAfterDeserialize2
    nameWithType: SceneManagerBase.OnAfterDeserialize2
    fullName: AdvancedSceneManager.Core.SceneManagerBase.OnAfterDeserialize2
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AdvancedSceneManager.Core.SceneManagerBase.OnAfterDeserialize2
    name: OnAfterDeserialize2
    nameWithType: SceneManagerBase.OnAfterDeserialize2
    fullName: AdvancedSceneManager.Core.SceneManagerBase.OnAfterDeserialize2
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: AdvancedSceneManager.Core.CollectionManager.OnAfterDeserialize2*
  commentId: Overload:AdvancedSceneManager.Core.CollectionManager.OnAfterDeserialize2
  name: OnAfterDeserialize2
  nameWithType: CollectionManager.OnAfterDeserialize2
  fullName: AdvancedSceneManager.Core.CollectionManager.OnAfterDeserialize2
- uid: AdvancedSceneManager.Core.CollectionManager.Open*
  commentId: Overload:AdvancedSceneManager.Core.CollectionManager.Open
  name: Open
  nameWithType: CollectionManager.Open
  fullName: AdvancedSceneManager.Core.CollectionManager.Open
- uid: AdvancedSceneManager.Core.SceneOperation
  commentId: T:AdvancedSceneManager.Core.SceneOperation
  parent: AdvancedSceneManager.Core
  name: SceneOperation
  nameWithType: SceneOperation
  fullName: AdvancedSceneManager.Core.SceneOperation
- uid: AdvancedSceneManager.Core.CollectionManager.Reopen*
  commentId: Overload:AdvancedSceneManager.Core.CollectionManager.Reopen
  name: Reopen
  nameWithType: CollectionManager.Reopen
  fullName: AdvancedSceneManager.Core.CollectionManager.Reopen
- uid: AdvancedSceneManager.Core.CollectionManager.Close*
  commentId: Overload:AdvancedSceneManager.Core.CollectionManager.Close
  name: Close
  nameWithType: CollectionManager.Close
  fullName: AdvancedSceneManager.Core.CollectionManager.Close
- uid: AdvancedSceneManager.Core.CollectionManager.Toggle*
  commentId: Overload:AdvancedSceneManager.Core.CollectionManager.Toggle
  name: Toggle
  nameWithType: CollectionManager.Toggle
  fullName: AdvancedSceneManager.Core.CollectionManager.Toggle
- uid: System.Nullable{System.Boolean}
  commentId: T:System.Nullable{System.Boolean}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Boolean>
  nameWithType: Nullable<Boolean>
  fullName: System.Nullable<System.Boolean>
  nameWithType.vb: Nullable(Of Boolean)
  fullName.vb: System.Nullable(Of System.Boolean)
  name.vb: Nullable(Of Boolean)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: AdvancedSceneManager.Core.CollectionManager.IsOpen*
  commentId: Overload:AdvancedSceneManager.Core.CollectionManager.IsOpen
  name: IsOpen
  nameWithType: CollectionManager.IsOpen
  fullName: AdvancedSceneManager.Core.CollectionManager.IsOpen
- uid: AdvancedSceneManager.Core.SceneManagerBase.CanOpen(AdvancedSceneManager.Models.Scene)
  commentId: M:AdvancedSceneManager.Core.SceneManagerBase.CanOpen(AdvancedSceneManager.Models.Scene)
  parent: AdvancedSceneManager.Core.SceneManagerBase
  name: CanOpen(Scene)
  nameWithType: SceneManagerBase.CanOpen(Scene)
  fullName: AdvancedSceneManager.Core.SceneManagerBase.CanOpen(AdvancedSceneManager.Models.Scene)
  spec.csharp:
  - uid: AdvancedSceneManager.Core.SceneManagerBase.CanOpen(AdvancedSceneManager.Models.Scene)
    name: CanOpen
    nameWithType: SceneManagerBase.CanOpen
    fullName: AdvancedSceneManager.Core.SceneManagerBase.CanOpen
  - name: (
    nameWithType: (
    fullName: (
  - uid: AdvancedSceneManager.Models.Scene
    name: Scene
    nameWithType: Scene
    fullName: AdvancedSceneManager.Models.Scene
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AdvancedSceneManager.Core.SceneManagerBase.CanOpen(AdvancedSceneManager.Models.Scene)
    name: CanOpen
    nameWithType: SceneManagerBase.CanOpen
    fullName: AdvancedSceneManager.Core.SceneManagerBase.CanOpen
  - name: (
    nameWithType: (
    fullName: (
  - uid: AdvancedSceneManager.Models.Scene
    name: Scene
    nameWithType: Scene
    fullName: AdvancedSceneManager.Models.Scene
  - name: )
    nameWithType: )
    fullName: )
- uid: AdvancedSceneManager.Core.CollectionManager.CanOpen*
  commentId: Overload:AdvancedSceneManager.Core.CollectionManager.CanOpen
  name: CanOpen
  nameWithType: CollectionManager.CanOpen
  fullName: AdvancedSceneManager.Core.CollectionManager.CanOpen
- uid: AdvancedSceneManager.Models.Scene
  commentId: T:AdvancedSceneManager.Models.Scene
  parent: AdvancedSceneManager.Models
  name: Scene
  nameWithType: Scene
  fullName: AdvancedSceneManager.Models.Scene
- uid: AdvancedSceneManager.Exceptions.OpenSceneException
  commentId: T:AdvancedSceneManager.Exceptions.OpenSceneException
  name: OpenSceneException
  nameWithType: OpenSceneException
  fullName: AdvancedSceneManager.Exceptions.OpenSceneException
- uid: AdvancedSceneManager.Core.SceneManagerBase.Open(AdvancedSceneManager.Models.Scene)
  commentId: M:AdvancedSceneManager.Core.SceneManagerBase.Open(AdvancedSceneManager.Models.Scene)
  parent: AdvancedSceneManager.Core.SceneManagerBase
  name: Open(Scene)
  nameWithType: SceneManagerBase.Open(Scene)
  fullName: AdvancedSceneManager.Core.SceneManagerBase.Open(AdvancedSceneManager.Models.Scene)
  spec.csharp:
  - uid: AdvancedSceneManager.Core.SceneManagerBase.Open(AdvancedSceneManager.Models.Scene)
    name: Open
    nameWithType: SceneManagerBase.Open
    fullName: AdvancedSceneManager.Core.SceneManagerBase.Open
  - name: (
    nameWithType: (
    fullName: (
  - uid: AdvancedSceneManager.Models.Scene
    name: Scene
    nameWithType: Scene
    fullName: AdvancedSceneManager.Models.Scene
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AdvancedSceneManager.Core.SceneManagerBase.Open(AdvancedSceneManager.Models.Scene)
    name: Open
    nameWithType: SceneManagerBase.Open
    fullName: AdvancedSceneManager.Core.SceneManagerBase.Open
  - name: (
    nameWithType: (
    fullName: (
  - uid: AdvancedSceneManager.Models.Scene
    name: Scene
    nameWithType: Scene
    fullName: AdvancedSceneManager.Models.Scene
  - name: )
    nameWithType: )
    fullName: )
- uid: AdvancedSceneManager.Core.SceneOperation{AdvancedSceneManager.Core.OpenSceneInfo}
  commentId: T:AdvancedSceneManager.Core.SceneOperation{AdvancedSceneManager.Core.OpenSceneInfo}
  parent: AdvancedSceneManager.Core
  definition: AdvancedSceneManager.Core.SceneOperation`1
  name: SceneOperation<OpenSceneInfo>
  nameWithType: SceneOperation<OpenSceneInfo>
  fullName: AdvancedSceneManager.Core.SceneOperation<AdvancedSceneManager.Core.OpenSceneInfo>
  nameWithType.vb: SceneOperation(Of OpenSceneInfo)
  fullName.vb: AdvancedSceneManager.Core.SceneOperation(Of AdvancedSceneManager.Core.OpenSceneInfo)
  name.vb: SceneOperation(Of OpenSceneInfo)
  spec.csharp:
  - uid: AdvancedSceneManager.Core.SceneOperation`1
    name: SceneOperation
    nameWithType: SceneOperation
    fullName: AdvancedSceneManager.Core.SceneOperation
  - name: <
    nameWithType: <
    fullName: <
  - uid: AdvancedSceneManager.Core.OpenSceneInfo
    name: OpenSceneInfo
    nameWithType: OpenSceneInfo
    fullName: AdvancedSceneManager.Core.OpenSceneInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: AdvancedSceneManager.Core.SceneOperation`1
    name: SceneOperation
    nameWithType: SceneOperation
    fullName: AdvancedSceneManager.Core.SceneOperation
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: AdvancedSceneManager.Core.OpenSceneInfo
    name: OpenSceneInfo
    nameWithType: OpenSceneInfo
    fullName: AdvancedSceneManager.Core.OpenSceneInfo
  - name: )
    nameWithType: )
    fullName: )
- uid: AdvancedSceneManager.Core.SceneOperation`1
  commentId: T:AdvancedSceneManager.Core.SceneOperation`1
  parent: AdvancedSceneManager.Core
  name: SceneOperation<ReturnValue>
  nameWithType: SceneOperation<ReturnValue>
  fullName: AdvancedSceneManager.Core.SceneOperation<ReturnValue>
  nameWithType.vb: SceneOperation(Of ReturnValue)
  fullName.vb: AdvancedSceneManager.Core.SceneOperation(Of ReturnValue)
  name.vb: SceneOperation(Of ReturnValue)
  spec.csharp:
  - uid: AdvancedSceneManager.Core.SceneOperation`1
    name: SceneOperation
    nameWithType: SceneOperation
    fullName: AdvancedSceneManager.Core.SceneOperation
  - name: <
    nameWithType: <
    fullName: <
  - name: ReturnValue
    nameWithType: ReturnValue
    fullName: ReturnValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: AdvancedSceneManager.Core.SceneOperation`1
    name: SceneOperation
    nameWithType: SceneOperation
    fullName: AdvancedSceneManager.Core.SceneOperation
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ReturnValue
    nameWithType: ReturnValue
    fullName: ReturnValue
  - name: )
    nameWithType: )
    fullName: )
- uid: AdvancedSceneManager.Core.SceneManagerBase.OpenMultiple(AdvancedSceneManager.Models.Scene[])
  commentId: M:AdvancedSceneManager.Core.SceneManagerBase.OpenMultiple(AdvancedSceneManager.Models.Scene[])
  parent: AdvancedSceneManager.Core.SceneManagerBase
  name: OpenMultiple(Scene[])
  nameWithType: SceneManagerBase.OpenMultiple(Scene[])
  fullName: AdvancedSceneManager.Core.SceneManagerBase.OpenMultiple(AdvancedSceneManager.Models.Scene[])
  nameWithType.vb: SceneManagerBase.OpenMultiple(Scene())
  fullName.vb: AdvancedSceneManager.Core.SceneManagerBase.OpenMultiple(AdvancedSceneManager.Models.Scene())
  name.vb: OpenMultiple(Scene())
  spec.csharp:
  - uid: AdvancedSceneManager.Core.SceneManagerBase.OpenMultiple(AdvancedSceneManager.Models.Scene[])
    name: OpenMultiple
    nameWithType: SceneManagerBase.OpenMultiple
    fullName: AdvancedSceneManager.Core.SceneManagerBase.OpenMultiple
  - name: (
    nameWithType: (
    fullName: (
  - uid: AdvancedSceneManager.Models.Scene
    name: Scene
    nameWithType: Scene
    fullName: AdvancedSceneManager.Models.Scene
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AdvancedSceneManager.Core.SceneManagerBase.OpenMultiple(AdvancedSceneManager.Models.Scene[])
    name: OpenMultiple
    nameWithType: SceneManagerBase.OpenMultiple
    fullName: AdvancedSceneManager.Core.SceneManagerBase.OpenMultiple
  - name: (
    nameWithType: (
    fullName: (
  - uid: AdvancedSceneManager.Models.Scene
    name: Scene
    nameWithType: Scene
    fullName: AdvancedSceneManager.Models.Scene
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: AdvancedSceneManager.Core.CollectionManager.OpenMultiple*
  commentId: Overload:AdvancedSceneManager.Core.CollectionManager.OpenMultiple
  name: OpenMultiple
  nameWithType: CollectionManager.OpenMultiple
  fullName: AdvancedSceneManager.Core.CollectionManager.OpenMultiple
- uid: AdvancedSceneManager.Models.Scene[]
  isExternal: true
  name: Scene[]
  nameWithType: Scene[]
  fullName: AdvancedSceneManager.Models.Scene[]
  nameWithType.vb: Scene()
  fullName.vb: AdvancedSceneManager.Models.Scene()
  name.vb: Scene()
  spec.csharp:
  - uid: AdvancedSceneManager.Models.Scene
    name: Scene
    nameWithType: Scene
    fullName: AdvancedSceneManager.Models.Scene
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: AdvancedSceneManager.Models.Scene
    name: Scene
    nameWithType: Scene
    fullName: AdvancedSceneManager.Models.Scene
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: AdvancedSceneManager.Core.SceneOperation{AdvancedSceneManager.Core.OpenSceneInfo[]}
  commentId: T:AdvancedSceneManager.Core.SceneOperation{AdvancedSceneManager.Core.OpenSceneInfo[]}
  parent: AdvancedSceneManager.Core
  definition: AdvancedSceneManager.Core.SceneOperation`1
  name: SceneOperation<OpenSceneInfo[]>
  nameWithType: SceneOperation<OpenSceneInfo[]>
  fullName: AdvancedSceneManager.Core.SceneOperation<AdvancedSceneManager.Core.OpenSceneInfo[]>
  nameWithType.vb: SceneOperation(Of OpenSceneInfo())
  fullName.vb: AdvancedSceneManager.Core.SceneOperation(Of AdvancedSceneManager.Core.OpenSceneInfo())
  name.vb: SceneOperation(Of OpenSceneInfo())
  spec.csharp:
  - uid: AdvancedSceneManager.Core.SceneOperation`1
    name: SceneOperation
    nameWithType: SceneOperation
    fullName: AdvancedSceneManager.Core.SceneOperation
  - name: <
    nameWithType: <
    fullName: <
  - uid: AdvancedSceneManager.Core.OpenSceneInfo
    name: OpenSceneInfo
    nameWithType: OpenSceneInfo
    fullName: AdvancedSceneManager.Core.OpenSceneInfo
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: AdvancedSceneManager.Core.SceneOperation`1
    name: SceneOperation
    nameWithType: SceneOperation
    fullName: AdvancedSceneManager.Core.SceneOperation
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: AdvancedSceneManager.Core.OpenSceneInfo
    name: OpenSceneInfo
    nameWithType: OpenSceneInfo
    fullName: AdvancedSceneManager.Core.OpenSceneInfo
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: AdvancedSceneManager.Exceptions.CloseSceneException
  commentId: T:AdvancedSceneManager.Exceptions.CloseSceneException
  name: CloseSceneException
  nameWithType: CloseSceneException
  fullName: AdvancedSceneManager.Exceptions.CloseSceneException
- uid: AdvancedSceneManager.Core.SceneManagerBase.Close(AdvancedSceneManager.Core.OpenSceneInfo)
  commentId: M:AdvancedSceneManager.Core.SceneManagerBase.Close(AdvancedSceneManager.Core.OpenSceneInfo)
  parent: AdvancedSceneManager.Core.SceneManagerBase
  name: Close(OpenSceneInfo)
  nameWithType: SceneManagerBase.Close(OpenSceneInfo)
  fullName: AdvancedSceneManager.Core.SceneManagerBase.Close(AdvancedSceneManager.Core.OpenSceneInfo)
  spec.csharp:
  - uid: AdvancedSceneManager.Core.SceneManagerBase.Close(AdvancedSceneManager.Core.OpenSceneInfo)
    name: Close
    nameWithType: SceneManagerBase.Close
    fullName: AdvancedSceneManager.Core.SceneManagerBase.Close
  - name: (
    nameWithType: (
    fullName: (
  - uid: AdvancedSceneManager.Core.OpenSceneInfo
    name: OpenSceneInfo
    nameWithType: OpenSceneInfo
    fullName: AdvancedSceneManager.Core.OpenSceneInfo
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AdvancedSceneManager.Core.SceneManagerBase.Close(AdvancedSceneManager.Core.OpenSceneInfo)
    name: Close
    nameWithType: SceneManagerBase.Close
    fullName: AdvancedSceneManager.Core.SceneManagerBase.Close
  - name: (
    nameWithType: (
    fullName: (
  - uid: AdvancedSceneManager.Core.OpenSceneInfo
    name: OpenSceneInfo
    nameWithType: OpenSceneInfo
    fullName: AdvancedSceneManager.Core.OpenSceneInfo
  - name: )
    nameWithType: )
    fullName: )
- uid: AdvancedSceneManager.Core.OpenSceneInfo
  commentId: T:AdvancedSceneManager.Core.OpenSceneInfo
  parent: AdvancedSceneManager.Core
  name: OpenSceneInfo
  nameWithType: OpenSceneInfo
  fullName: AdvancedSceneManager.Core.OpenSceneInfo
- uid: AdvancedSceneManager.Core.SceneManagerBase.CloseMultiple(AdvancedSceneManager.Core.OpenSceneInfo[])
  commentId: M:AdvancedSceneManager.Core.SceneManagerBase.CloseMultiple(AdvancedSceneManager.Core.OpenSceneInfo[])
  parent: AdvancedSceneManager.Core.SceneManagerBase
  name: CloseMultiple(OpenSceneInfo[])
  nameWithType: SceneManagerBase.CloseMultiple(OpenSceneInfo[])
  fullName: AdvancedSceneManager.Core.SceneManagerBase.CloseMultiple(AdvancedSceneManager.Core.OpenSceneInfo[])
  nameWithType.vb: SceneManagerBase.CloseMultiple(OpenSceneInfo())
  fullName.vb: AdvancedSceneManager.Core.SceneManagerBase.CloseMultiple(AdvancedSceneManager.Core.OpenSceneInfo())
  name.vb: CloseMultiple(OpenSceneInfo())
  spec.csharp:
  - uid: AdvancedSceneManager.Core.SceneManagerBase.CloseMultiple(AdvancedSceneManager.Core.OpenSceneInfo[])
    name: CloseMultiple
    nameWithType: SceneManagerBase.CloseMultiple
    fullName: AdvancedSceneManager.Core.SceneManagerBase.CloseMultiple
  - name: (
    nameWithType: (
    fullName: (
  - uid: AdvancedSceneManager.Core.OpenSceneInfo
    name: OpenSceneInfo
    nameWithType: OpenSceneInfo
    fullName: AdvancedSceneManager.Core.OpenSceneInfo
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AdvancedSceneManager.Core.SceneManagerBase.CloseMultiple(AdvancedSceneManager.Core.OpenSceneInfo[])
    name: CloseMultiple
    nameWithType: SceneManagerBase.CloseMultiple
    fullName: AdvancedSceneManager.Core.SceneManagerBase.CloseMultiple
  - name: (
    nameWithType: (
    fullName: (
  - uid: AdvancedSceneManager.Core.OpenSceneInfo
    name: OpenSceneInfo
    nameWithType: OpenSceneInfo
    fullName: AdvancedSceneManager.Core.OpenSceneInfo
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: AdvancedSceneManager.Core.CollectionManager.CloseMultiple*
  commentId: Overload:AdvancedSceneManager.Core.CollectionManager.CloseMultiple
  name: CloseMultiple
  nameWithType: CollectionManager.CloseMultiple
  fullName: AdvancedSceneManager.Core.CollectionManager.CloseMultiple
- uid: AdvancedSceneManager.Core.OpenSceneInfo[]
  isExternal: true
  name: OpenSceneInfo[]
  nameWithType: OpenSceneInfo[]
  fullName: AdvancedSceneManager.Core.OpenSceneInfo[]
  nameWithType.vb: OpenSceneInfo()
  fullName.vb: AdvancedSceneManager.Core.OpenSceneInfo()
  name.vb: OpenSceneInfo()
  spec.csharp:
  - uid: AdvancedSceneManager.Core.OpenSceneInfo
    name: OpenSceneInfo
    nameWithType: OpenSceneInfo
    fullName: AdvancedSceneManager.Core.OpenSceneInfo
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: AdvancedSceneManager.Core.OpenSceneInfo
    name: OpenSceneInfo
    nameWithType: OpenSceneInfo
    fullName: AdvancedSceneManager.Core.OpenSceneInfo
  - name: ()
    nameWithType: ()
    fullName: ()
