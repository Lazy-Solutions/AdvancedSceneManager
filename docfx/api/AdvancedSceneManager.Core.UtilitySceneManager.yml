### YamlMime:ManagedReference
items:
- uid: AdvancedSceneManager.Core.UtilitySceneManager
  commentId: T:AdvancedSceneManager.Core.UtilitySceneManager
  id: UtilitySceneManager
  parent: AdvancedSceneManager.Core
  children:
  - AdvancedSceneManager.Core.UtilitySceneManager.activeScene
  - AdvancedSceneManager.Core.UtilitySceneManager.ActiveSceneChanged
  - AdvancedSceneManager.Core.UtilitySceneManager.Close(AdvancedSceneManager.Core.OpenSceneInfo)
  - AdvancedSceneManager.Core.UtilitySceneManager.CloseAll(System.Boolean)
  - AdvancedSceneManager.Core.UtilitySceneManager.currentOperation
  - AdvancedSceneManager.Core.UtilitySceneManager.dontDestroyOnLoad
  - AdvancedSceneManager.Core.UtilitySceneManager.DoSceneCallback``1(System.Func{``0,System.Collections.IEnumerator})
  - AdvancedSceneManager.Core.UtilitySceneManager.FindOpenScene(AdvancedSceneManager.Models.Scene)
  - AdvancedSceneManager.Core.UtilitySceneManager.FindOpenScene(UnityEngine.SceneManagement.Scene)
  - AdvancedSceneManager.Core.UtilitySceneManager.FindPreloadedScene(AdvancedSceneManager.Models.Scene)
  - AdvancedSceneManager.Core.UtilitySceneManager.FindPreloadedScene(UnityEngine.SceneManagement.Scene)
  - AdvancedSceneManager.Core.UtilitySceneManager.FindPreloadedScenes
  - AdvancedSceneManager.Core.UtilitySceneManager.isBusy
  - AdvancedSceneManager.Core.UtilitySceneManager.IsOpen(AdvancedSceneManager.Models.Scene)
  - AdvancedSceneManager.Core.UtilitySceneManager.IsOpen(UnityEngine.SceneManagement.Scene)
  - AdvancedSceneManager.Core.UtilitySceneManager.LoadingScreenClosed
  - AdvancedSceneManager.Core.UtilitySceneManager.LoadingScreenClosing
  - AdvancedSceneManager.Core.UtilitySceneManager.LoadingScreenOpened
  - AdvancedSceneManager.Core.UtilitySceneManager.LoadingScreenOpening
  - AdvancedSceneManager.Core.UtilitySceneManager.OpenOrReopen(AdvancedSceneManager.Models.Scene,AdvancedSceneManager.Models.SceneCollection)
  - AdvancedSceneManager.Core.UtilitySceneManager.openScenes
  - AdvancedSceneManager.Core.UtilitySceneManager.queuedOperations
  - AdvancedSceneManager.Core.UtilitySceneManager.queueEmpty
  - AdvancedSceneManager.Core.UtilitySceneManager.RegisterOpenCallback``1(``0,System.Action,System.Action,System.Boolean)
  - AdvancedSceneManager.Core.UtilitySceneManager.Reopen(AdvancedSceneManager.Core.OpenSceneInfo)
  - AdvancedSceneManager.Core.UtilitySceneManager.runningOperations
  - AdvancedSceneManager.Core.UtilitySceneManager.SceneClosed
  - AdvancedSceneManager.Core.UtilitySceneManager.SceneOpened
  - AdvancedSceneManager.Core.UtilitySceneManager.SetActive(AdvancedSceneManager.Models.Scene)
  - AdvancedSceneManager.Core.UtilitySceneManager.SetActive(UnityEngine.SceneManagement.Scene)
  - AdvancedSceneManager.Core.UtilitySceneManager.Toggle(AdvancedSceneManager.Models.Scene,System.Nullable{System.Boolean})
  - AdvancedSceneManager.Core.UtilitySceneManager.Toggle(UnityEngine.SceneManagement.Scene,System.Nullable{System.Boolean})
  - AdvancedSceneManager.Core.UtilitySceneManager.UnregisterCallback``1(``0,System.Action,System.Action)
  langs:
  - csharp
  - vb
  name: UtilitySceneManager
  nameWithType: UtilitySceneManager
  fullName: AdvancedSceneManager.Core.UtilitySceneManager
  type: Class
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Managers/UtilityManager.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: UtilitySceneManager
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Managers/UtilityManager.cs
    startLine: 26
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core
  summary: An utility scene manager that helps with actions that might relate to either <xref href="AdvancedSceneManager.SceneManager.collection" data-throw-if-not-resolved="false"></xref> or <xref href="AdvancedSceneManager.SceneManager.standalone" data-throw-if-not-resolved="false"></xref> managers.
  remarks: 'Usage: <xref href="AdvancedSceneManager.SceneManager.utility" data-throw-if-not-resolved="false"></xref>.'
  example: []
  syntax:
    content: public class UtilitySceneManager
    content.vb: Public Class UtilitySceneManager
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: AdvancedSceneManager.Core.UtilitySceneManager.openScenes
  commentId: P:AdvancedSceneManager.Core.UtilitySceneManager.openScenes
  id: openScenes
  parent: AdvancedSceneManager.Core.UtilitySceneManager
  langs:
  - csharp
  - vb
  name: openScenes
  nameWithType: UtilitySceneManager.openScenes
  fullName: AdvancedSceneManager.Core.UtilitySceneManager.openScenes
  type: Property
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Managers/UtilityManager.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: openScenes
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Managers/UtilityManager.cs
    startLine: 30
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core
  summary: Gets all currently open scenes.
  example: []
  syntax:
    content: public IEnumerable<OpenSceneInfo> openScenes { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{AdvancedSceneManager.Core.OpenSceneInfo}
    content.vb: Public ReadOnly Property openScenes As IEnumerable(Of OpenSceneInfo)
  overload: AdvancedSceneManager.Core.UtilitySceneManager.openScenes*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: AdvancedSceneManager.Core.UtilitySceneManager.DoSceneCallback``1(System.Func{``0,System.Collections.IEnumerator})
  commentId: M:AdvancedSceneManager.Core.UtilitySceneManager.DoSceneCallback``1(System.Func{``0,System.Collections.IEnumerator})
  id: DoSceneCallback``1(System.Func{``0,System.Collections.IEnumerator})
  parent: AdvancedSceneManager.Core.UtilitySceneManager
  langs:
  - csharp
  - vb
  name: DoSceneCallback<T>(Func<T, IEnumerator>)
  nameWithType: UtilitySceneManager.DoSceneCallback<T>(Func<T, IEnumerator>)
  fullName: AdvancedSceneManager.Core.UtilitySceneManager.DoSceneCallback<T>(System.Func<T, System.Collections.IEnumerator>)
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Managers/UtilityManager.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: DoSceneCallback
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Managers/UtilityManager.cs
    startLine: 58
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core
  summary: Performs a callback on the scripts on all open scenes.
  example: []
  syntax:
    content: public IEnumerator DoSceneCallback<T>(Func<T, IEnumerator> action)
    parameters:
    - id: action
      type: System.Func{{T},System.Collections.IEnumerator}
    typeParameters:
    - id: T
    return:
      type: System.Collections.IEnumerator
    content.vb: Public Function DoSceneCallback(Of T)(action As Func(Of T, IEnumerator)) As IEnumerator
  overload: AdvancedSceneManager.Core.UtilitySceneManager.DoSceneCallback*
  nameWithType.vb: UtilitySceneManager.DoSceneCallback(Of T)(Func(Of T, IEnumerator))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: AdvancedSceneManager.Core.UtilitySceneManager.DoSceneCallback(Of T)(System.Func(Of T, System.Collections.IEnumerator))
  name.vb: DoSceneCallback(Of T)(Func(Of T, IEnumerator))
- uid: AdvancedSceneManager.Core.UtilitySceneManager.queueEmpty
  commentId: E:AdvancedSceneManager.Core.UtilitySceneManager.queueEmpty
  id: queueEmpty
  parent: AdvancedSceneManager.Core.UtilitySceneManager
  langs:
  - csharp
  - vb
  name: queueEmpty
  nameWithType: UtilitySceneManager.queueEmpty
  fullName: AdvancedSceneManager.Core.UtilitySceneManager.queueEmpty
  type: Event
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Managers/UtilityManager.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: queueEmpty
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Managers/UtilityManager.cs
    startLine: 64
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core
  example: []
  syntax:
    content: public event Action queueEmpty
    return:
      type: System.Action
    content.vb: Public Event queueEmpty As Action
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AdvancedSceneManager.Core.UtilitySceneManager.isBusy
  commentId: P:AdvancedSceneManager.Core.UtilitySceneManager.isBusy
  id: isBusy
  parent: AdvancedSceneManager.Core.UtilitySceneManager
  langs:
  - csharp
  - vb
  name: isBusy
  nameWithType: UtilitySceneManager.isBusy
  fullName: AdvancedSceneManager.Core.UtilitySceneManager.isBusy
  type: Property
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Managers/UtilityManager.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: isBusy
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Managers/UtilityManager.cs
    startLine: 67
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core
  example: []
  syntax:
    content: public bool isBusy { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property isBusy As Boolean
  overload: AdvancedSceneManager.Core.UtilitySceneManager.isBusy*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: AdvancedSceneManager.Core.UtilitySceneManager.runningOperations
  commentId: P:AdvancedSceneManager.Core.UtilitySceneManager.runningOperations
  id: runningOperations
  parent: AdvancedSceneManager.Core.UtilitySceneManager
  langs:
  - csharp
  - vb
  name: runningOperations
  nameWithType: UtilitySceneManager.runningOperations
  fullName: AdvancedSceneManager.Core.UtilitySceneManager.runningOperations
  type: Property
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Managers/UtilityManager.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: runningOperations
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Managers/UtilityManager.cs
    startLine: 70
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core
  summary: The currently running scene operations.
  example: []
  syntax:
    content: public IEnumerable<SceneOperation> runningOperations { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{AdvancedSceneManager.Core.SceneOperation}
    content.vb: Public ReadOnly Property runningOperations As IEnumerable(Of SceneOperation)
  overload: AdvancedSceneManager.Core.UtilitySceneManager.runningOperations*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: AdvancedSceneManager.Core.UtilitySceneManager.queuedOperations
  commentId: P:AdvancedSceneManager.Core.UtilitySceneManager.queuedOperations
  id: queuedOperations
  parent: AdvancedSceneManager.Core.UtilitySceneManager
  langs:
  - csharp
  - vb
  name: queuedOperations
  nameWithType: UtilitySceneManager.queuedOperations
  fullName: AdvancedSceneManager.Core.UtilitySceneManager.queuedOperations
  type: Property
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Managers/UtilityManager.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: queuedOperations
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Managers/UtilityManager.cs
    startLine: 74
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core
  summary: Gets the current scene operation queue.
  example: []
  syntax:
    content: public IEnumerable<SceneOperation> queuedOperations { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{AdvancedSceneManager.Core.SceneOperation}
    content.vb: Public ReadOnly Property queuedOperations As IEnumerable(Of SceneOperation)
  overload: AdvancedSceneManager.Core.UtilitySceneManager.queuedOperations*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: AdvancedSceneManager.Core.UtilitySceneManager.currentOperation
  commentId: P:AdvancedSceneManager.Core.UtilitySceneManager.currentOperation
  id: currentOperation
  parent: AdvancedSceneManager.Core.UtilitySceneManager
  langs:
  - csharp
  - vb
  name: currentOperation
  nameWithType: UtilitySceneManager.currentOperation
  fullName: AdvancedSceneManager.Core.UtilitySceneManager.currentOperation
  type: Property
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Managers/UtilityManager.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: currentOperation
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Managers/UtilityManager.cs
    startLine: 78
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core
  summary: Gets the current active operation in the queue.
  example: []
  syntax:
    content: public SceneOperation currentOperation { get; }
    parameters: []
    return:
      type: AdvancedSceneManager.Core.SceneOperation
    content.vb: Public ReadOnly Property currentOperation As SceneOperation
  overload: AdvancedSceneManager.Core.UtilitySceneManager.currentOperation*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: AdvancedSceneManager.Core.UtilitySceneManager.ActiveSceneChanged
  commentId: E:AdvancedSceneManager.Core.UtilitySceneManager.ActiveSceneChanged
  id: ActiveSceneChanged
  parent: AdvancedSceneManager.Core.UtilitySceneManager
  langs:
  - csharp
  - vb
  name: ActiveSceneChanged
  nameWithType: UtilitySceneManager.ActiveSceneChanged
  fullName: AdvancedSceneManager.Core.UtilitySceneManager.ActiveSceneChanged
  type: Event
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Managers/UtilityManager.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: ActiveSceneChanged
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Managers/UtilityManager.cs
    startLine: 110
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core
  summary: Occurs when the active scene changes.
  example: []
  syntax:
    content: public event UtilitySceneManager.ActiveSceneChangedHandler ActiveSceneChanged
    return:
      type: AdvancedSceneManager.Core.UtilitySceneManager.ActiveSceneChangedHandler
    content.vb: Public Event ActiveSceneChanged As UtilitySceneManager.ActiveSceneChangedHandler
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AdvancedSceneManager.Core.UtilitySceneManager.SceneOpened
  commentId: E:AdvancedSceneManager.Core.UtilitySceneManager.SceneOpened
  id: SceneOpened
  parent: AdvancedSceneManager.Core.UtilitySceneManager
  langs:
  - csharp
  - vb
  name: SceneOpened
  nameWithType: UtilitySceneManager.SceneOpened
  fullName: AdvancedSceneManager.Core.UtilitySceneManager.SceneOpened
  type: Event
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Managers/UtilityManager.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: SceneOpened
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Managers/UtilityManager.cs
    startLine: 113
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core
  summary: Occurs when a scene is opened.
  example: []
  syntax:
    content: public event Action<OpenSceneInfo, SceneManagerBase> SceneOpened
    return:
      type: System.Action{AdvancedSceneManager.Core.OpenSceneInfo,AdvancedSceneManager.Core.SceneManagerBase}
    content.vb: Public Event SceneOpened As Action(Of OpenSceneInfo, SceneManagerBase)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AdvancedSceneManager.Core.UtilitySceneManager.SceneClosed
  commentId: E:AdvancedSceneManager.Core.UtilitySceneManager.SceneClosed
  id: SceneClosed
  parent: AdvancedSceneManager.Core.UtilitySceneManager
  langs:
  - csharp
  - vb
  name: SceneClosed
  nameWithType: UtilitySceneManager.SceneClosed
  fullName: AdvancedSceneManager.Core.UtilitySceneManager.SceneClosed
  type: Event
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Managers/UtilityManager.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: SceneClosed
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Managers/UtilityManager.cs
    startLine: 116
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core
  summary: Occurs when a scene is closed.
  example: []
  syntax:
    content: public event Action<OpenSceneInfo, SceneManagerBase> SceneClosed
    return:
      type: System.Action{AdvancedSceneManager.Core.OpenSceneInfo,AdvancedSceneManager.Core.SceneManagerBase}
    content.vb: Public Event SceneClosed As Action(Of OpenSceneInfo, SceneManagerBase)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AdvancedSceneManager.Core.UtilitySceneManager.LoadingScreenOpening
  commentId: E:AdvancedSceneManager.Core.UtilitySceneManager.LoadingScreenOpening
  id: LoadingScreenOpening
  parent: AdvancedSceneManager.Core.UtilitySceneManager
  langs:
  - csharp
  - vb
  name: LoadingScreenOpening
  nameWithType: UtilitySceneManager.LoadingScreenOpening
  fullName: AdvancedSceneManager.Core.UtilitySceneManager.LoadingScreenOpening
  type: Event
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Managers/UtilityManager.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: LoadingScreenOpening
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Managers/UtilityManager.cs
    startLine: 119
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core
  summary: Occurs when a loading screen is about to be opened.
  example: []
  syntax:
    content: public event Action<LoadingScreen> LoadingScreenOpening
    return:
      type: System.Action{AdvancedSceneManager.Callbacks.LoadingScreen}
    content.vb: Public Event LoadingScreenOpening As Action(Of LoadingScreen)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AdvancedSceneManager.Core.UtilitySceneManager.LoadingScreenOpened
  commentId: E:AdvancedSceneManager.Core.UtilitySceneManager.LoadingScreenOpened
  id: LoadingScreenOpened
  parent: AdvancedSceneManager.Core.UtilitySceneManager
  langs:
  - csharp
  - vb
  name: LoadingScreenOpened
  nameWithType: UtilitySceneManager.LoadingScreenOpened
  fullName: AdvancedSceneManager.Core.UtilitySceneManager.LoadingScreenOpened
  type: Event
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Managers/UtilityManager.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: LoadingScreenOpened
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Managers/UtilityManager.cs
    startLine: 122
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core
  summary: Occurs when a loading screen has opened.
  example: []
  syntax:
    content: public event Action<LoadingScreen> LoadingScreenOpened
    return:
      type: System.Action{AdvancedSceneManager.Callbacks.LoadingScreen}
    content.vb: Public Event LoadingScreenOpened As Action(Of LoadingScreen)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AdvancedSceneManager.Core.UtilitySceneManager.LoadingScreenClosing
  commentId: E:AdvancedSceneManager.Core.UtilitySceneManager.LoadingScreenClosing
  id: LoadingScreenClosing
  parent: AdvancedSceneManager.Core.UtilitySceneManager
  langs:
  - csharp
  - vb
  name: LoadingScreenClosing
  nameWithType: UtilitySceneManager.LoadingScreenClosing
  fullName: AdvancedSceneManager.Core.UtilitySceneManager.LoadingScreenClosing
  type: Event
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Managers/UtilityManager.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: LoadingScreenClosing
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Managers/UtilityManager.cs
    startLine: 125
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core
  summary: Occurs when a loading screen is about to close.
  example: []
  syntax:
    content: public event Action<LoadingScreen> LoadingScreenClosing
    return:
      type: System.Action{AdvancedSceneManager.Callbacks.LoadingScreen}
    content.vb: Public Event LoadingScreenClosing As Action(Of LoadingScreen)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AdvancedSceneManager.Core.UtilitySceneManager.LoadingScreenClosed
  commentId: E:AdvancedSceneManager.Core.UtilitySceneManager.LoadingScreenClosed
  id: LoadingScreenClosed
  parent: AdvancedSceneManager.Core.UtilitySceneManager
  langs:
  - csharp
  - vb
  name: LoadingScreenClosed
  nameWithType: UtilitySceneManager.LoadingScreenClosed
  fullName: AdvancedSceneManager.Core.UtilitySceneManager.LoadingScreenClosed
  type: Event
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Managers/UtilityManager.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: LoadingScreenClosed
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Managers/UtilityManager.cs
    startLine: 128
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core
  summary: Occurs when a loading screen has closed.
  example: []
  syntax:
    content: public event Action<LoadingScreen> LoadingScreenClosed
    return:
      type: System.Action{AdvancedSceneManager.Callbacks.LoadingScreen}
    content.vb: Public Event LoadingScreenClosed As Action(Of LoadingScreen)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AdvancedSceneManager.Core.UtilitySceneManager.RegisterOpenCallback``1(``0,System.Action,System.Action,System.Boolean)
  commentId: M:AdvancedSceneManager.Core.UtilitySceneManager.RegisterOpenCallback``1(``0,System.Action,System.Action,System.Boolean)
  id: RegisterOpenCallback``1(``0,System.Action,System.Action,System.Boolean)
  parent: AdvancedSceneManager.Core.UtilitySceneManager
  langs:
  - csharp
  - vb
  name: RegisterOpenCallback<T>(T, Action, Action, Boolean)
  nameWithType: UtilitySceneManager.RegisterOpenCallback<T>(T, Action, Action, Boolean)
  fullName: AdvancedSceneManager.Core.UtilitySceneManager.RegisterOpenCallback<T>(T, System.Action, System.Action, System.Boolean)
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Managers/UtilityManager.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: RegisterOpenCallback
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Managers/UtilityManager.cs
    startLine: 146
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core
  summary: Registers a callback for when a scene or collection has opened, or closed, the callback is removed once it has been called, unless persistent is true.
  example: []
  syntax:
    content: >-
      public void RegisterOpenCallback<T>(T scene, Action onOpen = null, Action onClose = null, bool persistent = false)
          where T : Object, ISceneObject
    parameters:
    - id: scene
      type: '{T}'
    - id: onOpen
      type: System.Action
    - id: onClose
      type: System.Action
    - id: persistent
      type: System.Boolean
    typeParameters:
    - id: T
    content.vb: Public Sub RegisterOpenCallback(Of T As {Object, ISceneObject})(scene As T, onOpen As Action = Nothing, onClose As Action = Nothing, persistent As Boolean = False)
  overload: AdvancedSceneManager.Core.UtilitySceneManager.RegisterOpenCallback*
  nameWithType.vb: UtilitySceneManager.RegisterOpenCallback(Of T)(T, Action, Action, Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: AdvancedSceneManager.Core.UtilitySceneManager.RegisterOpenCallback(Of T)(T, System.Action, System.Action, System.Boolean)
  name.vb: RegisterOpenCallback(Of T)(T, Action, Action, Boolean)
- uid: AdvancedSceneManager.Core.UtilitySceneManager.UnregisterCallback``1(``0,System.Action,System.Action)
  commentId: M:AdvancedSceneManager.Core.UtilitySceneManager.UnregisterCallback``1(``0,System.Action,System.Action)
  id: UnregisterCallback``1(``0,System.Action,System.Action)
  parent: AdvancedSceneManager.Core.UtilitySceneManager
  langs:
  - csharp
  - vb
  name: UnregisterCallback<T>(T, Action, Action)
  nameWithType: UtilitySceneManager.UnregisterCallback<T>(T, Action, Action)
  fullName: AdvancedSceneManager.Core.UtilitySceneManager.UnregisterCallback<T>(T, System.Action, System.Action)
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Managers/UtilityManager.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: UnregisterCallback
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Managers/UtilityManager.cs
    startLine: 164
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core
  summary: Unregisters a callback.
  example: []
  syntax:
    content: >-
      public void UnregisterCallback<T>(T scene, Action onOpen = null, Action onClose = null)
          where T : Object, ISceneObject
    parameters:
    - id: scene
      type: '{T}'
    - id: onOpen
      type: System.Action
    - id: onClose
      type: System.Action
    typeParameters:
    - id: T
    content.vb: Public Sub UnregisterCallback(Of T As {Object, ISceneObject})(scene As T, onOpen As Action = Nothing, onClose As Action = Nothing)
  overload: AdvancedSceneManager.Core.UtilitySceneManager.UnregisterCallback*
  nameWithType.vb: UtilitySceneManager.UnregisterCallback(Of T)(T, Action, Action)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: AdvancedSceneManager.Core.UtilitySceneManager.UnregisterCallback(Of T)(T, System.Action, System.Action)
  name.vb: UnregisterCallback(Of T)(T, Action, Action)
- uid: AdvancedSceneManager.Core.UtilitySceneManager.Reopen(AdvancedSceneManager.Core.OpenSceneInfo)
  commentId: M:AdvancedSceneManager.Core.UtilitySceneManager.Reopen(AdvancedSceneManager.Core.OpenSceneInfo)
  id: Reopen(AdvancedSceneManager.Core.OpenSceneInfo)
  parent: AdvancedSceneManager.Core.UtilitySceneManager
  langs:
  - csharp
  - vb
  name: Reopen(OpenSceneInfo)
  nameWithType: UtilitySceneManager.Reopen(OpenSceneInfo)
  fullName: AdvancedSceneManager.Core.UtilitySceneManager.Reopen(AdvancedSceneManager.Core.OpenSceneInfo)
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Managers/UtilityManager.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: Reopen
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Managers/UtilityManager.cs
    startLine: 247
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core
  summary: Reopen a scene regardless of whatever it is associated with a collection, or is was opened as stand-alone.
  example: []
  syntax:
    content: public SceneOperation<OpenSceneInfo> Reopen(OpenSceneInfo scene)
    parameters:
    - id: scene
      type: AdvancedSceneManager.Core.OpenSceneInfo
    return:
      type: AdvancedSceneManager.Core.SceneOperation{AdvancedSceneManager.Core.OpenSceneInfo}
    content.vb: Public Function Reopen(scene As OpenSceneInfo) As SceneOperation(Of OpenSceneInfo)
  overload: AdvancedSceneManager.Core.UtilitySceneManager.Reopen*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AdvancedSceneManager.Core.UtilitySceneManager.OpenOrReopen(AdvancedSceneManager.Models.Scene,AdvancedSceneManager.Models.SceneCollection)
  commentId: M:AdvancedSceneManager.Core.UtilitySceneManager.OpenOrReopen(AdvancedSceneManager.Models.Scene,AdvancedSceneManager.Models.SceneCollection)
  id: OpenOrReopen(AdvancedSceneManager.Models.Scene,AdvancedSceneManager.Models.SceneCollection)
  parent: AdvancedSceneManager.Core.UtilitySceneManager
  langs:
  - csharp
  - vb
  name: OpenOrReopen(Scene, SceneCollection)
  nameWithType: UtilitySceneManager.OpenOrReopen(Scene, SceneCollection)
  fullName: AdvancedSceneManager.Core.UtilitySceneManager.OpenOrReopen(AdvancedSceneManager.Models.Scene, AdvancedSceneManager.Models.SceneCollection)
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Managers/UtilityManager.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: OpenOrReopen
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Managers/UtilityManager.cs
    startLine: 259
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core
  summary: Opens the scene if not open, otherwise it will be reopened.
  example: []
  syntax:
    content: public SceneOperation<OpenSceneInfo> OpenOrReopen(Scene scene, SceneCollection collection = null)
    parameters:
    - id: scene
      type: AdvancedSceneManager.Models.Scene
    - id: collection
      type: AdvancedSceneManager.Models.SceneCollection
    return:
      type: AdvancedSceneManager.Core.SceneOperation{AdvancedSceneManager.Core.OpenSceneInfo}
    content.vb: Public Function OpenOrReopen(scene As Scene, collection As SceneCollection = Nothing) As SceneOperation(Of OpenSceneInfo)
  overload: AdvancedSceneManager.Core.UtilitySceneManager.OpenOrReopen*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AdvancedSceneManager.Core.UtilitySceneManager.Close(AdvancedSceneManager.Core.OpenSceneInfo)
  commentId: M:AdvancedSceneManager.Core.UtilitySceneManager.Close(AdvancedSceneManager.Core.OpenSceneInfo)
  id: Close(AdvancedSceneManager.Core.OpenSceneInfo)
  parent: AdvancedSceneManager.Core.UtilitySceneManager
  langs:
  - csharp
  - vb
  name: Close(OpenSceneInfo)
  nameWithType: UtilitySceneManager.Close(OpenSceneInfo)
  fullName: AdvancedSceneManager.Core.UtilitySceneManager.Close(AdvancedSceneManager.Core.OpenSceneInfo)
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Managers/UtilityManager.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: Close
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Managers/UtilityManager.cs
    startLine: 276
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core
  summary: Closes a scene regardless of whatever it is associated with a collection, or is was opened as stand-alone.
  example: []
  syntax:
    content: public SceneOperation Close(OpenSceneInfo scene)
    parameters:
    - id: scene
      type: AdvancedSceneManager.Core.OpenSceneInfo
    return:
      type: AdvancedSceneManager.Core.SceneOperation
    content.vb: Public Function Close(scene As OpenSceneInfo) As SceneOperation
  overload: AdvancedSceneManager.Core.UtilitySceneManager.Close*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AdvancedSceneManager.Core.UtilitySceneManager.CloseAll(System.Boolean)
  commentId: M:AdvancedSceneManager.Core.UtilitySceneManager.CloseAll(System.Boolean)
  id: CloseAll(System.Boolean)
  parent: AdvancedSceneManager.Core.UtilitySceneManager
  langs:
  - csharp
  - vb
  name: CloseAll(Boolean)
  nameWithType: UtilitySceneManager.CloseAll(Boolean)
  fullName: AdvancedSceneManager.Core.UtilitySceneManager.CloseAll(System.Boolean)
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Managers/UtilityManager.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: CloseAll
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Managers/UtilityManager.cs
    startLine: 288
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core
  summary: Closes all scenes.
  example: []
  syntax:
    content: public SceneOperation CloseAll(bool closeLoadingScreens = false)
    parameters:
    - id: closeLoadingScreens
      type: System.Boolean
    return:
      type: AdvancedSceneManager.Core.SceneOperation
    content.vb: Public Function CloseAll(closeLoadingScreens As Boolean = False) As SceneOperation
  overload: AdvancedSceneManager.Core.UtilitySceneManager.CloseAll*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AdvancedSceneManager.Core.UtilitySceneManager.Toggle(AdvancedSceneManager.Models.Scene,System.Nullable{System.Boolean})
  commentId: M:AdvancedSceneManager.Core.UtilitySceneManager.Toggle(AdvancedSceneManager.Models.Scene,System.Nullable{System.Boolean})
  id: Toggle(AdvancedSceneManager.Models.Scene,System.Nullable{System.Boolean})
  parent: AdvancedSceneManager.Core.UtilitySceneManager
  langs:
  - csharp
  - vb
  name: Toggle(Scene, Nullable<Boolean>)
  nameWithType: UtilitySceneManager.Toggle(Scene, Nullable<Boolean>)
  fullName: AdvancedSceneManager.Core.UtilitySceneManager.Toggle(AdvancedSceneManager.Models.Scene, System.Nullable<System.Boolean>)
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Managers/UtilityManager.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: Toggle
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Managers/UtilityManager.cs
    startLine: 303
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core
  summary: Toggles the scene open or closed, if the scene is part of the current collection, then the scene will be toggled within the collection, otherwise, it will be toggled as a stand-alone scene.
  example: []
  syntax:
    content: public SceneOperation Toggle(Scene scene, bool? enabled = null)
    parameters:
    - id: scene
      type: AdvancedSceneManager.Models.Scene
    - id: enabled
      type: System.Nullable{System.Boolean}
      description: If null, the scene will be toggled on or off depending on whatever the scene is open or not. Pass a value to ensure that the scene either open or closed.
    return:
      type: AdvancedSceneManager.Core.SceneOperation
    content.vb: Public Function Toggle(scene As Scene, enabled As Boolean? = Nothing) As SceneOperation
  overload: AdvancedSceneManager.Core.UtilitySceneManager.Toggle*
  nameWithType.vb: UtilitySceneManager.Toggle(Scene, Nullable(Of Boolean))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: AdvancedSceneManager.Core.UtilitySceneManager.Toggle(AdvancedSceneManager.Models.Scene, System.Nullable(Of System.Boolean))
  name.vb: Toggle(Scene, Nullable(Of Boolean))
- uid: AdvancedSceneManager.Core.UtilitySceneManager.Toggle(UnityEngine.SceneManagement.Scene,System.Nullable{System.Boolean})
  commentId: M:AdvancedSceneManager.Core.UtilitySceneManager.Toggle(UnityEngine.SceneManagement.Scene,System.Nullable{System.Boolean})
  id: Toggle(UnityEngine.SceneManagement.Scene,System.Nullable{System.Boolean})
  parent: AdvancedSceneManager.Core.UtilitySceneManager
  langs:
  - csharp
  - vb
  name: Toggle(Scene, Nullable<Boolean>)
  nameWithType: UtilitySceneManager.Toggle(Scene, Nullable<Boolean>)
  fullName: AdvancedSceneManager.Core.UtilitySceneManager.Toggle(UnityEngine.SceneManagement.Scene, System.Nullable<System.Boolean>)
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Managers/UtilityManager.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: Toggle
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Managers/UtilityManager.cs
    startLine: 313
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core
  summary: Toggles the scene open or closed, if the scene is part of the current collection, then the scene will be toggled within the collection, otherwise, it will be toggled as a stand-alone scene.
  example: []
  syntax:
    content: public SceneOperation Toggle(Scene scene, bool? enabled = null)
    parameters:
    - id: scene
      type: UnityEngine.SceneManagement.Scene
    - id: enabled
      type: System.Nullable{System.Boolean}
      description: If null, the scene will be toggled on or off depending on whatever the scene is open or not. Pass a value to ensure that the scene either open or closed.
    return:
      type: AdvancedSceneManager.Core.SceneOperation
    content.vb: Public Function Toggle(scene As Scene, enabled As Boolean? = Nothing) As SceneOperation
  overload: AdvancedSceneManager.Core.UtilitySceneManager.Toggle*
  nameWithType.vb: UtilitySceneManager.Toggle(Scene, Nullable(Of Boolean))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: AdvancedSceneManager.Core.UtilitySceneManager.Toggle(UnityEngine.SceneManagement.Scene, System.Nullable(Of System.Boolean))
  name.vb: Toggle(Scene, Nullable(Of Boolean))
- uid: AdvancedSceneManager.Core.UtilitySceneManager.IsOpen(AdvancedSceneManager.Models.Scene)
  commentId: M:AdvancedSceneManager.Core.UtilitySceneManager.IsOpen(AdvancedSceneManager.Models.Scene)
  id: IsOpen(AdvancedSceneManager.Models.Scene)
  parent: AdvancedSceneManager.Core.UtilitySceneManager
  langs:
  - csharp
  - vb
  name: IsOpen(Scene)
  nameWithType: UtilitySceneManager.IsOpen(Scene)
  fullName: AdvancedSceneManager.Core.UtilitySceneManager.IsOpen(AdvancedSceneManager.Models.Scene)
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Managers/UtilityManager.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: IsOpen
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Managers/UtilityManager.cs
    startLine: 333
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core
  summary: Gets whatever the scene is open, either as part of a collection, or as stand-alone.
  example: []
  syntax:
    content: public IsOpenReturnValue IsOpen(Scene scene)
    parameters:
    - id: scene
      type: AdvancedSceneManager.Models.Scene
    return:
      type: AdvancedSceneManager.Models.IsOpenReturnValue
    content.vb: Public Function IsOpen(scene As Scene) As IsOpenReturnValue
  overload: AdvancedSceneManager.Core.UtilitySceneManager.IsOpen*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AdvancedSceneManager.Core.UtilitySceneManager.IsOpen(UnityEngine.SceneManagement.Scene)
  commentId: M:AdvancedSceneManager.Core.UtilitySceneManager.IsOpen(UnityEngine.SceneManagement.Scene)
  id: IsOpen(UnityEngine.SceneManagement.Scene)
  parent: AdvancedSceneManager.Core.UtilitySceneManager
  langs:
  - csharp
  - vb
  name: IsOpen(Scene)
  nameWithType: UtilitySceneManager.IsOpen(Scene)
  fullName: AdvancedSceneManager.Core.UtilitySceneManager.IsOpen(UnityEngine.SceneManagement.Scene)
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Managers/UtilityManager.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: IsOpen
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Managers/UtilityManager.cs
    startLine: 341
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core
  summary: Gets whatever the scene is open, either as part of a collection, or as stand-alone.
  example: []
  syntax:
    content: public IsOpenReturnValue IsOpen(Scene scene)
    parameters:
    - id: scene
      type: UnityEngine.SceneManagement.Scene
    return:
      type: AdvancedSceneManager.Models.IsOpenReturnValue
    content.vb: Public Function IsOpen(scene As Scene) As IsOpenReturnValue
  overload: AdvancedSceneManager.Core.UtilitySceneManager.IsOpen*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AdvancedSceneManager.Core.UtilitySceneManager.FindOpenScene(UnityEngine.SceneManagement.Scene)
  commentId: M:AdvancedSceneManager.Core.UtilitySceneManager.FindOpenScene(UnityEngine.SceneManagement.Scene)
  id: FindOpenScene(UnityEngine.SceneManagement.Scene)
  parent: AdvancedSceneManager.Core.UtilitySceneManager
  langs:
  - csharp
  - vb
  name: FindOpenScene(Scene)
  nameWithType: UtilitySceneManager.FindOpenScene(Scene)
  fullName: AdvancedSceneManager.Core.UtilitySceneManager.FindOpenScene(UnityEngine.SceneManagement.Scene)
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Managers/UtilityManager.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: FindOpenScene
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Managers/UtilityManager.cs
    startLine: 349
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core
  summary: Finds the <xref href="AdvancedSceneManager.Core.OpenSceneInfo" data-throw-if-not-resolved="false"></xref> of this <xref href="UnityEngine.SceneManagement.Scene" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public OpenSceneInfo FindOpenScene(Scene scene)
    parameters:
    - id: scene
      type: UnityEngine.SceneManagement.Scene
    return:
      type: AdvancedSceneManager.Core.OpenSceneInfo
    content.vb: Public Function FindOpenScene(scene As Scene) As OpenSceneInfo
  overload: AdvancedSceneManager.Core.UtilitySceneManager.FindOpenScene*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AdvancedSceneManager.Core.UtilitySceneManager.FindOpenScene(AdvancedSceneManager.Models.Scene)
  commentId: M:AdvancedSceneManager.Core.UtilitySceneManager.FindOpenScene(AdvancedSceneManager.Models.Scene)
  id: FindOpenScene(AdvancedSceneManager.Models.Scene)
  parent: AdvancedSceneManager.Core.UtilitySceneManager
  langs:
  - csharp
  - vb
  name: FindOpenScene(Scene)
  nameWithType: UtilitySceneManager.FindOpenScene(Scene)
  fullName: AdvancedSceneManager.Core.UtilitySceneManager.FindOpenScene(AdvancedSceneManager.Models.Scene)
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Managers/UtilityManager.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: FindOpenScene
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Managers/UtilityManager.cs
    startLine: 358
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core
  summary: Finds the first open instance of this <xref href="AdvancedSceneManager.Models.Scene" data-throw-if-not-resolved="false"></xref>, if it is open.
  example: []
  syntax:
    content: public OpenSceneInfo FindOpenScene(Scene scene)
    parameters:
    - id: scene
      type: AdvancedSceneManager.Models.Scene
    return:
      type: AdvancedSceneManager.Core.OpenSceneInfo
    content.vb: Public Function FindOpenScene(scene As Scene) As OpenSceneInfo
  overload: AdvancedSceneManager.Core.UtilitySceneManager.FindOpenScene*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AdvancedSceneManager.Core.UtilitySceneManager.FindPreloadedScene(AdvancedSceneManager.Models.Scene)
  commentId: M:AdvancedSceneManager.Core.UtilitySceneManager.FindPreloadedScene(AdvancedSceneManager.Models.Scene)
  id: FindPreloadedScene(AdvancedSceneManager.Models.Scene)
  parent: AdvancedSceneManager.Core.UtilitySceneManager
  langs:
  - csharp
  - vb
  name: FindPreloadedScene(Scene)
  nameWithType: UtilitySceneManager.FindPreloadedScene(Scene)
  fullName: AdvancedSceneManager.Core.UtilitySceneManager.FindPreloadedScene(AdvancedSceneManager.Models.Scene)
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Managers/UtilityManager.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: FindPreloadedScene
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Managers/UtilityManager.cs
    startLine: 367
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core
  summary: Find first preloaded instance this scene.
  example: []
  syntax:
    content: public OpenSceneInfo FindPreloadedScene(Scene scene)
    parameters:
    - id: scene
      type: AdvancedSceneManager.Models.Scene
    return:
      type: AdvancedSceneManager.Core.OpenSceneInfo
    content.vb: Public Function FindPreloadedScene(scene As Scene) As OpenSceneInfo
  overload: AdvancedSceneManager.Core.UtilitySceneManager.FindPreloadedScene*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AdvancedSceneManager.Core.UtilitySceneManager.FindPreloadedScene(UnityEngine.SceneManagement.Scene)
  commentId: M:AdvancedSceneManager.Core.UtilitySceneManager.FindPreloadedScene(UnityEngine.SceneManagement.Scene)
  id: FindPreloadedScene(UnityEngine.SceneManagement.Scene)
  parent: AdvancedSceneManager.Core.UtilitySceneManager
  langs:
  - csharp
  - vb
  name: FindPreloadedScene(Scene)
  nameWithType: UtilitySceneManager.FindPreloadedScene(Scene)
  fullName: AdvancedSceneManager.Core.UtilitySceneManager.FindPreloadedScene(UnityEngine.SceneManagement.Scene)
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Managers/UtilityManager.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: FindPreloadedScene
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Managers/UtilityManager.cs
    startLine: 371
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core
  summary: Find first preloaded instance this scene.
  example: []
  syntax:
    content: public OpenSceneInfo FindPreloadedScene(Scene scene)
    parameters:
    - id: scene
      type: UnityEngine.SceneManagement.Scene
    return:
      type: AdvancedSceneManager.Core.OpenSceneInfo
    content.vb: Public Function FindPreloadedScene(scene As Scene) As OpenSceneInfo
  overload: AdvancedSceneManager.Core.UtilitySceneManager.FindPreloadedScene*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AdvancedSceneManager.Core.UtilitySceneManager.FindPreloadedScenes
  commentId: M:AdvancedSceneManager.Core.UtilitySceneManager.FindPreloadedScenes
  id: FindPreloadedScenes
  parent: AdvancedSceneManager.Core.UtilitySceneManager
  langs:
  - csharp
  - vb
  name: FindPreloadedScenes()
  nameWithType: UtilitySceneManager.FindPreloadedScenes()
  fullName: AdvancedSceneManager.Core.UtilitySceneManager.FindPreloadedScenes()
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Managers/UtilityManager.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: FindPreloadedScenes
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Managers/UtilityManager.cs
    startLine: 375
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core
  summary: Finds all current preloaded scenes.
  example: []
  syntax:
    content: public IEnumerable<(OpenSceneInfo scene, SceneManagerBase sceneManager)> FindPreloadedScenes()
    return:
      type: System.Collections.Generic.IEnumerable{System.ValueTuple{AdvancedSceneManager.Core.OpenSceneInfo,AdvancedSceneManager.Core.SceneManagerBase}}
    content.vb: Public Function FindPreloadedScenes As IEnumerable(Of(scene As OpenSceneInfo, sceneManager As SceneManagerBase)(Of OpenSceneInfo , SceneManagerBase))
  overload: AdvancedSceneManager.Core.UtilitySceneManager.FindPreloadedScenes*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AdvancedSceneManager.Core.UtilitySceneManager.SetActive(UnityEngine.SceneManagement.Scene)
  commentId: M:AdvancedSceneManager.Core.UtilitySceneManager.SetActive(UnityEngine.SceneManagement.Scene)
  id: SetActive(UnityEngine.SceneManagement.Scene)
  parent: AdvancedSceneManager.Core.UtilitySceneManager
  langs:
  - csharp
  - vb
  name: SetActive(Scene)
  nameWithType: UtilitySceneManager.SetActive(Scene)
  fullName: AdvancedSceneManager.Core.UtilitySceneManager.SetActive(UnityEngine.SceneManagement.Scene)
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Managers/UtilityManager.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: SetActive
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Managers/UtilityManager.cs
    startLine: 383
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core
  summary: Sets a scene as the activate scene.
  example: []
  syntax:
    content: public void SetActive(Scene scene)
    parameters:
    - id: scene
      type: UnityEngine.SceneManagement.Scene
    content.vb: Public Sub SetActive(scene As Scene)
  overload: AdvancedSceneManager.Core.UtilitySceneManager.SetActive*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AdvancedSceneManager.Core.UtilitySceneManager.SetActive(AdvancedSceneManager.Models.Scene)
  commentId: M:AdvancedSceneManager.Core.UtilitySceneManager.SetActive(AdvancedSceneManager.Models.Scene)
  id: SetActive(AdvancedSceneManager.Models.Scene)
  parent: AdvancedSceneManager.Core.UtilitySceneManager
  langs:
  - csharp
  - vb
  name: SetActive(Scene)
  nameWithType: UtilitySceneManager.SetActive(Scene)
  fullName: AdvancedSceneManager.Core.UtilitySceneManager.SetActive(AdvancedSceneManager.Models.Scene)
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Managers/UtilityManager.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: SetActive
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Managers/UtilityManager.cs
    startLine: 390
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core
  summary: Sets a scene as the activate scene.
  example: []
  syntax:
    content: public void SetActive(Scene scene)
    parameters:
    - id: scene
      type: AdvancedSceneManager.Models.Scene
    content.vb: Public Sub SetActive(scene As Scene)
  overload: AdvancedSceneManager.Core.UtilitySceneManager.SetActive*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AdvancedSceneManager.Core.UtilitySceneManager.activeScene
  commentId: P:AdvancedSceneManager.Core.UtilitySceneManager.activeScene
  id: activeScene
  parent: AdvancedSceneManager.Core.UtilitySceneManager
  langs:
  - csharp
  - vb
  name: activeScene
  nameWithType: UtilitySceneManager.activeScene
  fullName: AdvancedSceneManager.Core.UtilitySceneManager.activeScene
  type: Property
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Managers/UtilityManager.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: activeScene
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Managers/UtilityManager.cs
    startLine: 394
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core
  summary: Gets the currently open scene.
  example: []
  syntax:
    content: public OpenSceneInfo activeScene { get; }
    parameters: []
    return:
      type: AdvancedSceneManager.Core.OpenSceneInfo
    content.vb: Public ReadOnly Property activeScene As OpenSceneInfo
  overload: AdvancedSceneManager.Core.UtilitySceneManager.activeScene*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: AdvancedSceneManager.Core.UtilitySceneManager.dontDestroyOnLoad
  commentId: P:AdvancedSceneManager.Core.UtilitySceneManager.dontDestroyOnLoad
  id: dontDestroyOnLoad
  parent: AdvancedSceneManager.Core.UtilitySceneManager
  langs:
  - csharp
  - vb
  name: dontDestroyOnLoad
  nameWithType: UtilitySceneManager.dontDestroyOnLoad
  fullName: AdvancedSceneManager.Core.UtilitySceneManager.dontDestroyOnLoad
  type: Property
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Managers/UtilityManager.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: dontDestroyOnLoad
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Managers/UtilityManager.cs
    startLine: 446
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core
  summary: Represents &apos;DontDestroyOnLoad&apos; scene.
  example: []
  syntax:
    content: public OpenSceneInfo dontDestroyOnLoad { get; }
    parameters: []
    return:
      type: AdvancedSceneManager.Core.OpenSceneInfo
    content.vb: Public ReadOnly Property dontDestroyOnLoad As OpenSceneInfo
  overload: AdvancedSceneManager.Core.UtilitySceneManager.dontDestroyOnLoad*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: AdvancedSceneManager.SceneManager.collection
  commentId: P:AdvancedSceneManager.SceneManager.collection
  isExternal: true
- uid: AdvancedSceneManager.SceneManager.standalone
  commentId: P:AdvancedSceneManager.SceneManager.standalone
  isExternal: true
- uid: AdvancedSceneManager.SceneManager.utility
  commentId: P:AdvancedSceneManager.SceneManager.utility
  isExternal: true
- uid: AdvancedSceneManager.Core
  commentId: N:AdvancedSceneManager.Core
  name: AdvancedSceneManager.Core
  nameWithType: AdvancedSceneManager.Core
  fullName: AdvancedSceneManager.Core
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: AdvancedSceneManager.Core.UtilitySceneManager.openScenes*
  commentId: Overload:AdvancedSceneManager.Core.UtilitySceneManager.openScenes
  name: openScenes
  nameWithType: UtilitySceneManager.openScenes
  fullName: AdvancedSceneManager.Core.UtilitySceneManager.openScenes
- uid: System.Collections.Generic.IEnumerable{AdvancedSceneManager.Core.OpenSceneInfo}
  commentId: T:System.Collections.Generic.IEnumerable{AdvancedSceneManager.Core.OpenSceneInfo}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<OpenSceneInfo>
  nameWithType: IEnumerable<OpenSceneInfo>
  fullName: System.Collections.Generic.IEnumerable<AdvancedSceneManager.Core.OpenSceneInfo>
  nameWithType.vb: IEnumerable(Of OpenSceneInfo)
  fullName.vb: System.Collections.Generic.IEnumerable(Of AdvancedSceneManager.Core.OpenSceneInfo)
  name.vb: IEnumerable(Of OpenSceneInfo)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: AdvancedSceneManager.Core.OpenSceneInfo
    name: OpenSceneInfo
    nameWithType: OpenSceneInfo
    fullName: AdvancedSceneManager.Core.OpenSceneInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: AdvancedSceneManager.Core.OpenSceneInfo
    name: OpenSceneInfo
    nameWithType: OpenSceneInfo
    fullName: AdvancedSceneManager.Core.OpenSceneInfo
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: AdvancedSceneManager.Core.UtilitySceneManager.DoSceneCallback*
  commentId: Overload:AdvancedSceneManager.Core.UtilitySceneManager.DoSceneCallback
  name: DoSceneCallback
  nameWithType: UtilitySceneManager.DoSceneCallback
  fullName: AdvancedSceneManager.Core.UtilitySceneManager.DoSceneCallback
- uid: System.Func{{T},System.Collections.IEnumerator}
  commentId: T:System.Func{``0,System.Collections.IEnumerator}
  parent: System
  definition: System.Func`2
  name: Func<T, IEnumerator>
  nameWithType: Func<T, IEnumerator>
  fullName: System.Func<T, System.Collections.IEnumerator>
  nameWithType.vb: Func(Of T, IEnumerator)
  fullName.vb: System.Func(Of T, System.Collections.IEnumerator)
  name.vb: Func(Of T, IEnumerator)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.IEnumerator
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.IEnumerator
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.IEnumerator
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.IEnumerator
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerator
  commentId: T:System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: System.Action
  commentId: T:System.Action
  parent: System
  isExternal: true
  name: Action
  nameWithType: Action
  fullName: System.Action
- uid: AdvancedSceneManager.Core.UtilitySceneManager.isBusy*
  commentId: Overload:AdvancedSceneManager.Core.UtilitySceneManager.isBusy
  name: isBusy
  nameWithType: UtilitySceneManager.isBusy
  fullName: AdvancedSceneManager.Core.UtilitySceneManager.isBusy
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: AdvancedSceneManager.Core.UtilitySceneManager.runningOperations*
  commentId: Overload:AdvancedSceneManager.Core.UtilitySceneManager.runningOperations
  name: runningOperations
  nameWithType: UtilitySceneManager.runningOperations
  fullName: AdvancedSceneManager.Core.UtilitySceneManager.runningOperations
- uid: System.Collections.Generic.IEnumerable{AdvancedSceneManager.Core.SceneOperation}
  commentId: T:System.Collections.Generic.IEnumerable{AdvancedSceneManager.Core.SceneOperation}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<SceneOperation>
  nameWithType: IEnumerable<SceneOperation>
  fullName: System.Collections.Generic.IEnumerable<AdvancedSceneManager.Core.SceneOperation>
  nameWithType.vb: IEnumerable(Of SceneOperation)
  fullName.vb: System.Collections.Generic.IEnumerable(Of AdvancedSceneManager.Core.SceneOperation)
  name.vb: IEnumerable(Of SceneOperation)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: AdvancedSceneManager.Core.SceneOperation
    name: SceneOperation
    nameWithType: SceneOperation
    fullName: AdvancedSceneManager.Core.SceneOperation
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: AdvancedSceneManager.Core.SceneOperation
    name: SceneOperation
    nameWithType: SceneOperation
    fullName: AdvancedSceneManager.Core.SceneOperation
  - name: )
    nameWithType: )
    fullName: )
- uid: AdvancedSceneManager.Core.UtilitySceneManager.queuedOperations*
  commentId: Overload:AdvancedSceneManager.Core.UtilitySceneManager.queuedOperations
  name: queuedOperations
  nameWithType: UtilitySceneManager.queuedOperations
  fullName: AdvancedSceneManager.Core.UtilitySceneManager.queuedOperations
- uid: AdvancedSceneManager.Core.UtilitySceneManager.currentOperation*
  commentId: Overload:AdvancedSceneManager.Core.UtilitySceneManager.currentOperation
  name: currentOperation
  nameWithType: UtilitySceneManager.currentOperation
  fullName: AdvancedSceneManager.Core.UtilitySceneManager.currentOperation
- uid: AdvancedSceneManager.Core.SceneOperation
  commentId: T:AdvancedSceneManager.Core.SceneOperation
  parent: AdvancedSceneManager.Core
  name: SceneOperation
  nameWithType: SceneOperation
  fullName: AdvancedSceneManager.Core.SceneOperation
- uid: AdvancedSceneManager.Core.UtilitySceneManager.ActiveSceneChangedHandler
  commentId: T:AdvancedSceneManager.Core.UtilitySceneManager.ActiveSceneChangedHandler
  parent: AdvancedSceneManager.Core
  name: UtilitySceneManager.ActiveSceneChangedHandler
  nameWithType: UtilitySceneManager.ActiveSceneChangedHandler
  fullName: AdvancedSceneManager.Core.UtilitySceneManager.ActiveSceneChangedHandler
- uid: System.Action{AdvancedSceneManager.Core.OpenSceneInfo,AdvancedSceneManager.Core.SceneManagerBase}
  commentId: T:System.Action{AdvancedSceneManager.Core.OpenSceneInfo,AdvancedSceneManager.Core.SceneManagerBase}
  parent: System
  definition: System.Action`2
  name: Action<OpenSceneInfo, SceneManagerBase>
  nameWithType: Action<OpenSceneInfo, SceneManagerBase>
  fullName: System.Action<AdvancedSceneManager.Core.OpenSceneInfo, AdvancedSceneManager.Core.SceneManagerBase>
  nameWithType.vb: Action(Of OpenSceneInfo, SceneManagerBase)
  fullName.vb: System.Action(Of AdvancedSceneManager.Core.OpenSceneInfo, AdvancedSceneManager.Core.SceneManagerBase)
  name.vb: Action(Of OpenSceneInfo, SceneManagerBase)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: AdvancedSceneManager.Core.OpenSceneInfo
    name: OpenSceneInfo
    nameWithType: OpenSceneInfo
    fullName: AdvancedSceneManager.Core.OpenSceneInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: AdvancedSceneManager.Core.SceneManagerBase
    name: SceneManagerBase
    nameWithType: SceneManagerBase
    fullName: AdvancedSceneManager.Core.SceneManagerBase
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: AdvancedSceneManager.Core.OpenSceneInfo
    name: OpenSceneInfo
    nameWithType: OpenSceneInfo
    fullName: AdvancedSceneManager.Core.OpenSceneInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: AdvancedSceneManager.Core.SceneManagerBase
    name: SceneManagerBase
    nameWithType: SceneManagerBase
    fullName: AdvancedSceneManager.Core.SceneManagerBase
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`2
  commentId: T:System.Action`2
  isExternal: true
  name: Action<T1, T2>
  nameWithType: Action<T1, T2>
  fullName: System.Action<T1, T2>
  nameWithType.vb: Action(Of T1, T2)
  fullName.vb: System.Action(Of T1, T2)
  name.vb: Action(Of T1, T2)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action{AdvancedSceneManager.Callbacks.LoadingScreen}
  commentId: T:System.Action{AdvancedSceneManager.Callbacks.LoadingScreen}
  parent: System
  definition: System.Action`1
  name: Action<LoadingScreen>
  nameWithType: Action<LoadingScreen>
  fullName: System.Action<AdvancedSceneManager.Callbacks.LoadingScreen>
  nameWithType.vb: Action(Of LoadingScreen)
  fullName.vb: System.Action(Of AdvancedSceneManager.Callbacks.LoadingScreen)
  name.vb: Action(Of LoadingScreen)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: AdvancedSceneManager.Callbacks.LoadingScreen
    name: LoadingScreen
    nameWithType: LoadingScreen
    fullName: AdvancedSceneManager.Callbacks.LoadingScreen
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: AdvancedSceneManager.Callbacks.LoadingScreen
    name: LoadingScreen
    nameWithType: LoadingScreen
    fullName: AdvancedSceneManager.Callbacks.LoadingScreen
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: AdvancedSceneManager.Core.UtilitySceneManager.RegisterOpenCallback*
  commentId: Overload:AdvancedSceneManager.Core.UtilitySceneManager.RegisterOpenCallback
  name: RegisterOpenCallback
  nameWithType: UtilitySceneManager.RegisterOpenCallback
  fullName: AdvancedSceneManager.Core.UtilitySceneManager.RegisterOpenCallback
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: AdvancedSceneManager.Core.UtilitySceneManager.UnregisterCallback*
  commentId: Overload:AdvancedSceneManager.Core.UtilitySceneManager.UnregisterCallback
  name: UnregisterCallback
  nameWithType: UtilitySceneManager.UnregisterCallback
  fullName: AdvancedSceneManager.Core.UtilitySceneManager.UnregisterCallback
- uid: AdvancedSceneManager.Core.UtilitySceneManager.Reopen*
  commentId: Overload:AdvancedSceneManager.Core.UtilitySceneManager.Reopen
  name: Reopen
  nameWithType: UtilitySceneManager.Reopen
  fullName: AdvancedSceneManager.Core.UtilitySceneManager.Reopen
- uid: AdvancedSceneManager.Core.OpenSceneInfo
  commentId: T:AdvancedSceneManager.Core.OpenSceneInfo
  parent: AdvancedSceneManager.Core
  name: OpenSceneInfo
  nameWithType: OpenSceneInfo
  fullName: AdvancedSceneManager.Core.OpenSceneInfo
- uid: AdvancedSceneManager.Core.SceneOperation{AdvancedSceneManager.Core.OpenSceneInfo}
  commentId: T:AdvancedSceneManager.Core.SceneOperation{AdvancedSceneManager.Core.OpenSceneInfo}
  parent: AdvancedSceneManager.Core
  definition: AdvancedSceneManager.Core.SceneOperation`1
  name: SceneOperation<OpenSceneInfo>
  nameWithType: SceneOperation<OpenSceneInfo>
  fullName: AdvancedSceneManager.Core.SceneOperation<AdvancedSceneManager.Core.OpenSceneInfo>
  nameWithType.vb: SceneOperation(Of OpenSceneInfo)
  fullName.vb: AdvancedSceneManager.Core.SceneOperation(Of AdvancedSceneManager.Core.OpenSceneInfo)
  name.vb: SceneOperation(Of OpenSceneInfo)
  spec.csharp:
  - uid: AdvancedSceneManager.Core.SceneOperation`1
    name: SceneOperation
    nameWithType: SceneOperation
    fullName: AdvancedSceneManager.Core.SceneOperation
  - name: <
    nameWithType: <
    fullName: <
  - uid: AdvancedSceneManager.Core.OpenSceneInfo
    name: OpenSceneInfo
    nameWithType: OpenSceneInfo
    fullName: AdvancedSceneManager.Core.OpenSceneInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: AdvancedSceneManager.Core.SceneOperation`1
    name: SceneOperation
    nameWithType: SceneOperation
    fullName: AdvancedSceneManager.Core.SceneOperation
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: AdvancedSceneManager.Core.OpenSceneInfo
    name: OpenSceneInfo
    nameWithType: OpenSceneInfo
    fullName: AdvancedSceneManager.Core.OpenSceneInfo
  - name: )
    nameWithType: )
    fullName: )
- uid: AdvancedSceneManager.Core.SceneOperation`1
  commentId: T:AdvancedSceneManager.Core.SceneOperation`1
  parent: AdvancedSceneManager.Core
  name: SceneOperation<ReturnValue>
  nameWithType: SceneOperation<ReturnValue>
  fullName: AdvancedSceneManager.Core.SceneOperation<ReturnValue>
  nameWithType.vb: SceneOperation(Of ReturnValue)
  fullName.vb: AdvancedSceneManager.Core.SceneOperation(Of ReturnValue)
  name.vb: SceneOperation(Of ReturnValue)
  spec.csharp:
  - uid: AdvancedSceneManager.Core.SceneOperation`1
    name: SceneOperation
    nameWithType: SceneOperation
    fullName: AdvancedSceneManager.Core.SceneOperation
  - name: <
    nameWithType: <
    fullName: <
  - name: ReturnValue
    nameWithType: ReturnValue
    fullName: ReturnValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: AdvancedSceneManager.Core.SceneOperation`1
    name: SceneOperation
    nameWithType: SceneOperation
    fullName: AdvancedSceneManager.Core.SceneOperation
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ReturnValue
    nameWithType: ReturnValue
    fullName: ReturnValue
  - name: )
    nameWithType: )
    fullName: )
- uid: AdvancedSceneManager.Core.UtilitySceneManager.OpenOrReopen*
  commentId: Overload:AdvancedSceneManager.Core.UtilitySceneManager.OpenOrReopen
  name: OpenOrReopen
  nameWithType: UtilitySceneManager.OpenOrReopen
  fullName: AdvancedSceneManager.Core.UtilitySceneManager.OpenOrReopen
- uid: AdvancedSceneManager.Models.Scene
  commentId: T:AdvancedSceneManager.Models.Scene
  parent: AdvancedSceneManager.Models
  name: Scene
  nameWithType: Scene
  fullName: AdvancedSceneManager.Models.Scene
- uid: AdvancedSceneManager.Models.SceneCollection
  commentId: T:AdvancedSceneManager.Models.SceneCollection
  parent: AdvancedSceneManager.Models
  name: SceneCollection
  nameWithType: SceneCollection
  fullName: AdvancedSceneManager.Models.SceneCollection
- uid: AdvancedSceneManager.Models
  commentId: N:AdvancedSceneManager.Models
  name: AdvancedSceneManager.Models
  nameWithType: AdvancedSceneManager.Models
  fullName: AdvancedSceneManager.Models
- uid: AdvancedSceneManager.Core.UtilitySceneManager.Close*
  commentId: Overload:AdvancedSceneManager.Core.UtilitySceneManager.Close
  name: Close
  nameWithType: UtilitySceneManager.Close
  fullName: AdvancedSceneManager.Core.UtilitySceneManager.Close
- uid: AdvancedSceneManager.Core.UtilitySceneManager.CloseAll*
  commentId: Overload:AdvancedSceneManager.Core.UtilitySceneManager.CloseAll
  name: CloseAll
  nameWithType: UtilitySceneManager.CloseAll
  fullName: AdvancedSceneManager.Core.UtilitySceneManager.CloseAll
- uid: AdvancedSceneManager.Core.UtilitySceneManager.Toggle*
  commentId: Overload:AdvancedSceneManager.Core.UtilitySceneManager.Toggle
  name: Toggle
  nameWithType: UtilitySceneManager.Toggle
  fullName: AdvancedSceneManager.Core.UtilitySceneManager.Toggle
- uid: System.Nullable{System.Boolean}
  commentId: T:System.Nullable{System.Boolean}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Boolean>
  nameWithType: Nullable<Boolean>
  fullName: System.Nullable<System.Boolean>
  nameWithType.vb: Nullable(Of Boolean)
  fullName.vb: System.Nullable(Of System.Boolean)
  name.vb: Nullable(Of Boolean)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: UnityEngine.SceneManagement.Scene
  commentId: T:UnityEngine.SceneManagement.Scene
  parent: UnityEngine.SceneManagement
  isExternal: true
  name: Scene
  nameWithType: Scene
  fullName: UnityEngine.SceneManagement.Scene
- uid: UnityEngine.SceneManagement
  commentId: N:UnityEngine.SceneManagement
  isExternal: true
  name: UnityEngine.SceneManagement
  nameWithType: UnityEngine.SceneManagement
  fullName: UnityEngine.SceneManagement
- uid: AdvancedSceneManager.Core.UtilitySceneManager.IsOpen*
  commentId: Overload:AdvancedSceneManager.Core.UtilitySceneManager.IsOpen
  name: IsOpen
  nameWithType: UtilitySceneManager.IsOpen
  fullName: AdvancedSceneManager.Core.UtilitySceneManager.IsOpen
- uid: AdvancedSceneManager.Models.IsOpenReturnValue
  commentId: T:AdvancedSceneManager.Models.IsOpenReturnValue
  parent: AdvancedSceneManager.Models
  name: IsOpenReturnValue
  nameWithType: IsOpenReturnValue
  fullName: AdvancedSceneManager.Models.IsOpenReturnValue
- uid: AdvancedSceneManager.Core.UtilitySceneManager.FindOpenScene*
  commentId: Overload:AdvancedSceneManager.Core.UtilitySceneManager.FindOpenScene
  name: FindOpenScene
  nameWithType: UtilitySceneManager.FindOpenScene
  fullName: AdvancedSceneManager.Core.UtilitySceneManager.FindOpenScene
- uid: AdvancedSceneManager.Core.UtilitySceneManager.FindPreloadedScene*
  commentId: Overload:AdvancedSceneManager.Core.UtilitySceneManager.FindPreloadedScene
  name: FindPreloadedScene
  nameWithType: UtilitySceneManager.FindPreloadedScene
  fullName: AdvancedSceneManager.Core.UtilitySceneManager.FindPreloadedScene
- uid: AdvancedSceneManager.Core.UtilitySceneManager.FindPreloadedScenes*
  commentId: Overload:AdvancedSceneManager.Core.UtilitySceneManager.FindPreloadedScenes
  name: FindPreloadedScenes
  nameWithType: UtilitySceneManager.FindPreloadedScenes
  fullName: AdvancedSceneManager.Core.UtilitySceneManager.FindPreloadedScenes
- uid: System.Collections.Generic.IEnumerable{System.ValueTuple{AdvancedSceneManager.Core.OpenSceneInfo,AdvancedSceneManager.Core.SceneManagerBase}}
  commentId: T:System.Collections.Generic.IEnumerable{System.ValueTuple{AdvancedSceneManager.Core.OpenSceneInfo,AdvancedSceneManager.Core.SceneManagerBase}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<(T1, T2)<OpenSceneInfo, SceneManagerBase>>
  nameWithType: IEnumerable<(T1, T2)<OpenSceneInfo, SceneManagerBase>>
  fullName: System.Collections.Generic.IEnumerable<System.ValueTuple<AdvancedSceneManager.Core.OpenSceneInfo, AdvancedSceneManager.Core.SceneManagerBase>>
  nameWithType.vb: IEnumerable(Of (T1, T2)(Of OpenSceneInfo, SceneManagerBase))
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.ValueTuple(Of AdvancedSceneManager.Core.OpenSceneInfo, AdvancedSceneManager.Core.SceneManagerBase))
  name.vb: IEnumerable(Of (T1, T2)(Of OpenSceneInfo, SceneManagerBase))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: AdvancedSceneManager.Core.OpenSceneInfo
    name: OpenSceneInfo
    nameWithType: OpenSceneInfo
    fullName: AdvancedSceneManager.Core.OpenSceneInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: AdvancedSceneManager.Core.SceneManagerBase
    name: SceneManagerBase
    nameWithType: SceneManagerBase
    fullName: AdvancedSceneManager.Core.SceneManagerBase
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: AdvancedSceneManager.Core.OpenSceneInfo
    name: OpenSceneInfo
    nameWithType: OpenSceneInfo
    fullName: AdvancedSceneManager.Core.OpenSceneInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: AdvancedSceneManager.Core.SceneManagerBase
    name: SceneManagerBase
    nameWithType: SceneManagerBase
    fullName: AdvancedSceneManager.Core.SceneManagerBase
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: AdvancedSceneManager.Core.UtilitySceneManager.SetActive*
  commentId: Overload:AdvancedSceneManager.Core.UtilitySceneManager.SetActive
  name: SetActive
  nameWithType: UtilitySceneManager.SetActive
  fullName: AdvancedSceneManager.Core.UtilitySceneManager.SetActive
- uid: AdvancedSceneManager.Core.UtilitySceneManager.SetActive(UnityEngine.SceneManagement.Scene)
  commentId: M:AdvancedSceneManager.Core.UtilitySceneManager.SetActive(UnityEngine.SceneManagement.Scene)
  isExternal: true
- uid: AdvancedSceneManager.Core.UtilitySceneManager.activeScene*
  commentId: Overload:AdvancedSceneManager.Core.UtilitySceneManager.activeScene
  name: activeScene
  nameWithType: UtilitySceneManager.activeScene
  fullName: AdvancedSceneManager.Core.UtilitySceneManager.activeScene
- uid: AdvancedSceneManager.Core.UtilitySceneManager.dontDestroyOnLoad*
  commentId: Overload:AdvancedSceneManager.Core.UtilitySceneManager.dontDestroyOnLoad
  name: dontDestroyOnLoad
  nameWithType: UtilitySceneManager.dontDestroyOnLoad
  fullName: AdvancedSceneManager.Core.UtilitySceneManager.dontDestroyOnLoad
