### YamlMime:ManagedReference
items:
- uid: AdvancedSceneManager.Core.Actions.OpenStartupCollections
  commentId: T:AdvancedSceneManager.Core.Actions.OpenStartupCollections
  id: OpenStartupCollections
  parent: AdvancedSceneManager.Core.Actions
  children:
  - AdvancedSceneManager.Core.Actions.OpenStartupCollections.#ctor(AdvancedSceneManager.Models.SceneCollection,System.Boolean)
  - AdvancedSceneManager.Core.Actions.OpenStartupCollections.DoAction(AdvancedSceneManager.Core.SceneManagerBase)
  - AdvancedSceneManager.Core.Actions.OpenStartupCollections.pointlessCollectionWarning
  - AdvancedSceneManager.Core.Actions.OpenStartupCollections.reportsProgress
  langs:
  - csharp
  - vb
  name: OpenStartupCollections
  nameWithType: OpenStartupCollections
  fullName: AdvancedSceneManager.Core.Actions.OpenStartupCollections
  type: Class
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Actions/Runtime/OpenStartupCollections.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: OpenStartupCollections
    path: ../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Actions/Runtime/OpenStartupCollections.cs
    startLine: 11
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core.Actions
  summary: Opens all collections and scenes that are set to open at startup.
  example: []
  syntax:
    content: 'public class OpenStartupCollections : SceneAction'
    content.vb: >-
      Public Class OpenStartupCollections
          Inherits SceneAction
  inheritance:
  - System.Object
  - AdvancedSceneManager.Core.Actions.SceneAction
  inheritedMembers:
  - AdvancedSceneManager.Core.Actions.SceneAction.openScene
  - AdvancedSceneManager.Core.Actions.SceneAction.scene
  - AdvancedSceneManager.Core.Actions.SceneAction.collection
  - AdvancedSceneManager.Core.Actions.SceneAction.progress
  - AdvancedSceneManager.Core.Actions.SceneAction.isDone
  - AdvancedSceneManager.Core.Actions.SceneAction.RegisterCallback(System.Action)
  - AdvancedSceneManager.Core.Actions.SceneAction.UnregisterCallback(System.Action)
  - AdvancedSceneManager.Core.Actions.SceneAction.OnProgressCallback(System.Action{System.Single})
  - AdvancedSceneManager.Core.Actions.SceneAction.OnProgress(System.Single)
  - AdvancedSceneManager.Core.Actions.SceneAction.Done
  - AdvancedSceneManager.Core.Actions.SceneAction.Done(AdvancedSceneManager.Core.OpenSceneInfo)
  - AdvancedSceneManager.Core.Actions.SceneAction.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: AdvancedSceneManager.Core.Actions.OpenStartupCollections.reportsProgress
  commentId: P:AdvancedSceneManager.Core.Actions.OpenStartupCollections.reportsProgress
  id: reportsProgress
  parent: AdvancedSceneManager.Core.Actions.OpenStartupCollections
  langs:
  - csharp
  - vb
  name: reportsProgress
  nameWithType: OpenStartupCollections.reportsProgress
  fullName: AdvancedSceneManager.Core.Actions.OpenStartupCollections.reportsProgress
  type: Property
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Actions/Runtime/OpenStartupCollections.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: reportsProgress
    path: ../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Actions/Runtime/OpenStartupCollections.cs
    startLine: 14
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core.Actions
  syntax:
    content: public override bool reportsProgress { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Overrides ReadOnly Property reportsProgress As Boolean
  overridden: AdvancedSceneManager.Core.Actions.SceneAction.reportsProgress
  overload: AdvancedSceneManager.Core.Actions.OpenStartupCollections.reportsProgress*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: AdvancedSceneManager.Core.Actions.OpenStartupCollections.#ctor(AdvancedSceneManager.Models.SceneCollection,System.Boolean)
  commentId: M:AdvancedSceneManager.Core.Actions.OpenStartupCollections.#ctor(AdvancedSceneManager.Models.SceneCollection,System.Boolean)
  id: '#ctor(AdvancedSceneManager.Models.SceneCollection,System.Boolean)'
  parent: AdvancedSceneManager.Core.Actions.OpenStartupCollections
  langs:
  - csharp
  - vb
  name: OpenStartupCollections(SceneCollection, Boolean)
  nameWithType: OpenStartupCollections.OpenStartupCollections(SceneCollection, Boolean)
  fullName: AdvancedSceneManager.Core.Actions.OpenStartupCollections.OpenStartupCollections(AdvancedSceneManager.Models.SceneCollection, System.Boolean)
  type: Constructor
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Actions/Runtime/OpenStartupCollections.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: .ctor
    path: ../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Actions/Runtime/OpenStartupCollections.cs
    startLine: 19
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core.Actions
  example: []
  syntax:
    content: public OpenStartupCollections(SceneCollection collection = null, bool forceOpenAllScenes = false)
    parameters:
    - id: collection
      type: AdvancedSceneManager.Models.SceneCollection
      description: Opens the specified collection after all other collections and scenes has been opened.
    - id: forceOpenAllScenes
      type: System.Boolean
    content.vb: Public Sub New(collection As SceneCollection = Nothing, forceOpenAllScenes As Boolean = False)
  overload: AdvancedSceneManager.Core.Actions.OpenStartupCollections.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AdvancedSceneManager.Core.Actions.OpenStartupCollections.pointlessCollectionWarning
  commentId: P:AdvancedSceneManager.Core.Actions.OpenStartupCollections.pointlessCollectionWarning
  id: pointlessCollectionWarning
  parent: AdvancedSceneManager.Core.Actions.OpenStartupCollections
  langs:
  - csharp
  - vb
  name: pointlessCollectionWarning
  nameWithType: OpenStartupCollections.pointlessCollectionWarning
  fullName: AdvancedSceneManager.Core.Actions.OpenStartupCollections.pointlessCollectionWarning
  type: Property
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Actions/Runtime/OpenStartupCollections.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: pointlessCollectionWarning
    path: ../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Actions/Runtime/OpenStartupCollections.cs
    startLine: 29
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core.Actions
  summary: Enables warnings during startup when a collection is opened, then immedietly closed, because another collection was opened, and did not contain any persistent scenes.
  remarks: Only available in editor.
  example: []
  syntax:
    content: public static bool pointlessCollectionWarning { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Shared Property pointlessCollectionWarning As Boolean
  overload: AdvancedSceneManager.Core.Actions.OpenStartupCollections.pointlessCollectionWarning*
  modifiers.csharp:
  - public
  - static
  - get
  - set
  modifiers.vb:
  - Public
  - Shared
- uid: AdvancedSceneManager.Core.Actions.OpenStartupCollections.DoAction(AdvancedSceneManager.Core.SceneManagerBase)
  commentId: M:AdvancedSceneManager.Core.Actions.OpenStartupCollections.DoAction(AdvancedSceneManager.Core.SceneManagerBase)
  id: DoAction(AdvancedSceneManager.Core.SceneManagerBase)
  parent: AdvancedSceneManager.Core.Actions.OpenStartupCollections
  langs:
  - csharp
  - vb
  name: DoAction(SceneManagerBase)
  nameWithType: OpenStartupCollections.DoAction(SceneManagerBase)
  fullName: AdvancedSceneManager.Core.Actions.OpenStartupCollections.DoAction(AdvancedSceneManager.Core.SceneManagerBase)
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Actions/Runtime/OpenStartupCollections.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: DoAction
    path: ../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Actions/Runtime/OpenStartupCollections.cs
    startLine: 37
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core.Actions
  syntax:
    content: public override IEnumerator DoAction(SceneManagerBase _sceneManager)
    parameters:
    - id: _sceneManager
      type: AdvancedSceneManager.Core.SceneManagerBase
    return:
      type: System.Collections.IEnumerator
    content.vb: Public Overrides Function DoAction(_sceneManager As SceneManagerBase) As IEnumerator
  overridden: AdvancedSceneManager.Core.Actions.SceneAction.DoAction(AdvancedSceneManager.Core.SceneManagerBase)
  overload: AdvancedSceneManager.Core.Actions.OpenStartupCollections.DoAction*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: AdvancedSceneManager.Core.Actions
  commentId: N:AdvancedSceneManager.Core.Actions
  name: AdvancedSceneManager.Core.Actions
  nameWithType: AdvancedSceneManager.Core.Actions
  fullName: AdvancedSceneManager.Core.Actions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: AdvancedSceneManager.Core.Actions.SceneAction
  commentId: T:AdvancedSceneManager.Core.Actions.SceneAction
  parent: AdvancedSceneManager.Core.Actions
  name: SceneAction
  nameWithType: SceneAction
  fullName: AdvancedSceneManager.Core.Actions.SceneAction
- uid: AdvancedSceneManager.Core.Actions.SceneAction.openScene
  commentId: P:AdvancedSceneManager.Core.Actions.SceneAction.openScene
  parent: AdvancedSceneManager.Core.Actions.SceneAction
  name: openScene
  nameWithType: SceneAction.openScene
  fullName: AdvancedSceneManager.Core.Actions.SceneAction.openScene
- uid: AdvancedSceneManager.Core.Actions.SceneAction.scene
  commentId: P:AdvancedSceneManager.Core.Actions.SceneAction.scene
  parent: AdvancedSceneManager.Core.Actions.SceneAction
  name: scene
  nameWithType: SceneAction.scene
  fullName: AdvancedSceneManager.Core.Actions.SceneAction.scene
- uid: AdvancedSceneManager.Core.Actions.SceneAction.collection
  commentId: P:AdvancedSceneManager.Core.Actions.SceneAction.collection
  parent: AdvancedSceneManager.Core.Actions.SceneAction
  name: collection
  nameWithType: SceneAction.collection
  fullName: AdvancedSceneManager.Core.Actions.SceneAction.collection
- uid: AdvancedSceneManager.Core.Actions.SceneAction.progress
  commentId: P:AdvancedSceneManager.Core.Actions.SceneAction.progress
  parent: AdvancedSceneManager.Core.Actions.SceneAction
  name: progress
  nameWithType: SceneAction.progress
  fullName: AdvancedSceneManager.Core.Actions.SceneAction.progress
- uid: AdvancedSceneManager.Core.Actions.SceneAction.isDone
  commentId: P:AdvancedSceneManager.Core.Actions.SceneAction.isDone
  parent: AdvancedSceneManager.Core.Actions.SceneAction
  name: isDone
  nameWithType: SceneAction.isDone
  fullName: AdvancedSceneManager.Core.Actions.SceneAction.isDone
- uid: AdvancedSceneManager.Core.Actions.SceneAction.RegisterCallback(System.Action)
  commentId: M:AdvancedSceneManager.Core.Actions.SceneAction.RegisterCallback(System.Action)
  parent: AdvancedSceneManager.Core.Actions.SceneAction
  isExternal: true
  name: RegisterCallback(Action)
  nameWithType: SceneAction.RegisterCallback(Action)
  fullName: AdvancedSceneManager.Core.Actions.SceneAction.RegisterCallback(System.Action)
  spec.csharp:
  - uid: AdvancedSceneManager.Core.Actions.SceneAction.RegisterCallback(System.Action)
    name: RegisterCallback
    nameWithType: SceneAction.RegisterCallback
    fullName: AdvancedSceneManager.Core.Actions.SceneAction.RegisterCallback
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AdvancedSceneManager.Core.Actions.SceneAction.RegisterCallback(System.Action)
    name: RegisterCallback
    nameWithType: SceneAction.RegisterCallback
    fullName: AdvancedSceneManager.Core.Actions.SceneAction.RegisterCallback
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: AdvancedSceneManager.Core.Actions.SceneAction.UnregisterCallback(System.Action)
  commentId: M:AdvancedSceneManager.Core.Actions.SceneAction.UnregisterCallback(System.Action)
  parent: AdvancedSceneManager.Core.Actions.SceneAction
  isExternal: true
  name: UnregisterCallback(Action)
  nameWithType: SceneAction.UnregisterCallback(Action)
  fullName: AdvancedSceneManager.Core.Actions.SceneAction.UnregisterCallback(System.Action)
  spec.csharp:
  - uid: AdvancedSceneManager.Core.Actions.SceneAction.UnregisterCallback(System.Action)
    name: UnregisterCallback
    nameWithType: SceneAction.UnregisterCallback
    fullName: AdvancedSceneManager.Core.Actions.SceneAction.UnregisterCallback
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AdvancedSceneManager.Core.Actions.SceneAction.UnregisterCallback(System.Action)
    name: UnregisterCallback
    nameWithType: SceneAction.UnregisterCallback
    fullName: AdvancedSceneManager.Core.Actions.SceneAction.UnregisterCallback
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: AdvancedSceneManager.Core.Actions.SceneAction.OnProgressCallback(System.Action{System.Single})
  commentId: M:AdvancedSceneManager.Core.Actions.SceneAction.OnProgressCallback(System.Action{System.Single})
  parent: AdvancedSceneManager.Core.Actions.SceneAction
  isExternal: true
  name: OnProgressCallback(Action<Single>)
  nameWithType: SceneAction.OnProgressCallback(Action<Single>)
  fullName: AdvancedSceneManager.Core.Actions.SceneAction.OnProgressCallback(System.Action<System.Single>)
  nameWithType.vb: SceneAction.OnProgressCallback(Action(Of Single))
  fullName.vb: AdvancedSceneManager.Core.Actions.SceneAction.OnProgressCallback(System.Action(Of System.Single))
  name.vb: OnProgressCallback(Action(Of Single))
  spec.csharp:
  - uid: AdvancedSceneManager.Core.Actions.SceneAction.OnProgressCallback(System.Action{System.Single})
    name: OnProgressCallback
    nameWithType: SceneAction.OnProgressCallback
    fullName: AdvancedSceneManager.Core.Actions.SceneAction.OnProgressCallback
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AdvancedSceneManager.Core.Actions.SceneAction.OnProgressCallback(System.Action{System.Single})
    name: OnProgressCallback
    nameWithType: SceneAction.OnProgressCallback
    fullName: AdvancedSceneManager.Core.Actions.SceneAction.OnProgressCallback
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: AdvancedSceneManager.Core.Actions.SceneAction.OnProgress(System.Single)
  commentId: M:AdvancedSceneManager.Core.Actions.SceneAction.OnProgress(System.Single)
  parent: AdvancedSceneManager.Core.Actions.SceneAction
  isExternal: true
  name: OnProgress(Single)
  nameWithType: SceneAction.OnProgress(Single)
  fullName: AdvancedSceneManager.Core.Actions.SceneAction.OnProgress(System.Single)
  spec.csharp:
  - uid: AdvancedSceneManager.Core.Actions.SceneAction.OnProgress(System.Single)
    name: OnProgress
    nameWithType: SceneAction.OnProgress
    fullName: AdvancedSceneManager.Core.Actions.SceneAction.OnProgress
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AdvancedSceneManager.Core.Actions.SceneAction.OnProgress(System.Single)
    name: OnProgress
    nameWithType: SceneAction.OnProgress
    fullName: AdvancedSceneManager.Core.Actions.SceneAction.OnProgress
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: AdvancedSceneManager.Core.Actions.SceneAction.Done
  commentId: M:AdvancedSceneManager.Core.Actions.SceneAction.Done
  parent: AdvancedSceneManager.Core.Actions.SceneAction
  name: Done()
  nameWithType: SceneAction.Done()
  fullName: AdvancedSceneManager.Core.Actions.SceneAction.Done()
  spec.csharp:
  - uid: AdvancedSceneManager.Core.Actions.SceneAction.Done
    name: Done
    nameWithType: SceneAction.Done
    fullName: AdvancedSceneManager.Core.Actions.SceneAction.Done
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AdvancedSceneManager.Core.Actions.SceneAction.Done
    name: Done
    nameWithType: SceneAction.Done
    fullName: AdvancedSceneManager.Core.Actions.SceneAction.Done
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: AdvancedSceneManager.Core.Actions.SceneAction.Done(AdvancedSceneManager.Core.OpenSceneInfo)
  commentId: M:AdvancedSceneManager.Core.Actions.SceneAction.Done(AdvancedSceneManager.Core.OpenSceneInfo)
  parent: AdvancedSceneManager.Core.Actions.SceneAction
  name: Done(OpenSceneInfo)
  nameWithType: SceneAction.Done(OpenSceneInfo)
  fullName: AdvancedSceneManager.Core.Actions.SceneAction.Done(AdvancedSceneManager.Core.OpenSceneInfo)
  spec.csharp:
  - uid: AdvancedSceneManager.Core.Actions.SceneAction.Done(AdvancedSceneManager.Core.OpenSceneInfo)
    name: Done
    nameWithType: SceneAction.Done
    fullName: AdvancedSceneManager.Core.Actions.SceneAction.Done
  - name: (
    nameWithType: (
    fullName: (
  - uid: AdvancedSceneManager.Core.OpenSceneInfo
    name: OpenSceneInfo
    nameWithType: OpenSceneInfo
    fullName: AdvancedSceneManager.Core.OpenSceneInfo
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AdvancedSceneManager.Core.Actions.SceneAction.Done(AdvancedSceneManager.Core.OpenSceneInfo)
    name: Done
    nameWithType: SceneAction.Done
    fullName: AdvancedSceneManager.Core.Actions.SceneAction.Done
  - name: (
    nameWithType: (
    fullName: (
  - uid: AdvancedSceneManager.Core.OpenSceneInfo
    name: OpenSceneInfo
    nameWithType: OpenSceneInfo
    fullName: AdvancedSceneManager.Core.OpenSceneInfo
  - name: )
    nameWithType: )
    fullName: )
- uid: AdvancedSceneManager.Core.Actions.SceneAction.ToString
  commentId: M:AdvancedSceneManager.Core.Actions.SceneAction.ToString
  parent: AdvancedSceneManager.Core.Actions.SceneAction
  name: ToString()
  nameWithType: SceneAction.ToString()
  fullName: AdvancedSceneManager.Core.Actions.SceneAction.ToString()
  spec.csharp:
  - uid: AdvancedSceneManager.Core.Actions.SceneAction.ToString
    name: ToString
    nameWithType: SceneAction.ToString
    fullName: AdvancedSceneManager.Core.Actions.SceneAction.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AdvancedSceneManager.Core.Actions.SceneAction.ToString
    name: ToString
    nameWithType: SceneAction.ToString
    fullName: AdvancedSceneManager.Core.Actions.SceneAction.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: AdvancedSceneManager.Core.Actions.SceneAction.reportsProgress
  commentId: P:AdvancedSceneManager.Core.Actions.SceneAction.reportsProgress
  parent: AdvancedSceneManager.Core.Actions.SceneAction
  name: reportsProgress
  nameWithType: SceneAction.reportsProgress
  fullName: AdvancedSceneManager.Core.Actions.SceneAction.reportsProgress
- uid: AdvancedSceneManager.Core.Actions.OpenStartupCollections.reportsProgress*
  commentId: Overload:AdvancedSceneManager.Core.Actions.OpenStartupCollections.reportsProgress
  name: reportsProgress
  nameWithType: OpenStartupCollections.reportsProgress
  fullName: AdvancedSceneManager.Core.Actions.OpenStartupCollections.reportsProgress
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: AdvancedSceneManager.Core.Actions.OpenStartupCollections.#ctor*
  commentId: Overload:AdvancedSceneManager.Core.Actions.OpenStartupCollections.#ctor
  name: OpenStartupCollections
  nameWithType: OpenStartupCollections.OpenStartupCollections
  fullName: AdvancedSceneManager.Core.Actions.OpenStartupCollections.OpenStartupCollections
- uid: AdvancedSceneManager.Models.SceneCollection
  commentId: T:AdvancedSceneManager.Models.SceneCollection
  parent: AdvancedSceneManager.Models
  name: SceneCollection
  nameWithType: SceneCollection
  fullName: AdvancedSceneManager.Models.SceneCollection
- uid: AdvancedSceneManager.Models
  commentId: N:AdvancedSceneManager.Models
  name: AdvancedSceneManager.Models
  nameWithType: AdvancedSceneManager.Models
  fullName: AdvancedSceneManager.Models
- uid: AdvancedSceneManager.Core.Actions.OpenStartupCollections.pointlessCollectionWarning*
  commentId: Overload:AdvancedSceneManager.Core.Actions.OpenStartupCollections.pointlessCollectionWarning
  name: pointlessCollectionWarning
  nameWithType: OpenStartupCollections.pointlessCollectionWarning
  fullName: AdvancedSceneManager.Core.Actions.OpenStartupCollections.pointlessCollectionWarning
- uid: AdvancedSceneManager.Core.Actions.SceneAction.DoAction(AdvancedSceneManager.Core.SceneManagerBase)
  commentId: M:AdvancedSceneManager.Core.Actions.SceneAction.DoAction(AdvancedSceneManager.Core.SceneManagerBase)
  parent: AdvancedSceneManager.Core.Actions.SceneAction
  name: DoAction(SceneManagerBase)
  nameWithType: SceneAction.DoAction(SceneManagerBase)
  fullName: AdvancedSceneManager.Core.Actions.SceneAction.DoAction(AdvancedSceneManager.Core.SceneManagerBase)
  spec.csharp:
  - uid: AdvancedSceneManager.Core.Actions.SceneAction.DoAction(AdvancedSceneManager.Core.SceneManagerBase)
    name: DoAction
    nameWithType: SceneAction.DoAction
    fullName: AdvancedSceneManager.Core.Actions.SceneAction.DoAction
  - name: (
    nameWithType: (
    fullName: (
  - uid: AdvancedSceneManager.Core.SceneManagerBase
    name: SceneManagerBase
    nameWithType: SceneManagerBase
    fullName: AdvancedSceneManager.Core.SceneManagerBase
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AdvancedSceneManager.Core.Actions.SceneAction.DoAction(AdvancedSceneManager.Core.SceneManagerBase)
    name: DoAction
    nameWithType: SceneAction.DoAction
    fullName: AdvancedSceneManager.Core.Actions.SceneAction.DoAction
  - name: (
    nameWithType: (
    fullName: (
  - uid: AdvancedSceneManager.Core.SceneManagerBase
    name: SceneManagerBase
    nameWithType: SceneManagerBase
    fullName: AdvancedSceneManager.Core.SceneManagerBase
  - name: )
    nameWithType: )
    fullName: )
- uid: AdvancedSceneManager.Core.Actions.OpenStartupCollections.DoAction*
  commentId: Overload:AdvancedSceneManager.Core.Actions.OpenStartupCollections.DoAction
  name: DoAction
  nameWithType: OpenStartupCollections.DoAction
  fullName: AdvancedSceneManager.Core.Actions.OpenStartupCollections.DoAction
- uid: AdvancedSceneManager.Core.SceneManagerBase
  commentId: T:AdvancedSceneManager.Core.SceneManagerBase
  parent: AdvancedSceneManager.Core
  name: SceneManagerBase
  nameWithType: SceneManagerBase
  fullName: AdvancedSceneManager.Core.SceneManagerBase
- uid: System.Collections.IEnumerator
  commentId: T:System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: AdvancedSceneManager.Core
  commentId: N:AdvancedSceneManager.Core
  name: AdvancedSceneManager.Core
  nameWithType: AdvancedSceneManager.Core
  fullName: AdvancedSceneManager.Core
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
