### YamlMime:ManagedReference
items:
- uid: AdvancedSceneManager.Models.SceneCollection
  commentId: T:AdvancedSceneManager.Models.SceneCollection
  id: SceneCollection
  parent: AdvancedSceneManager.Models
  children:
  - AdvancedSceneManager.Models.SceneCollection.activeScene
  - AdvancedSceneManager.Models.SceneCollection.AllScenePaths
  - AdvancedSceneManager.Models.SceneCollection.AllScenes
  - AdvancedSceneManager.Models.SceneCollection.Close
  - AdvancedSceneManager.Models.SceneCollection.CloseEvent
  - AdvancedSceneManager.Models.SceneCollection.Contains(AdvancedSceneManager.Models.Scene)
  - AdvancedSceneManager.Models.SceneCollection.Count
  - AdvancedSceneManager.Models.SceneCollection.extraData
  - AdvancedSceneManager.Models.SceneCollection.ExtraData``1
  - AdvancedSceneManager.Models.SceneCollection.Find(System.String,System.Boolean)
  - AdvancedSceneManager.Models.SceneCollection.FindProfile
  - AdvancedSceneManager.Models.SceneCollection.GetEnumerator
  - AdvancedSceneManager.Models.SceneCollection.hasScenes
  - AdvancedSceneManager.Models.SceneCollection.isIncluded
  - AdvancedSceneManager.Models.SceneCollection.IsOpen
  - AdvancedSceneManager.Models.SceneCollection.IsReadOnly
  - AdvancedSceneManager.Models.SceneCollection.Item(System.Int32)
  - AdvancedSceneManager.Models.SceneCollection.loadingPriority
  - AdvancedSceneManager.Models.SceneCollection.loadingScreen
  - AdvancedSceneManager.Models.SceneCollection.loadingScreenUsage
  - AdvancedSceneManager.Models.SceneCollection.name
  - AdvancedSceneManager.Models.SceneCollection.OnPropertyChanged
  - AdvancedSceneManager.Models.SceneCollection.Open
  - AdvancedSceneManager.Models.SceneCollection.OpenEvent
  - AdvancedSceneManager.Models.SceneCollection.OpenOrReopen
  - AdvancedSceneManager.Models.SceneCollection.PropertyChanged
  - AdvancedSceneManager.Models.SceneCollection.Reopen
  - AdvancedSceneManager.Models.SceneCollection.ReopenEvent
  - AdvancedSceneManager.Models.SceneCollection.scenes
  - AdvancedSceneManager.Models.SceneCollection.startupOption
  - AdvancedSceneManager.Models.SceneCollection.Tag(AdvancedSceneManager.Models.Scene,AdvancedSceneManager.Models.SceneTag)
  - AdvancedSceneManager.Models.SceneCollection.title
  - AdvancedSceneManager.Models.SceneCollection.Toggle
  - AdvancedSceneManager.Models.SceneCollection.Toggle(System.Boolean)
  - AdvancedSceneManager.Models.SceneCollection.ToggleEvent
  - AdvancedSceneManager.Models.SceneCollection.ToggleEvent(System.Boolean)
  langs:
  - csharp
  - vb
  name: SceneCollection
  nameWithType: SceneCollection
  fullName: AdvancedSceneManager.Models.SceneCollection
  type: Class
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/SceneCollection.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: SceneCollection
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/SceneCollection.cs
    startLine: 57
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Models
  summary: A <xref href="AdvancedSceneManager.Models.SceneCollection" data-throw-if-not-resolved="false"></xref> contains a list of <xref href="AdvancedSceneManager.Models.Scene" data-throw-if-not-resolved="false"></xref>, all of which are opened when the <xref href="AdvancedSceneManager.Models.SceneCollection" data-throw-if-not-resolved="false"></xref> is opened (except for scenes tagged DoNotOpen).
  remarks: Only one <xref href="AdvancedSceneManager.Models.SceneCollection" data-throw-if-not-resolved="false"></xref> can be open at a time.
  example: []
  syntax:
    content: 'public class SceneCollection : ScriptableObject, IReadOnlyList<Scene>, IReadOnlyCollection<Scene>, IEnumerable<Scene>, IEnumerable, ISceneObject, INotifyPropertyChanged'
    content.vb: >-
      Public Class SceneCollection
          Inherits ScriptableObject
          Implements IReadOnlyList(Of Scene), IReadOnlyCollection(Of Scene), IEnumerable(Of Scene), IEnumerable, ISceneObject, INotifyPropertyChanged
  inheritance:
  - System.Object
  - UnityEngine.Object
  - UnityEngine.ScriptableObject
  derivedClasses:
  - AdvancedSceneManager.Models.SceneCollectionTemplate
  implements:
  - AdvancedSceneManager.Models.ISceneObject
  extensionMethods:
  - System.Collections.Generic.IEnumerable{AdvancedSceneManager.Models.Scene}.AdvancedSceneManager.Utility.SceneCollectionUtility.Find(System.String)
  - UnityEngine.ScriptableObject.AdvancedSceneManager.Utility.ScriptableObjectUtility.Save
  - System.Collections.Generic.IEnumerable{AdvancedSceneManager.Models.Scene}.AdvancedSceneManager.Editor.Utility.ListUtility.ForEach``1(System.Action{AdvancedSceneManager.Models.Scene,System.Int32})
  - System.Collections.Generic.IEnumerable{AdvancedSceneManager.Models.Scene}.AdvancedSceneManager.Editor.Utility.ListUtility.Flatten``1(System.Func{AdvancedSceneManager.Models.Scene,System.Collections.Generic.IEnumerable{AdvancedSceneManager.Models.Scene}})
  - System.Collections.Generic.IEnumerable{AdvancedSceneManager.Models.Scene}.AdvancedSceneManager.Editor.Utility.ListUtility.Except``1(AdvancedSceneManager.Models.Scene)
  - System.Collections.Generic.IEnumerable{AdvancedSceneManager.Models.Scene}.AdvancedSceneManager.Editor.Utility.ListUtility.GroupConsecutive``1(System.Func{AdvancedSceneManager.Models.Scene,AdvancedSceneManager.Models.Scene,System.Boolean})
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: AdvancedSceneManager.Models.SceneCollection.PropertyChanged
  commentId: E:AdvancedSceneManager.Models.SceneCollection.PropertyChanged
  id: PropertyChanged
  parent: AdvancedSceneManager.Models.SceneCollection
  langs:
  - csharp
  - vb
  name: PropertyChanged
  nameWithType: SceneCollection.PropertyChanged
  fullName: AdvancedSceneManager.Models.SceneCollection.PropertyChanged
  type: Event
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/SceneCollection.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: PropertyChanged
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/SceneCollection.cs
    startLine: 84
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Models
  summary: Occurs when a property changes on this collection.
  remarks: Only available in editor.
  example: []
  syntax:
    content: public event PropertyChangedEventHandler PropertyChanged
    return:
      type: System.ComponentModel.PropertyChangedEventHandler
    content.vb: Public Event PropertyChanged As PropertyChangedEventHandler
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AdvancedSceneManager.Models.SceneCollection.OnPropertyChanged
  commentId: M:AdvancedSceneManager.Models.SceneCollection.OnPropertyChanged
  id: OnPropertyChanged
  parent: AdvancedSceneManager.Models.SceneCollection
  langs:
  - csharp
  - vb
  name: OnPropertyChanged()
  nameWithType: SceneCollection.OnPropertyChanged()
  fullName: AdvancedSceneManager.Models.SceneCollection.OnPropertyChanged()
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/SceneCollection.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: OnPropertyChanged
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/SceneCollection.cs
    startLine: 93
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Models
  summary: Raises <xref href="AdvancedSceneManager.Models.SceneCollection.PropertyChanged" data-throw-if-not-resolved="false"></xref>.
  remarks: Only available in editor.
  example: []
  syntax:
    content: public void OnPropertyChanged()
    content.vb: Public Sub OnPropertyChanged
  overload: AdvancedSceneManager.Models.SceneCollection.OnPropertyChanged*
  implements:
  - AdvancedSceneManager.Models.ISceneObject.OnPropertyChanged
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AdvancedSceneManager.Models.SceneCollection.Count
  commentId: P:AdvancedSceneManager.Models.SceneCollection.Count
  id: Count
  parent: AdvancedSceneManager.Models.SceneCollection
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: SceneCollection.Count
  fullName: AdvancedSceneManager.Models.SceneCollection.Count
  type: Property
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/SceneCollection.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: Count
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/SceneCollection.cs
    startLine: 108
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Models
  syntax:
    content: public int Count { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Count As Integer
  overload: AdvancedSceneManager.Models.SceneCollection.Count*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: AdvancedSceneManager.Models.SceneCollection.IsReadOnly
  commentId: P:AdvancedSceneManager.Models.SceneCollection.IsReadOnly
  id: IsReadOnly
  parent: AdvancedSceneManager.Models.SceneCollection
  langs:
  - csharp
  - vb
  name: IsReadOnly
  nameWithType: SceneCollection.IsReadOnly
  fullName: AdvancedSceneManager.Models.SceneCollection.IsReadOnly
  type: Property
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/SceneCollection.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: IsReadOnly
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/SceneCollection.cs
    startLine: 110
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Models
  summary: Inherited from <xref href="System.Collections.Generic.IReadOnlyList%601" data-throw-if-not-resolved="false"></xref>, not to be confused with read-only functionality for collections (which does not currently exist, beyond locking plugin), this is just for enumeration.
  example: []
  syntax:
    content: public bool IsReadOnly { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsReadOnly As Boolean
  overload: AdvancedSceneManager.Models.SceneCollection.IsReadOnly*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: AdvancedSceneManager.Models.SceneCollection.Item(System.Int32)
  commentId: P:AdvancedSceneManager.Models.SceneCollection.Item(System.Int32)
  id: Item(System.Int32)
  parent: AdvancedSceneManager.Models.SceneCollection
  langs:
  - csharp
  - vb
  name: Item[Int32]
  nameWithType: SceneCollection.Item[Int32]
  fullName: AdvancedSceneManager.Models.SceneCollection.Item[System.Int32]
  type: Property
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/SceneCollection.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: this[]
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/SceneCollection.cs
    startLine: 111
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Models
  syntax:
    content: public Scene this[int index] { get; }
    parameters:
    - id: index
      type: System.Int32
    return:
      type: AdvancedSceneManager.Models.Scene
    content.vb: Public ReadOnly Property Item(index As Integer) As Scene
  overload: AdvancedSceneManager.Models.SceneCollection.Item*
  nameWithType.vb: SceneCollection.Item(Int32)
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: AdvancedSceneManager.Models.SceneCollection.Item(System.Int32)
  name.vb: Item(Int32)
- uid: AdvancedSceneManager.Models.SceneCollection.Contains(AdvancedSceneManager.Models.Scene)
  commentId: M:AdvancedSceneManager.Models.SceneCollection.Contains(AdvancedSceneManager.Models.Scene)
  id: Contains(AdvancedSceneManager.Models.Scene)
  parent: AdvancedSceneManager.Models.SceneCollection
  langs:
  - csharp
  - vb
  name: Contains(Scene)
  nameWithType: SceneCollection.Contains(Scene)
  fullName: AdvancedSceneManager.Models.SceneCollection.Contains(AdvancedSceneManager.Models.Scene)
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/SceneCollection.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: Contains
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/SceneCollection.cs
    startLine: 113
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Models
  syntax:
    content: public bool Contains(Scene item)
    parameters:
    - id: item
      type: AdvancedSceneManager.Models.Scene
    return:
      type: System.Boolean
    content.vb: Public Function Contains(item As Scene) As Boolean
  overload: AdvancedSceneManager.Models.SceneCollection.Contains*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AdvancedSceneManager.Models.SceneCollection.GetEnumerator
  commentId: M:AdvancedSceneManager.Models.SceneCollection.GetEnumerator
  id: GetEnumerator
  parent: AdvancedSceneManager.Models.SceneCollection
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: SceneCollection.GetEnumerator()
  fullName: AdvancedSceneManager.Models.SceneCollection.GetEnumerator()
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/SceneCollection.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: GetEnumerator
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/SceneCollection.cs
    startLine: 114
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Models
  syntax:
    content: public IEnumerator<Scene> GetEnumerator()
    return:
      type: System.Collections.Generic.IEnumerator{AdvancedSceneManager.Models.Scene}
    content.vb: Public Function GetEnumerator As IEnumerator(Of Scene)
  overload: AdvancedSceneManager.Models.SceneCollection.GetEnumerator*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AdvancedSceneManager.Models.SceneCollection.name
  commentId: P:AdvancedSceneManager.Models.SceneCollection.name
  id: name
  parent: AdvancedSceneManager.Models.SceneCollection
  langs:
  - csharp
  - vb
  name: name
  nameWithType: SceneCollection.name
  fullName: AdvancedSceneManager.Models.SceneCollection.name
  type: Property
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/SceneCollection.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: name
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/SceneCollection.cs
    startLine: 135
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Models
  remarks: 'See also: <xref href="AdvancedSceneManager.SceneManager.assetManagement" data-throw-if-not-resolved="false"></xref>.Rename().'
  example: []
  syntax:
    content: public string name { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property name As String
  overload: AdvancedSceneManager.Models.SceneCollection.name*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: AdvancedSceneManager.Models.SceneCollection.title
  commentId: P:AdvancedSceneManager.Models.SceneCollection.title
  id: title
  parent: AdvancedSceneManager.Models.SceneCollection
  langs:
  - csharp
  - vb
  name: title
  nameWithType: SceneCollection.title
  fullName: AdvancedSceneManager.Models.SceneCollection.title
  type: Property
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/SceneCollection.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: title
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/SceneCollection.cs
    startLine: 142
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Models
  summary: The title of this collection.
  remarks: 'See also: <xref href="AdvancedSceneManager.SceneManager.assetManagement" data-throw-if-not-resolved="false"></xref>.Rename().'
  example: []
  syntax:
    content: public string title { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property title As String
  overload: AdvancedSceneManager.Models.SceneCollection.title*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: AdvancedSceneManager.Models.SceneCollection.extraData
  commentId: P:AdvancedSceneManager.Models.SceneCollection.extraData
  id: extraData
  parent: AdvancedSceneManager.Models.SceneCollection
  langs:
  - csharp
  - vb
  name: extraData
  nameWithType: SceneCollection.extraData
  fullName: AdvancedSceneManager.Models.SceneCollection.extraData
  type: Property
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/SceneCollection.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: extraData
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/SceneCollection.cs
    startLine: 146
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Models
  summary: The extra data that is associated with this collection.
  remarks: Use <xref href="AdvancedSceneManager.Models.SceneCollection.ExtraData%60%601" data-throw-if-not-resolved="false"></xref> to cast it to the desired type.
  example: []
  syntax:
    content: public ScriptableObject extraData { get; set; }
    parameters: []
    return:
      type: UnityEngine.ScriptableObject
    content.vb: Public Property extraData As ScriptableObject
  overload: AdvancedSceneManager.Models.SceneCollection.extraData*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: AdvancedSceneManager.Models.SceneCollection.isIncluded
  commentId: P:AdvancedSceneManager.Models.SceneCollection.isIncluded
  id: isIncluded
  parent: AdvancedSceneManager.Models.SceneCollection
  langs:
  - csharp
  - vb
  name: isIncluded
  nameWithType: SceneCollection.isIncluded
  fullName: AdvancedSceneManager.Models.SceneCollection.isIncluded
  type: Property
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/SceneCollection.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: isIncluded
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/SceneCollection.cs
    startLine: 153
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Models
  summary: Gets whatever this collection should be included in build.
  example: []
  syntax:
    content: public bool isIncluded { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property isIncluded As Boolean
  overload: AdvancedSceneManager.Models.SceneCollection.isIncluded*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: AdvancedSceneManager.Models.SceneCollection.scenes
  commentId: P:AdvancedSceneManager.Models.SceneCollection.scenes
  id: scenes
  parent: AdvancedSceneManager.Models.SceneCollection
  langs:
  - csharp
  - vb
  name: scenes
  nameWithType: SceneCollection.scenes
  fullName: AdvancedSceneManager.Models.SceneCollection.scenes
  type: Property
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/SceneCollection.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: scenes
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/SceneCollection.cs
    startLine: 160
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Models
  summary: Gets the scenes in this collection, note that some might be null if no reference is added in scene manager window.
  example: []
  syntax:
    content: public Scene[] scenes { get; set; }
    parameters: []
    return:
      type: AdvancedSceneManager.Models.Scene[]
    content.vb: Public Property scenes As Scene()
  overload: AdvancedSceneManager.Models.SceneCollection.scenes*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: AdvancedSceneManager.Models.SceneCollection.loadingScreen
  commentId: P:AdvancedSceneManager.Models.SceneCollection.loadingScreen
  id: loadingScreen
  parent: AdvancedSceneManager.Models.SceneCollection
  langs:
  - csharp
  - vb
  name: loadingScreen
  nameWithType: SceneCollection.loadingScreen
  fullName: AdvancedSceneManager.Models.SceneCollection.loadingScreen
  type: Property
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/SceneCollection.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: loadingScreen
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/SceneCollection.cs
    startLine: 171
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Models
  summary: The loading screen that is associated with this collection.
  example: []
  syntax:
    content: public Scene loadingScreen { get; set; }
    parameters: []
    return:
      type: AdvancedSceneManager.Models.Scene
    content.vb: Public Property loadingScreen As Scene
  overload: AdvancedSceneManager.Models.SceneCollection.loadingScreen*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: AdvancedSceneManager.Models.SceneCollection.loadingScreenUsage
  commentId: P:AdvancedSceneManager.Models.SceneCollection.loadingScreenUsage
  id: loadingScreenUsage
  parent: AdvancedSceneManager.Models.SceneCollection
  langs:
  - csharp
  - vb
  name: loadingScreenUsage
  nameWithType: SceneCollection.loadingScreenUsage
  fullName: AdvancedSceneManager.Models.SceneCollection.loadingScreenUsage
  type: Property
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/SceneCollection.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: loadingScreenUsage
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/SceneCollection.cs
    startLine: 178
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Models
  summary: Specifies what loading screen to use.
  example: []
  syntax:
    content: public LoadingScreenUsage loadingScreenUsage { get; set; }
    parameters: []
    return:
      type: AdvancedSceneManager.Models.LoadingScreenUsage
    content.vb: Public Property loadingScreenUsage As LoadingScreenUsage
  overload: AdvancedSceneManager.Models.SceneCollection.loadingScreenUsage*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: AdvancedSceneManager.Models.SceneCollection.activeScene
  commentId: P:AdvancedSceneManager.Models.SceneCollection.activeScene
  id: activeScene
  parent: AdvancedSceneManager.Models.SceneCollection
  langs:
  - csharp
  - vb
  name: activeScene
  nameWithType: SceneCollection.activeScene
  fullName: AdvancedSceneManager.Models.SceneCollection.activeScene
  type: Property
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/SceneCollection.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: activeScene
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/SceneCollection.cs
    startLine: 185
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Models
  summary: Specifies the scene that should be activated after collection is opened.
  example: []
  syntax:
    content: public Scene activeScene { get; set; }
    parameters: []
    return:
      type: AdvancedSceneManager.Models.Scene
    content.vb: Public Property activeScene As Scene
  overload: AdvancedSceneManager.Models.SceneCollection.activeScene*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: AdvancedSceneManager.Models.SceneCollection.startupOption
  commentId: P:AdvancedSceneManager.Models.SceneCollection.startupOption
  id: startupOption
  parent: AdvancedSceneManager.Models.SceneCollection
  langs:
  - csharp
  - vb
  name: startupOption
  nameWithType: SceneCollection.startupOption
  fullName: AdvancedSceneManager.Models.SceneCollection.startupOption
  type: Property
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/SceneCollection.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: startupOption
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/SceneCollection.cs
    startLine: 192
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Models
  summary: Specifies startup option.
  example: []
  syntax:
    content: public CollectionStartupOption startupOption { get; set; }
    parameters: []
    return:
      type: AdvancedSceneManager.Models.CollectionStartupOption
    content.vb: Public Property startupOption As CollectionStartupOption
  overload: AdvancedSceneManager.Models.SceneCollection.startupOption*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: AdvancedSceneManager.Models.SceneCollection.loadingPriority
  commentId: P:AdvancedSceneManager.Models.SceneCollection.loadingPriority
  id: loadingPriority
  parent: AdvancedSceneManager.Models.SceneCollection
  langs:
  - csharp
  - vb
  name: loadingPriority
  nameWithType: SceneCollection.loadingPriority
  fullName: AdvancedSceneManager.Models.SceneCollection.loadingPriority
  type: Property
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/SceneCollection.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: loadingPriority
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/SceneCollection.cs
    startLine: 199
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Models
  summary: The thread priority to use when opening this collection.
  example: []
  syntax:
    content: public CollectionThreadPriority loadingPriority { get; set; }
    parameters: []
    return:
      type: AdvancedSceneManager.Models.CollectionThreadPriority
    content.vb: Public Property loadingPriority As CollectionThreadPriority
  overload: AdvancedSceneManager.Models.SceneCollection.loadingPriority*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: AdvancedSceneManager.Models.SceneCollection.hasScenes
  commentId: P:AdvancedSceneManager.Models.SceneCollection.hasScenes
  id: hasScenes
  parent: AdvancedSceneManager.Models.SceneCollection
  langs:
  - csharp
  - vb
  name: hasScenes
  nameWithType: SceneCollection.hasScenes
  fullName: AdvancedSceneManager.Models.SceneCollection.hasScenes
  type: Property
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/SceneCollection.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: hasScenes
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/SceneCollection.cs
    startLine: 209
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Models
  summary: Gets if this collection has any scenes.
  example: []
  syntax:
    content: public bool hasScenes { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property hasScenes As Boolean
  overload: AdvancedSceneManager.Models.SceneCollection.hasScenes*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: AdvancedSceneManager.Models.SceneCollection.Tag(AdvancedSceneManager.Models.Scene,AdvancedSceneManager.Models.SceneTag)
  commentId: M:AdvancedSceneManager.Models.SceneCollection.Tag(AdvancedSceneManager.Models.Scene,AdvancedSceneManager.Models.SceneTag)
  id: Tag(AdvancedSceneManager.Models.Scene,AdvancedSceneManager.Models.SceneTag)
  parent: AdvancedSceneManager.Models.SceneCollection
  langs:
  - csharp
  - vb
  name: Tag(Scene, SceneTag)
  nameWithType: SceneCollection.Tag(Scene, SceneTag)
  fullName: AdvancedSceneManager.Models.SceneCollection.Tag(AdvancedSceneManager.Models.Scene, AdvancedSceneManager.Models.SceneTag)
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/SceneCollection.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: Tag
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/SceneCollection.cs
    startLine: 211
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Models
  syntax:
    content: public SceneTag Tag(Scene scene, SceneTag setTo = null)
    parameters:
    - id: scene
      type: AdvancedSceneManager.Models.Scene
    - id: setTo
      type: AdvancedSceneManager.Models.SceneTag
    return:
      type: AdvancedSceneManager.Models.SceneTag
    content.vb: Public Function Tag(scene As Scene, setTo As SceneTag = Nothing) As SceneTag
  overload: AdvancedSceneManager.Models.SceneCollection.Tag*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AdvancedSceneManager.Models.SceneCollection.Open
  commentId: M:AdvancedSceneManager.Models.SceneCollection.Open
  id: Open
  parent: AdvancedSceneManager.Models.SceneCollection
  langs:
  - csharp
  - vb
  name: Open()
  nameWithType: SceneCollection.Open()
  fullName: AdvancedSceneManager.Models.SceneCollection.Open()
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/SceneCollection.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: Open
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/SceneCollection.cs
    startLine: 266
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Models
  summary: Opens the collection.
  example: []
  syntax:
    content: public SceneOperation Open()
    return:
      type: AdvancedSceneManager.Core.SceneOperation
    content.vb: Public Function Open As SceneOperation
  overload: AdvancedSceneManager.Models.SceneCollection.Open*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AdvancedSceneManager.Models.SceneCollection.OpenOrReopen
  commentId: M:AdvancedSceneManager.Models.SceneCollection.OpenOrReopen
  id: OpenOrReopen
  parent: AdvancedSceneManager.Models.SceneCollection
  langs:
  - csharp
  - vb
  name: OpenOrReopen()
  nameWithType: SceneCollection.OpenOrReopen()
  fullName: AdvancedSceneManager.Models.SceneCollection.OpenOrReopen()
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/SceneCollection.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: OpenOrReopen
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/SceneCollection.cs
    startLine: 269
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Models
  summary: Opens or reopens the collection, depending on whatever it is open or not.
  example: []
  syntax:
    content: public SceneOperation OpenOrReopen()
    return:
      type: AdvancedSceneManager.Core.SceneOperation
    content.vb: Public Function OpenOrReopen As SceneOperation
  overload: AdvancedSceneManager.Models.SceneCollection.OpenOrReopen*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AdvancedSceneManager.Models.SceneCollection.Toggle
  commentId: M:AdvancedSceneManager.Models.SceneCollection.Toggle
  id: Toggle
  parent: AdvancedSceneManager.Models.SceneCollection
  langs:
  - csharp
  - vb
  name: Toggle()
  nameWithType: SceneCollection.Toggle()
  fullName: AdvancedSceneManager.Models.SceneCollection.Toggle()
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/SceneCollection.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: Toggle
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/SceneCollection.cs
    startLine: 275
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Models
  summary: Toggles the collection.
  example: []
  syntax:
    content: public SceneOperation Toggle()
    return:
      type: AdvancedSceneManager.Core.SceneOperation
    content.vb: Public Function Toggle As SceneOperation
  overload: AdvancedSceneManager.Models.SceneCollection.Toggle*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AdvancedSceneManager.Models.SceneCollection.Toggle(System.Boolean)
  commentId: M:AdvancedSceneManager.Models.SceneCollection.Toggle(System.Boolean)
  id: Toggle(System.Boolean)
  parent: AdvancedSceneManager.Models.SceneCollection
  langs:
  - csharp
  - vb
  name: Toggle(Boolean)
  nameWithType: SceneCollection.Toggle(Boolean)
  fullName: AdvancedSceneManager.Models.SceneCollection.Toggle(System.Boolean)
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/SceneCollection.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: Toggle
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/SceneCollection.cs
    startLine: 278
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Models
  summary: Toggles the collection.
  example: []
  syntax:
    content: public SceneOperation Toggle(bool enabled)
    parameters:
    - id: enabled
      type: System.Boolean
    return:
      type: AdvancedSceneManager.Core.SceneOperation
    content.vb: Public Function Toggle(enabled As Boolean) As SceneOperation
  overload: AdvancedSceneManager.Models.SceneCollection.Toggle*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AdvancedSceneManager.Models.SceneCollection.Reopen
  commentId: M:AdvancedSceneManager.Models.SceneCollection.Reopen
  id: Reopen
  parent: AdvancedSceneManager.Models.SceneCollection
  langs:
  - csharp
  - vb
  name: Reopen()
  nameWithType: SceneCollection.Reopen()
  fullName: AdvancedSceneManager.Models.SceneCollection.Reopen()
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/SceneCollection.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: Reopen
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/SceneCollection.cs
    startLine: 281
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Models
  summary: Reopens the current collection.
  example: []
  syntax:
    content: public SceneOperation Reopen()
    return:
      type: AdvancedSceneManager.Core.SceneOperation
    content.vb: Public Function Reopen As SceneOperation
  overload: AdvancedSceneManager.Models.SceneCollection.Reopen*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AdvancedSceneManager.Models.SceneCollection.Close
  commentId: M:AdvancedSceneManager.Models.SceneCollection.Close
  id: Close
  parent: AdvancedSceneManager.Models.SceneCollection
  langs:
  - csharp
  - vb
  name: Close()
  nameWithType: SceneCollection.Close()
  fullName: AdvancedSceneManager.Models.SceneCollection.Close()
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/SceneCollection.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: Close
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/SceneCollection.cs
    startLine: 284
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Models
  summary: Closes the current collection.
  example: []
  syntax:
    content: public SceneOperation Close()
    return:
      type: AdvancedSceneManager.Core.SceneOperation
    content.vb: Public Function Close As SceneOperation
  overload: AdvancedSceneManager.Models.SceneCollection.Close*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AdvancedSceneManager.Models.SceneCollection.IsOpen
  commentId: M:AdvancedSceneManager.Models.SceneCollection.IsOpen
  id: IsOpen
  parent: AdvancedSceneManager.Models.SceneCollection
  langs:
  - csharp
  - vb
  name: IsOpen()
  nameWithType: SceneCollection.IsOpen()
  fullName: AdvancedSceneManager.Models.SceneCollection.IsOpen()
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/SceneCollection.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: IsOpen
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/SceneCollection.cs
    startLine: 287
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Models
  summary: Gets whatever the collection is currently open.
  example: []
  syntax:
    content: public bool IsOpen()
    return:
      type: System.Boolean
    content.vb: Public Function IsOpen As Boolean
  overload: AdvancedSceneManager.Models.SceneCollection.IsOpen*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AdvancedSceneManager.Models.SceneCollection.OpenEvent
  commentId: M:AdvancedSceneManager.Models.SceneCollection.OpenEvent
  id: OpenEvent
  parent: AdvancedSceneManager.Models.SceneCollection
  langs:
  - csharp
  - vb
  name: OpenEvent()
  nameWithType: SceneCollection.OpenEvent()
  fullName: AdvancedSceneManager.Models.SceneCollection.OpenEvent()
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/SceneCollection.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: OpenEvent
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/SceneCollection.cs
    startLine: 292
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Models
  summary: Opens the collection.
  example: []
  syntax:
    content: public void OpenEvent()
    content.vb: Public Sub OpenEvent
  overload: AdvancedSceneManager.Models.SceneCollection.OpenEvent*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AdvancedSceneManager.Models.SceneCollection.ToggleEvent
  commentId: M:AdvancedSceneManager.Models.SceneCollection.ToggleEvent
  id: ToggleEvent
  parent: AdvancedSceneManager.Models.SceneCollection
  langs:
  - csharp
  - vb
  name: ToggleEvent()
  nameWithType: SceneCollection.ToggleEvent()
  fullName: AdvancedSceneManager.Models.SceneCollection.ToggleEvent()
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/SceneCollection.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: ToggleEvent
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/SceneCollection.cs
    startLine: 295
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Models
  summary: Toggles the collection.
  example: []
  syntax:
    content: public void ToggleEvent()
    content.vb: Public Sub ToggleEvent
  overload: AdvancedSceneManager.Models.SceneCollection.ToggleEvent*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AdvancedSceneManager.Models.SceneCollection.ToggleEvent(System.Boolean)
  commentId: M:AdvancedSceneManager.Models.SceneCollection.ToggleEvent(System.Boolean)
  id: ToggleEvent(System.Boolean)
  parent: AdvancedSceneManager.Models.SceneCollection
  langs:
  - csharp
  - vb
  name: ToggleEvent(Boolean)
  nameWithType: SceneCollection.ToggleEvent(Boolean)
  fullName: AdvancedSceneManager.Models.SceneCollection.ToggleEvent(System.Boolean)
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/SceneCollection.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: ToggleEvent
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/SceneCollection.cs
    startLine: 298
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Models
  summary: Toggles the collection.
  example: []
  syntax:
    content: public void ToggleEvent(bool enabled)
    parameters:
    - id: enabled
      type: System.Boolean
    content.vb: Public Sub ToggleEvent(enabled As Boolean)
  overload: AdvancedSceneManager.Models.SceneCollection.ToggleEvent*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AdvancedSceneManager.Models.SceneCollection.ReopenEvent
  commentId: M:AdvancedSceneManager.Models.SceneCollection.ReopenEvent
  id: ReopenEvent
  parent: AdvancedSceneManager.Models.SceneCollection
  langs:
  - csharp
  - vb
  name: ReopenEvent()
  nameWithType: SceneCollection.ReopenEvent()
  fullName: AdvancedSceneManager.Models.SceneCollection.ReopenEvent()
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/SceneCollection.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: ReopenEvent
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/SceneCollection.cs
    startLine: 301
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Models
  summary: Reopens the current collection.
  example: []
  syntax:
    content: public void ReopenEvent()
    content.vb: Public Sub ReopenEvent
  overload: AdvancedSceneManager.Models.SceneCollection.ReopenEvent*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AdvancedSceneManager.Models.SceneCollection.CloseEvent
  commentId: M:AdvancedSceneManager.Models.SceneCollection.CloseEvent
  id: CloseEvent
  parent: AdvancedSceneManager.Models.SceneCollection
  langs:
  - csharp
  - vb
  name: CloseEvent()
  nameWithType: SceneCollection.CloseEvent()
  fullName: AdvancedSceneManager.Models.SceneCollection.CloseEvent()
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/SceneCollection.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: CloseEvent
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/SceneCollection.cs
    startLine: 304
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Models
  summary: Closes the current collection.
  example: []
  syntax:
    content: public void CloseEvent()
    content.vb: Public Sub CloseEvent
  overload: AdvancedSceneManager.Models.SceneCollection.CloseEvent*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AdvancedSceneManager.Models.SceneCollection.AllScenes
  commentId: M:AdvancedSceneManager.Models.SceneCollection.AllScenes
  id: AllScenes
  parent: AdvancedSceneManager.Models.SceneCollection
  langs:
  - csharp
  - vb
  name: AllScenes()
  nameWithType: SceneCollection.AllScenes()
  fullName: AdvancedSceneManager.Models.SceneCollection.AllScenes()
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/SceneCollection.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: AllScenes
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/SceneCollection.cs
    startLine: 309
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Models
  summary: Gets all scenes contained in this collection, including overriden loading screen, if set.
  example: []
  syntax:
    content: public Scene[] AllScenes()
    return:
      type: AdvancedSceneManager.Models.Scene[]
    content.vb: Public Function AllScenes As Scene()
  overload: AdvancedSceneManager.Models.SceneCollection.AllScenes*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AdvancedSceneManager.Models.SceneCollection.AllScenePaths
  commentId: M:AdvancedSceneManager.Models.SceneCollection.AllScenePaths
  id: AllScenePaths
  parent: AdvancedSceneManager.Models.SceneCollection
  langs:
  - csharp
  - vb
  name: AllScenePaths()
  nameWithType: SceneCollection.AllScenePaths()
  fullName: AdvancedSceneManager.Models.SceneCollection.AllScenePaths()
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/SceneCollection.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: AllScenePaths
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/SceneCollection.cs
    startLine: 315
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Models
  summary: Gets all scenes contained in this collection, including overriden loading screen, if set.
  example: []
  syntax:
    content: public string[] AllScenePaths()
    return:
      type: System.String[]
    content.vb: Public Function AllScenePaths As String()
  overload: AdvancedSceneManager.Models.SceneCollection.AllScenePaths*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AdvancedSceneManager.Models.SceneCollection.FindProfile
  commentId: M:AdvancedSceneManager.Models.SceneCollection.FindProfile
  id: FindProfile
  parent: AdvancedSceneManager.Models.SceneCollection
  langs:
  - csharp
  - vb
  name: FindProfile()
  nameWithType: SceneCollection.FindProfile()
  fullName: AdvancedSceneManager.Models.SceneCollection.FindProfile()
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/SceneCollection.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: FindProfile
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/SceneCollection.cs
    startLine: 321
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Models
  summary: Find the <xref href="AdvancedSceneManager.Models.Profile" data-throw-if-not-resolved="false"></xref> that this collection is associated with.
  example: []
  syntax:
    content: public Profile FindProfile()
    return:
      type: AdvancedSceneManager.Models.Profile
    content.vb: Public Function FindProfile As Profile
  overload: AdvancedSceneManager.Models.SceneCollection.FindProfile*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AdvancedSceneManager.Models.SceneCollection.Find(System.String,System.Boolean)
  commentId: M:AdvancedSceneManager.Models.SceneCollection.Find(System.String,System.Boolean)
  id: Find(System.String,System.Boolean)
  parent: AdvancedSceneManager.Models.SceneCollection
  langs:
  - csharp
  - vb
  name: Find(String, Boolean)
  nameWithType: SceneCollection.Find(String, Boolean)
  fullName: AdvancedSceneManager.Models.SceneCollection.Find(System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/SceneCollection.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: Find
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/SceneCollection.cs
    startLine: 325
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Models
  summary: Finds the <xref href="AdvancedSceneManager.Models.SceneCollection" data-throw-if-not-resolved="false"></xref> with the specified name.
  example: []
  syntax:
    content: public static SceneCollection Find(string title, bool onlyActiveProfile = true)
    parameters:
    - id: title
      type: System.String
    - id: onlyActiveProfile
      type: System.Boolean
    return:
      type: AdvancedSceneManager.Models.SceneCollection
    content.vb: Public Shared Function Find(title As String, onlyActiveProfile As Boolean = True) As SceneCollection
  overload: AdvancedSceneManager.Models.SceneCollection.Find*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: AdvancedSceneManager.Models.SceneCollection.ExtraData``1
  commentId: M:AdvancedSceneManager.Models.SceneCollection.ExtraData``1
  id: ExtraData``1
  parent: AdvancedSceneManager.Models.SceneCollection
  langs:
  - csharp
  - vb
  name: ExtraData<T>()
  nameWithType: SceneCollection.ExtraData<T>()
  fullName: AdvancedSceneManager.Models.SceneCollection.ExtraData<T>()
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/SceneCollection.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: ExtraData
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/SceneCollection.cs
    startLine: 329
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Models
  summary: Casts and returns <xref href="AdvancedSceneManager.Models.SceneCollection.extraData" data-throw-if-not-resolved="false"></xref> as the specified type. Returns null if invalid type.
  example: []
  syntax:
    content: >-
      public T ExtraData<T>()
          where T : ScriptableObject
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Public Function ExtraData(Of T As ScriptableObject) As T
  overload: AdvancedSceneManager.Models.SceneCollection.ExtraData*
  nameWithType.vb: SceneCollection.ExtraData(Of T)()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: AdvancedSceneManager.Models.SceneCollection.ExtraData(Of T)()
  name.vb: ExtraData(Of T)()
references:
- uid: AdvancedSceneManager.Models.SceneCollection
  commentId: T:AdvancedSceneManager.Models.SceneCollection
  parent: AdvancedSceneManager.Models
  name: SceneCollection
  nameWithType: SceneCollection
  fullName: AdvancedSceneManager.Models.SceneCollection
- uid: AdvancedSceneManager.Models.Scene
  commentId: T:AdvancedSceneManager.Models.Scene
  parent: AdvancedSceneManager.Models
  name: Scene
  nameWithType: Scene
  fullName: AdvancedSceneManager.Models.Scene
- uid: AdvancedSceneManager.Models
  commentId: N:AdvancedSceneManager.Models
  name: AdvancedSceneManager.Models
  nameWithType: AdvancedSceneManager.Models
  fullName: AdvancedSceneManager.Models
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: UnityEngine.Object
  commentId: T:UnityEngine.Object
  parent: UnityEngine
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: UnityEngine.Object
- uid: UnityEngine.ScriptableObject
  commentId: T:UnityEngine.ScriptableObject
  parent: UnityEngine
  isExternal: true
  name: ScriptableObject
  nameWithType: ScriptableObject
  fullName: UnityEngine.ScriptableObject
- uid: AdvancedSceneManager.Models.ISceneObject
  commentId: T:AdvancedSceneManager.Models.ISceneObject
  parent: AdvancedSceneManager.Models
  name: ISceneObject
  nameWithType: ISceneObject
  fullName: AdvancedSceneManager.Models.ISceneObject
- uid: System.Collections.Generic.IEnumerable{AdvancedSceneManager.Models.Scene}.AdvancedSceneManager.Utility.SceneCollectionUtility.Find(System.String)
  commentId: M:AdvancedSceneManager.Utility.SceneCollectionUtility.Find(System.Collections.Generic.IEnumerable{AdvancedSceneManager.Models.Scene},System.String)
  parent: AdvancedSceneManager.Utility.SceneCollectionUtility
  definition: AdvancedSceneManager.Utility.SceneCollectionUtility.Find(System.Collections.Generic.IEnumerable{AdvancedSceneManager.Models.Scene},System.String)
  name: Find(String)
  nameWithType: SceneCollectionUtility.Find(String)
  fullName: AdvancedSceneManager.Utility.SceneCollectionUtility.Find(System.String)
  spec.csharp:
  - uid: AdvancedSceneManager.Utility.SceneCollectionUtility.Find(System.String)
    name: Find
    nameWithType: SceneCollectionUtility.Find
    fullName: AdvancedSceneManager.Utility.SceneCollectionUtility.Find
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AdvancedSceneManager.Utility.SceneCollectionUtility.Find(System.String)
    name: Find
    nameWithType: SceneCollectionUtility.Find
    fullName: AdvancedSceneManager.Utility.SceneCollectionUtility.Find
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: UnityEngine.ScriptableObject.AdvancedSceneManager.Utility.ScriptableObjectUtility.Save
  commentId: M:AdvancedSceneManager.Utility.ScriptableObjectUtility.Save(UnityEngine.ScriptableObject)
  parent: AdvancedSceneManager.Utility.ScriptableObjectUtility
  definition: AdvancedSceneManager.Utility.ScriptableObjectUtility.Save(UnityEngine.ScriptableObject)
  name: Save()
  nameWithType: ScriptableObjectUtility.Save()
  fullName: AdvancedSceneManager.Utility.ScriptableObjectUtility.Save()
  spec.csharp:
  - uid: AdvancedSceneManager.Utility.ScriptableObjectUtility.Save
    name: Save
    nameWithType: ScriptableObjectUtility.Save
    fullName: AdvancedSceneManager.Utility.ScriptableObjectUtility.Save
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AdvancedSceneManager.Utility.ScriptableObjectUtility.Save
    name: Save
    nameWithType: ScriptableObjectUtility.Save
    fullName: AdvancedSceneManager.Utility.ScriptableObjectUtility.Save
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{AdvancedSceneManager.Models.Scene}.AdvancedSceneManager.Editor.Utility.ListUtility.ForEach``1(System.Action{AdvancedSceneManager.Models.Scene,System.Int32})
  commentId: M:AdvancedSceneManager.Editor.Utility.ListUtility.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})
  parent: AdvancedSceneManager.Editor.Utility.ListUtility
  definition: AdvancedSceneManager.Editor.Utility.ListUtility.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})
  name: ForEach<Scene>(Action<Scene, Int32>)
  nameWithType: ListUtility.ForEach<Scene>(Action<Scene, Int32>)
  fullName: AdvancedSceneManager.Editor.Utility.ListUtility.ForEach<AdvancedSceneManager.Models.Scene>(System.Action<AdvancedSceneManager.Models.Scene, System.Int32>)
  nameWithType.vb: ListUtility.ForEach(Of Scene)(Action(Of Scene, Int32))
  fullName.vb: AdvancedSceneManager.Editor.Utility.ListUtility.ForEach(Of AdvancedSceneManager.Models.Scene)(System.Action(Of AdvancedSceneManager.Models.Scene, System.Int32))
  name.vb: ForEach(Of Scene)(Action(Of Scene, Int32))
  spec.csharp:
  - uid: AdvancedSceneManager.Editor.Utility.ListUtility.ForEach``1(System.Action{``0,System.Int32})
    name: ForEach<Scene>
    nameWithType: ListUtility.ForEach<Scene>
    fullName: AdvancedSceneManager.Editor.Utility.ListUtility.ForEach<AdvancedSceneManager.Models.Scene>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: AdvancedSceneManager.Models.Scene
    name: Scene
    nameWithType: Scene
    fullName: AdvancedSceneManager.Models.Scene
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AdvancedSceneManager.Editor.Utility.ListUtility.ForEach``1(System.Action{``0,System.Int32})
    name: ForEach(Of Scene)
    nameWithType: ListUtility.ForEach(Of Scene)
    fullName: AdvancedSceneManager.Editor.Utility.ListUtility.ForEach(Of AdvancedSceneManager.Models.Scene)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: AdvancedSceneManager.Models.Scene
    name: Scene
    nameWithType: Scene
    fullName: AdvancedSceneManager.Models.Scene
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{AdvancedSceneManager.Models.Scene}.AdvancedSceneManager.Editor.Utility.ListUtility.Flatten``1(System.Func{AdvancedSceneManager.Models.Scene,System.Collections.Generic.IEnumerable{AdvancedSceneManager.Models.Scene}})
  commentId: M:AdvancedSceneManager.Editor.Utility.ListUtility.Flatten``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}})
  parent: AdvancedSceneManager.Editor.Utility.ListUtility
  definition: AdvancedSceneManager.Editor.Utility.ListUtility.Flatten``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}})
  name: Flatten<Scene>(Func<Scene, IEnumerable<Scene>>)
  nameWithType: ListUtility.Flatten<Scene>(Func<Scene, IEnumerable<Scene>>)
  fullName: AdvancedSceneManager.Editor.Utility.ListUtility.Flatten<AdvancedSceneManager.Models.Scene>(System.Func<AdvancedSceneManager.Models.Scene, System.Collections.Generic.IEnumerable<AdvancedSceneManager.Models.Scene>>)
  nameWithType.vb: ListUtility.Flatten(Of Scene)(Func(Of Scene, IEnumerable(Of Scene)))
  fullName.vb: AdvancedSceneManager.Editor.Utility.ListUtility.Flatten(Of AdvancedSceneManager.Models.Scene)(System.Func(Of AdvancedSceneManager.Models.Scene, System.Collections.Generic.IEnumerable(Of AdvancedSceneManager.Models.Scene)))
  name.vb: Flatten(Of Scene)(Func(Of Scene, IEnumerable(Of Scene)))
  spec.csharp:
  - uid: AdvancedSceneManager.Editor.Utility.ListUtility.Flatten``1(System.Func{``0,System.Collections.Generic.IEnumerable{``0}})
    name: Flatten<Scene>
    nameWithType: ListUtility.Flatten<Scene>
    fullName: AdvancedSceneManager.Editor.Utility.ListUtility.Flatten<AdvancedSceneManager.Models.Scene>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: AdvancedSceneManager.Models.Scene
    name: Scene
    nameWithType: Scene
    fullName: AdvancedSceneManager.Models.Scene
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: AdvancedSceneManager.Models.Scene
    name: Scene
    nameWithType: Scene
    fullName: AdvancedSceneManager.Models.Scene
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AdvancedSceneManager.Editor.Utility.ListUtility.Flatten``1(System.Func{``0,System.Collections.Generic.IEnumerable{``0}})
    name: Flatten(Of Scene)
    nameWithType: ListUtility.Flatten(Of Scene)
    fullName: AdvancedSceneManager.Editor.Utility.ListUtility.Flatten(Of AdvancedSceneManager.Models.Scene)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: AdvancedSceneManager.Models.Scene
    name: Scene
    nameWithType: Scene
    fullName: AdvancedSceneManager.Models.Scene
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: AdvancedSceneManager.Models.Scene
    name: Scene
    nameWithType: Scene
    fullName: AdvancedSceneManager.Models.Scene
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{AdvancedSceneManager.Models.Scene}.AdvancedSceneManager.Editor.Utility.ListUtility.Except``1(AdvancedSceneManager.Models.Scene)
  commentId: M:AdvancedSceneManager.Editor.Utility.ListUtility.Except``1(System.Collections.Generic.IEnumerable{``0},``0)
  parent: AdvancedSceneManager.Editor.Utility.ListUtility
  definition: AdvancedSceneManager.Editor.Utility.ListUtility.Except``1(System.Collections.Generic.IEnumerable{``0},``0)
  name: Except<Scene>(Scene)
  nameWithType: ListUtility.Except<Scene>(Scene)
  fullName: AdvancedSceneManager.Editor.Utility.ListUtility.Except<AdvancedSceneManager.Models.Scene>(AdvancedSceneManager.Models.Scene)
  nameWithType.vb: ListUtility.Except(Of Scene)(Scene)
  fullName.vb: AdvancedSceneManager.Editor.Utility.ListUtility.Except(Of AdvancedSceneManager.Models.Scene)(AdvancedSceneManager.Models.Scene)
  name.vb: Except(Of Scene)(Scene)
  spec.csharp:
  - uid: AdvancedSceneManager.Editor.Utility.ListUtility.Except``1(``0)
    name: Except<Scene>
    nameWithType: ListUtility.Except<Scene>
    fullName: AdvancedSceneManager.Editor.Utility.ListUtility.Except<AdvancedSceneManager.Models.Scene>
  - name: (
    nameWithType: (
    fullName: (
  - uid: AdvancedSceneManager.Models.Scene
    name: Scene
    nameWithType: Scene
    fullName: AdvancedSceneManager.Models.Scene
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AdvancedSceneManager.Editor.Utility.ListUtility.Except``1(``0)
    name: Except(Of Scene)
    nameWithType: ListUtility.Except(Of Scene)
    fullName: AdvancedSceneManager.Editor.Utility.ListUtility.Except(Of AdvancedSceneManager.Models.Scene)
  - name: (
    nameWithType: (
    fullName: (
  - uid: AdvancedSceneManager.Models.Scene
    name: Scene
    nameWithType: Scene
    fullName: AdvancedSceneManager.Models.Scene
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{AdvancedSceneManager.Models.Scene}.AdvancedSceneManager.Editor.Utility.ListUtility.GroupConsecutive``1(System.Func{AdvancedSceneManager.Models.Scene,AdvancedSceneManager.Models.Scene,System.Boolean})
  commentId: M:AdvancedSceneManager.Editor.Utility.ListUtility.GroupConsecutive``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})
  parent: AdvancedSceneManager.Editor.Utility.ListUtility
  definition: AdvancedSceneManager.Editor.Utility.ListUtility.GroupConsecutive``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})
  name: GroupConsecutive<Scene>(Func<Scene, Scene, Boolean>)
  nameWithType: ListUtility.GroupConsecutive<Scene>(Func<Scene, Scene, Boolean>)
  fullName: AdvancedSceneManager.Editor.Utility.ListUtility.GroupConsecutive<AdvancedSceneManager.Models.Scene>(System.Func<AdvancedSceneManager.Models.Scene, AdvancedSceneManager.Models.Scene, System.Boolean>)
  nameWithType.vb: ListUtility.GroupConsecutive(Of Scene)(Func(Of Scene, Scene, Boolean))
  fullName.vb: AdvancedSceneManager.Editor.Utility.ListUtility.GroupConsecutive(Of AdvancedSceneManager.Models.Scene)(System.Func(Of AdvancedSceneManager.Models.Scene, AdvancedSceneManager.Models.Scene, System.Boolean))
  name.vb: GroupConsecutive(Of Scene)(Func(Of Scene, Scene, Boolean))
  spec.csharp:
  - uid: AdvancedSceneManager.Editor.Utility.ListUtility.GroupConsecutive``1(System.Func{``0,``0,System.Boolean})
    name: GroupConsecutive<Scene>
    nameWithType: ListUtility.GroupConsecutive<Scene>
    fullName: AdvancedSceneManager.Editor.Utility.ListUtility.GroupConsecutive<AdvancedSceneManager.Models.Scene>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: AdvancedSceneManager.Models.Scene
    name: Scene
    nameWithType: Scene
    fullName: AdvancedSceneManager.Models.Scene
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: AdvancedSceneManager.Models.Scene
    name: Scene
    nameWithType: Scene
    fullName: AdvancedSceneManager.Models.Scene
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AdvancedSceneManager.Editor.Utility.ListUtility.GroupConsecutive``1(System.Func{``0,``0,System.Boolean})
    name: GroupConsecutive(Of Scene)
    nameWithType: ListUtility.GroupConsecutive(Of Scene)
    fullName: AdvancedSceneManager.Editor.Utility.ListUtility.GroupConsecutive(Of AdvancedSceneManager.Models.Scene)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: AdvancedSceneManager.Models.Scene
    name: Scene
    nameWithType: Scene
    fullName: AdvancedSceneManager.Models.Scene
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: AdvancedSceneManager.Models.Scene
    name: Scene
    nameWithType: Scene
    fullName: AdvancedSceneManager.Models.Scene
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: UnityEngine
  commentId: N:UnityEngine
  isExternal: true
  name: UnityEngine
  nameWithType: UnityEngine
  fullName: UnityEngine
- uid: AdvancedSceneManager.Utility.SceneCollectionUtility.Find(System.Collections.Generic.IEnumerable{AdvancedSceneManager.Models.Scene},System.String)
  commentId: M:AdvancedSceneManager.Utility.SceneCollectionUtility.Find(System.Collections.Generic.IEnumerable{AdvancedSceneManager.Models.Scene},System.String)
  isExternal: true
  name: Find(IEnumerable<Scene>, String)
  nameWithType: SceneCollectionUtility.Find(IEnumerable<Scene>, String)
  fullName: AdvancedSceneManager.Utility.SceneCollectionUtility.Find(System.Collections.Generic.IEnumerable<AdvancedSceneManager.Models.Scene>, System.String)
  nameWithType.vb: SceneCollectionUtility.Find(IEnumerable(Of Scene), String)
  fullName.vb: AdvancedSceneManager.Utility.SceneCollectionUtility.Find(System.Collections.Generic.IEnumerable(Of AdvancedSceneManager.Models.Scene), System.String)
  name.vb: Find(IEnumerable(Of Scene), String)
  spec.csharp:
  - uid: AdvancedSceneManager.Utility.SceneCollectionUtility.Find(System.Collections.Generic.IEnumerable{AdvancedSceneManager.Models.Scene},System.String)
    name: Find
    nameWithType: SceneCollectionUtility.Find
    fullName: AdvancedSceneManager.Utility.SceneCollectionUtility.Find
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: AdvancedSceneManager.Models.Scene
    name: Scene
    nameWithType: Scene
    fullName: AdvancedSceneManager.Models.Scene
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AdvancedSceneManager.Utility.SceneCollectionUtility.Find(System.Collections.Generic.IEnumerable{AdvancedSceneManager.Models.Scene},System.String)
    name: Find
    nameWithType: SceneCollectionUtility.Find
    fullName: AdvancedSceneManager.Utility.SceneCollectionUtility.Find
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: AdvancedSceneManager.Models.Scene
    name: Scene
    nameWithType: Scene
    fullName: AdvancedSceneManager.Models.Scene
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: AdvancedSceneManager.Utility.SceneCollectionUtility
  commentId: T:AdvancedSceneManager.Utility.SceneCollectionUtility
  parent: AdvancedSceneManager.Utility
  name: SceneCollectionUtility
  nameWithType: SceneCollectionUtility
  fullName: AdvancedSceneManager.Utility.SceneCollectionUtility
- uid: AdvancedSceneManager.Utility.ScriptableObjectUtility.Save(UnityEngine.ScriptableObject)
  commentId: M:AdvancedSceneManager.Utility.ScriptableObjectUtility.Save(UnityEngine.ScriptableObject)
  isExternal: true
  name: Save(ScriptableObject)
  nameWithType: ScriptableObjectUtility.Save(ScriptableObject)
  fullName: AdvancedSceneManager.Utility.ScriptableObjectUtility.Save(UnityEngine.ScriptableObject)
  spec.csharp:
  - uid: AdvancedSceneManager.Utility.ScriptableObjectUtility.Save(UnityEngine.ScriptableObject)
    name: Save
    nameWithType: ScriptableObjectUtility.Save
    fullName: AdvancedSceneManager.Utility.ScriptableObjectUtility.Save
  - name: (
    nameWithType: (
    fullName: (
  - uid: UnityEngine.ScriptableObject
    name: ScriptableObject
    nameWithType: ScriptableObject
    fullName: UnityEngine.ScriptableObject
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AdvancedSceneManager.Utility.ScriptableObjectUtility.Save(UnityEngine.ScriptableObject)
    name: Save
    nameWithType: ScriptableObjectUtility.Save
    fullName: AdvancedSceneManager.Utility.ScriptableObjectUtility.Save
  - name: (
    nameWithType: (
    fullName: (
  - uid: UnityEngine.ScriptableObject
    name: ScriptableObject
    nameWithType: ScriptableObject
    fullName: UnityEngine.ScriptableObject
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: AdvancedSceneManager.Utility.ScriptableObjectUtility
  commentId: T:AdvancedSceneManager.Utility.ScriptableObjectUtility
  parent: AdvancedSceneManager.Utility
  name: ScriptableObjectUtility
  nameWithType: ScriptableObjectUtility
  fullName: AdvancedSceneManager.Utility.ScriptableObjectUtility
- uid: AdvancedSceneManager.Editor.Utility.ListUtility.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})
  commentId: M:AdvancedSceneManager.Editor.Utility.ListUtility.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})
  isExternal: true
  name: ForEach<T>(IEnumerable<T>, Action<T, Int32>)
  nameWithType: ListUtility.ForEach<T>(IEnumerable<T>, Action<T, Int32>)
  fullName: AdvancedSceneManager.Editor.Utility.ListUtility.ForEach<T>(System.Collections.Generic.IEnumerable<T>, System.Action<T, System.Int32>)
  nameWithType.vb: ListUtility.ForEach(Of T)(IEnumerable(Of T), Action(Of T, Int32))
  fullName.vb: AdvancedSceneManager.Editor.Utility.ListUtility.ForEach(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Action(Of T, System.Int32))
  name.vb: ForEach(Of T)(IEnumerable(Of T), Action(Of T, Int32))
  spec.csharp:
  - uid: AdvancedSceneManager.Editor.Utility.ListUtility.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})
    name: ForEach<T>
    nameWithType: ListUtility.ForEach<T>
    fullName: AdvancedSceneManager.Editor.Utility.ListUtility.ForEach<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AdvancedSceneManager.Editor.Utility.ListUtility.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})
    name: ForEach(Of T)
    nameWithType: ListUtility.ForEach(Of T)
    fullName: AdvancedSceneManager.Editor.Utility.ListUtility.ForEach(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: AdvancedSceneManager.Editor.Utility.ListUtility
  commentId: T:AdvancedSceneManager.Editor.Utility.ListUtility
  parent: AdvancedSceneManager.Editor.Utility
  name: ListUtility
  nameWithType: ListUtility
  fullName: AdvancedSceneManager.Editor.Utility.ListUtility
- uid: AdvancedSceneManager.Editor.Utility.ListUtility.Flatten``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}})
  commentId: M:AdvancedSceneManager.Editor.Utility.ListUtility.Flatten``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}})
  isExternal: true
  name: Flatten<T>(IEnumerable<T>, Func<T, IEnumerable<T>>)
  nameWithType: ListUtility.Flatten<T>(IEnumerable<T>, Func<T, IEnumerable<T>>)
  fullName: AdvancedSceneManager.Editor.Utility.ListUtility.Flatten<T>(System.Collections.Generic.IEnumerable<T>, System.Func<T, System.Collections.Generic.IEnumerable<T>>)
  nameWithType.vb: ListUtility.Flatten(Of T)(IEnumerable(Of T), Func(Of T, IEnumerable(Of T)))
  fullName.vb: AdvancedSceneManager.Editor.Utility.ListUtility.Flatten(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, System.Collections.Generic.IEnumerable(Of T)))
  name.vb: Flatten(Of T)(IEnumerable(Of T), Func(Of T, IEnumerable(Of T)))
  spec.csharp:
  - uid: AdvancedSceneManager.Editor.Utility.ListUtility.Flatten``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}})
    name: Flatten<T>
    nameWithType: ListUtility.Flatten<T>
    fullName: AdvancedSceneManager.Editor.Utility.ListUtility.Flatten<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AdvancedSceneManager.Editor.Utility.ListUtility.Flatten``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}})
    name: Flatten(Of T)
    nameWithType: ListUtility.Flatten(Of T)
    fullName: AdvancedSceneManager.Editor.Utility.ListUtility.Flatten(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: AdvancedSceneManager.Editor.Utility.ListUtility.Except``1(System.Collections.Generic.IEnumerable{``0},``0)
  commentId: M:AdvancedSceneManager.Editor.Utility.ListUtility.Except``1(System.Collections.Generic.IEnumerable{``0},``0)
  isExternal: true
  name: Except<T>(IEnumerable<T>, T)
  nameWithType: ListUtility.Except<T>(IEnumerable<T>, T)
  fullName: AdvancedSceneManager.Editor.Utility.ListUtility.Except<T>(System.Collections.Generic.IEnumerable<T>, T)
  nameWithType.vb: ListUtility.Except(Of T)(IEnumerable(Of T), T)
  fullName.vb: AdvancedSceneManager.Editor.Utility.ListUtility.Except(Of T)(System.Collections.Generic.IEnumerable(Of T), T)
  name.vb: Except(Of T)(IEnumerable(Of T), T)
  spec.csharp:
  - uid: AdvancedSceneManager.Editor.Utility.ListUtility.Except``1(System.Collections.Generic.IEnumerable{``0},``0)
    name: Except<T>
    nameWithType: ListUtility.Except<T>
    fullName: AdvancedSceneManager.Editor.Utility.ListUtility.Except<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AdvancedSceneManager.Editor.Utility.ListUtility.Except``1(System.Collections.Generic.IEnumerable{``0},``0)
    name: Except(Of T)
    nameWithType: ListUtility.Except(Of T)
    fullName: AdvancedSceneManager.Editor.Utility.ListUtility.Except(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: AdvancedSceneManager.Editor.Utility.ListUtility.GroupConsecutive``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})
  commentId: M:AdvancedSceneManager.Editor.Utility.ListUtility.GroupConsecutive``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})
  isExternal: true
  name: GroupConsecutive<T>(IEnumerable<T>, Func<T, T, Boolean>)
  nameWithType: ListUtility.GroupConsecutive<T>(IEnumerable<T>, Func<T, T, Boolean>)
  fullName: AdvancedSceneManager.Editor.Utility.ListUtility.GroupConsecutive<T>(System.Collections.Generic.IEnumerable<T>, System.Func<T, T, System.Boolean>)
  nameWithType.vb: ListUtility.GroupConsecutive(Of T)(IEnumerable(Of T), Func(Of T, T, Boolean))
  fullName.vb: AdvancedSceneManager.Editor.Utility.ListUtility.GroupConsecutive(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, T, System.Boolean))
  name.vb: GroupConsecutive(Of T)(IEnumerable(Of T), Func(Of T, T, Boolean))
  spec.csharp:
  - uid: AdvancedSceneManager.Editor.Utility.ListUtility.GroupConsecutive``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})
    name: GroupConsecutive<T>
    nameWithType: ListUtility.GroupConsecutive<T>
    fullName: AdvancedSceneManager.Editor.Utility.ListUtility.GroupConsecutive<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AdvancedSceneManager.Editor.Utility.ListUtility.GroupConsecutive``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})
    name: GroupConsecutive(Of T)
    nameWithType: ListUtility.GroupConsecutive(Of T)
    fullName: AdvancedSceneManager.Editor.Utility.ListUtility.GroupConsecutive(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: AdvancedSceneManager.Utility
  commentId: N:AdvancedSceneManager.Utility
  name: AdvancedSceneManager.Utility
  nameWithType: AdvancedSceneManager.Utility
  fullName: AdvancedSceneManager.Utility
- uid: AdvancedSceneManager.Editor.Utility
  commentId: N:AdvancedSceneManager.Editor.Utility
  name: AdvancedSceneManager.Editor.Utility
  nameWithType: AdvancedSceneManager.Editor.Utility
  fullName: AdvancedSceneManager.Editor.Utility
- uid: System.ComponentModel.PropertyChangedEventHandler
  commentId: T:System.ComponentModel.PropertyChangedEventHandler
  parent: System.ComponentModel
  isExternal: true
  name: PropertyChangedEventHandler
  nameWithType: PropertyChangedEventHandler
  fullName: System.ComponentModel.PropertyChangedEventHandler
- uid: System.ComponentModel
  commentId: N:System.ComponentModel
  isExternal: true
  name: System.ComponentModel
  nameWithType: System.ComponentModel
  fullName: System.ComponentModel
- uid: AdvancedSceneManager.Models.SceneCollection.PropertyChanged
  commentId: E:AdvancedSceneManager.Models.SceneCollection.PropertyChanged
  parent: AdvancedSceneManager.Models.SceneCollection
  name: PropertyChanged
  nameWithType: SceneCollection.PropertyChanged
  fullName: AdvancedSceneManager.Models.SceneCollection.PropertyChanged
- uid: AdvancedSceneManager.Models.SceneCollection.OnPropertyChanged*
  commentId: Overload:AdvancedSceneManager.Models.SceneCollection.OnPropertyChanged
  name: OnPropertyChanged
  nameWithType: SceneCollection.OnPropertyChanged
  fullName: AdvancedSceneManager.Models.SceneCollection.OnPropertyChanged
- uid: AdvancedSceneManager.Models.ISceneObject.OnPropertyChanged
  commentId: M:AdvancedSceneManager.Models.ISceneObject.OnPropertyChanged
  parent: AdvancedSceneManager.Models.ISceneObject
  name: OnPropertyChanged()
  nameWithType: ISceneObject.OnPropertyChanged()
  fullName: AdvancedSceneManager.Models.ISceneObject.OnPropertyChanged()
  spec.csharp:
  - uid: AdvancedSceneManager.Models.ISceneObject.OnPropertyChanged
    name: OnPropertyChanged
    nameWithType: ISceneObject.OnPropertyChanged
    fullName: AdvancedSceneManager.Models.ISceneObject.OnPropertyChanged
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AdvancedSceneManager.Models.ISceneObject.OnPropertyChanged
    name: OnPropertyChanged
    nameWithType: ISceneObject.OnPropertyChanged
    fullName: AdvancedSceneManager.Models.ISceneObject.OnPropertyChanged
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: AdvancedSceneManager.Models.SceneCollection.Count*
  commentId: Overload:AdvancedSceneManager.Models.SceneCollection.Count
  name: Count
  nameWithType: SceneCollection.Count
  fullName: AdvancedSceneManager.Models.SceneCollection.Count
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.IReadOnlyList`1
  commentId: T:System.Collections.Generic.IReadOnlyList`1
  isExternal: true
- uid: AdvancedSceneManager.Models.SceneCollection.IsReadOnly*
  commentId: Overload:AdvancedSceneManager.Models.SceneCollection.IsReadOnly
  name: IsReadOnly
  nameWithType: SceneCollection.IsReadOnly
  fullName: AdvancedSceneManager.Models.SceneCollection.IsReadOnly
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: AdvancedSceneManager.Models.SceneCollection.Item*
  commentId: Overload:AdvancedSceneManager.Models.SceneCollection.Item
  name: Item
  nameWithType: SceneCollection.Item
  fullName: AdvancedSceneManager.Models.SceneCollection.Item
- uid: AdvancedSceneManager.Models.SceneCollection.Contains*
  commentId: Overload:AdvancedSceneManager.Models.SceneCollection.Contains
  name: Contains
  nameWithType: SceneCollection.Contains
  fullName: AdvancedSceneManager.Models.SceneCollection.Contains
- uid: AdvancedSceneManager.Models.SceneCollection.GetEnumerator*
  commentId: Overload:AdvancedSceneManager.Models.SceneCollection.GetEnumerator
  name: GetEnumerator
  nameWithType: SceneCollection.GetEnumerator
  fullName: AdvancedSceneManager.Models.SceneCollection.GetEnumerator
- uid: System.Collections.Generic.IEnumerator{AdvancedSceneManager.Models.Scene}
  commentId: T:System.Collections.Generic.IEnumerator{AdvancedSceneManager.Models.Scene}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<Scene>
  nameWithType: IEnumerator<Scene>
  fullName: System.Collections.Generic.IEnumerator<AdvancedSceneManager.Models.Scene>
  nameWithType.vb: IEnumerator(Of Scene)
  fullName.vb: System.Collections.Generic.IEnumerator(Of AdvancedSceneManager.Models.Scene)
  name.vb: IEnumerator(Of Scene)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: AdvancedSceneManager.Models.Scene
    name: Scene
    nameWithType: Scene
    fullName: AdvancedSceneManager.Models.Scene
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: AdvancedSceneManager.Models.Scene
    name: Scene
    nameWithType: Scene
    fullName: AdvancedSceneManager.Models.Scene
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator`1
  commentId: T:System.Collections.Generic.IEnumerator`1
  isExternal: true
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: AdvancedSceneManager.SceneManager.assetManagement
  commentId: P:AdvancedSceneManager.SceneManager.assetManagement
  isExternal: true
- uid: UnityEngine.Object.name
  commentId: P:UnityEngine.Object.name
  isExternal: true
- uid: AdvancedSceneManager.Models.SceneCollection.name*
  commentId: Overload:AdvancedSceneManager.Models.SceneCollection.name
  name: name
  nameWithType: SceneCollection.name
  fullName: AdvancedSceneManager.Models.SceneCollection.name
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: AdvancedSceneManager.Models.SceneCollection.title*
  commentId: Overload:AdvancedSceneManager.Models.SceneCollection.title
  name: title
  nameWithType: SceneCollection.title
  fullName: AdvancedSceneManager.Models.SceneCollection.title
- uid: AdvancedSceneManager.Models.SceneCollection.ExtraData``1
  commentId: M:AdvancedSceneManager.Models.SceneCollection.ExtraData``1
  parent: AdvancedSceneManager.Models.SceneCollection
  name: ExtraData<T>()
  nameWithType: SceneCollection.ExtraData<T>()
  fullName: AdvancedSceneManager.Models.SceneCollection.ExtraData<T>()
  nameWithType.vb: SceneCollection.ExtraData(Of T)()
  fullName.vb: AdvancedSceneManager.Models.SceneCollection.ExtraData(Of T)()
  name.vb: ExtraData(Of T)()
  spec.csharp:
  - uid: AdvancedSceneManager.Models.SceneCollection.ExtraData``1
    name: ExtraData<T>
    nameWithType: SceneCollection.ExtraData<T>
    fullName: AdvancedSceneManager.Models.SceneCollection.ExtraData<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AdvancedSceneManager.Models.SceneCollection.ExtraData``1
    name: ExtraData(Of T)
    nameWithType: SceneCollection.ExtraData(Of T)
    fullName: AdvancedSceneManager.Models.SceneCollection.ExtraData(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: AdvancedSceneManager.Models.SceneCollection.extraData*
  commentId: Overload:AdvancedSceneManager.Models.SceneCollection.extraData
  name: extraData
  nameWithType: SceneCollection.extraData
  fullName: AdvancedSceneManager.Models.SceneCollection.extraData
- uid: AdvancedSceneManager.Models.SceneCollection.isIncluded*
  commentId: Overload:AdvancedSceneManager.Models.SceneCollection.isIncluded
  name: isIncluded
  nameWithType: SceneCollection.isIncluded
  fullName: AdvancedSceneManager.Models.SceneCollection.isIncluded
- uid: AdvancedSceneManager.Models.SceneCollection.scenes*
  commentId: Overload:AdvancedSceneManager.Models.SceneCollection.scenes
  name: scenes
  nameWithType: SceneCollection.scenes
  fullName: AdvancedSceneManager.Models.SceneCollection.scenes
- uid: AdvancedSceneManager.Models.Scene[]
  isExternal: true
  name: Scene[]
  nameWithType: Scene[]
  fullName: AdvancedSceneManager.Models.Scene[]
  nameWithType.vb: Scene()
  fullName.vb: AdvancedSceneManager.Models.Scene()
  name.vb: Scene()
  spec.csharp:
  - uid: AdvancedSceneManager.Models.Scene
    name: Scene
    nameWithType: Scene
    fullName: AdvancedSceneManager.Models.Scene
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: AdvancedSceneManager.Models.Scene
    name: Scene
    nameWithType: Scene
    fullName: AdvancedSceneManager.Models.Scene
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: AdvancedSceneManager.Models.SceneCollection.loadingScreen*
  commentId: Overload:AdvancedSceneManager.Models.SceneCollection.loadingScreen
  name: loadingScreen
  nameWithType: SceneCollection.loadingScreen
  fullName: AdvancedSceneManager.Models.SceneCollection.loadingScreen
- uid: AdvancedSceneManager.Models.SceneCollection.loadingScreenUsage*
  commentId: Overload:AdvancedSceneManager.Models.SceneCollection.loadingScreenUsage
  name: loadingScreenUsage
  nameWithType: SceneCollection.loadingScreenUsage
  fullName: AdvancedSceneManager.Models.SceneCollection.loadingScreenUsage
- uid: AdvancedSceneManager.Models.LoadingScreenUsage
  commentId: T:AdvancedSceneManager.Models.LoadingScreenUsage
  parent: AdvancedSceneManager.Models
  name: LoadingScreenUsage
  nameWithType: LoadingScreenUsage
  fullName: AdvancedSceneManager.Models.LoadingScreenUsage
- uid: AdvancedSceneManager.Models.SceneCollection.activeScene*
  commentId: Overload:AdvancedSceneManager.Models.SceneCollection.activeScene
  name: activeScene
  nameWithType: SceneCollection.activeScene
  fullName: AdvancedSceneManager.Models.SceneCollection.activeScene
- uid: AdvancedSceneManager.Models.SceneCollection.startupOption*
  commentId: Overload:AdvancedSceneManager.Models.SceneCollection.startupOption
  name: startupOption
  nameWithType: SceneCollection.startupOption
  fullName: AdvancedSceneManager.Models.SceneCollection.startupOption
- uid: AdvancedSceneManager.Models.CollectionStartupOption
  commentId: T:AdvancedSceneManager.Models.CollectionStartupOption
  parent: AdvancedSceneManager.Models
  name: CollectionStartupOption
  nameWithType: CollectionStartupOption
  fullName: AdvancedSceneManager.Models.CollectionStartupOption
- uid: AdvancedSceneManager.Models.SceneCollection.loadingPriority*
  commentId: Overload:AdvancedSceneManager.Models.SceneCollection.loadingPriority
  name: loadingPriority
  nameWithType: SceneCollection.loadingPriority
  fullName: AdvancedSceneManager.Models.SceneCollection.loadingPriority
- uid: AdvancedSceneManager.Models.CollectionThreadPriority
  commentId: T:AdvancedSceneManager.Models.CollectionThreadPriority
  parent: AdvancedSceneManager.Models
  name: CollectionThreadPriority
  nameWithType: CollectionThreadPriority
  fullName: AdvancedSceneManager.Models.CollectionThreadPriority
- uid: AdvancedSceneManager.Models.SceneCollection.hasScenes*
  commentId: Overload:AdvancedSceneManager.Models.SceneCollection.hasScenes
  name: hasScenes
  nameWithType: SceneCollection.hasScenes
  fullName: AdvancedSceneManager.Models.SceneCollection.hasScenes
- uid: AdvancedSceneManager.Models.SceneCollection.Tag*
  commentId: Overload:AdvancedSceneManager.Models.SceneCollection.Tag
  name: Tag
  nameWithType: SceneCollection.Tag
  fullName: AdvancedSceneManager.Models.SceneCollection.Tag
- uid: AdvancedSceneManager.Models.SceneTag
  commentId: T:AdvancedSceneManager.Models.SceneTag
  parent: AdvancedSceneManager.Models
  name: SceneTag
  nameWithType: SceneTag
  fullName: AdvancedSceneManager.Models.SceneTag
- uid: AdvancedSceneManager.Core.CollectionManager.Open(AdvancedSceneManager.Models.SceneCollection,System.Boolean,System.Boolean)
  commentId: M:AdvancedSceneManager.Core.CollectionManager.Open(AdvancedSceneManager.Models.SceneCollection,System.Boolean,System.Boolean)
  isExternal: true
- uid: AdvancedSceneManager.Models.SceneCollection.Open*
  commentId: Overload:AdvancedSceneManager.Models.SceneCollection.Open
  name: Open
  nameWithType: SceneCollection.Open
  fullName: AdvancedSceneManager.Models.SceneCollection.Open
- uid: AdvancedSceneManager.Core.SceneOperation
  commentId: T:AdvancedSceneManager.Core.SceneOperation
  parent: AdvancedSceneManager.Core
  name: SceneOperation
  nameWithType: SceneOperation
  fullName: AdvancedSceneManager.Core.SceneOperation
- uid: AdvancedSceneManager.Core
  commentId: N:AdvancedSceneManager.Core
  name: AdvancedSceneManager.Core
  nameWithType: AdvancedSceneManager.Core
  fullName: AdvancedSceneManager.Core
- uid: AdvancedSceneManager.Models.SceneCollection.OpenOrReopen*
  commentId: Overload:AdvancedSceneManager.Models.SceneCollection.OpenOrReopen
  name: OpenOrReopen
  nameWithType: SceneCollection.OpenOrReopen
  fullName: AdvancedSceneManager.Models.SceneCollection.OpenOrReopen
- uid: AdvancedSceneManager.Core.CollectionManager.Toggle(AdvancedSceneManager.Models.SceneCollection,System.Nullable{System.Boolean})
  commentId: M:AdvancedSceneManager.Core.CollectionManager.Toggle(AdvancedSceneManager.Models.SceneCollection,System.Nullable{System.Boolean})
  isExternal: true
- uid: AdvancedSceneManager.Models.SceneCollection.Toggle*
  commentId: Overload:AdvancedSceneManager.Models.SceneCollection.Toggle
  name: Toggle
  nameWithType: SceneCollection.Toggle
  fullName: AdvancedSceneManager.Models.SceneCollection.Toggle
- uid: AdvancedSceneManager.Core.CollectionManager.Reopen(System.Boolean)
  commentId: M:AdvancedSceneManager.Core.CollectionManager.Reopen(System.Boolean)
  isExternal: true
- uid: AdvancedSceneManager.Models.SceneCollection.Reopen*
  commentId: Overload:AdvancedSceneManager.Models.SceneCollection.Reopen
  name: Reopen
  nameWithType: SceneCollection.Reopen
  fullName: AdvancedSceneManager.Models.SceneCollection.Reopen
- uid: AdvancedSceneManager.Core.CollectionManager.Close
  commentId: M:AdvancedSceneManager.Core.CollectionManager.Close
  isExternal: true
- uid: AdvancedSceneManager.Models.SceneCollection.Close*
  commentId: Overload:AdvancedSceneManager.Models.SceneCollection.Close
  name: Close
  nameWithType: SceneCollection.Close
  fullName: AdvancedSceneManager.Models.SceneCollection.Close
- uid: AdvancedSceneManager.Core.CollectionManager.IsOpen(AdvancedSceneManager.Models.SceneCollection)
  commentId: M:AdvancedSceneManager.Core.CollectionManager.IsOpen(AdvancedSceneManager.Models.SceneCollection)
  isExternal: true
- uid: AdvancedSceneManager.Models.SceneCollection.IsOpen*
  commentId: Overload:AdvancedSceneManager.Models.SceneCollection.IsOpen
  name: IsOpen
  nameWithType: SceneCollection.IsOpen
  fullName: AdvancedSceneManager.Models.SceneCollection.IsOpen
- uid: AdvancedSceneManager.Models.SceneCollection.OpenEvent*
  commentId: Overload:AdvancedSceneManager.Models.SceneCollection.OpenEvent
  name: OpenEvent
  nameWithType: SceneCollection.OpenEvent
  fullName: AdvancedSceneManager.Models.SceneCollection.OpenEvent
- uid: AdvancedSceneManager.Models.SceneCollection.ToggleEvent*
  commentId: Overload:AdvancedSceneManager.Models.SceneCollection.ToggleEvent
  name: ToggleEvent
  nameWithType: SceneCollection.ToggleEvent
  fullName: AdvancedSceneManager.Models.SceneCollection.ToggleEvent
- uid: AdvancedSceneManager.Models.SceneCollection.ReopenEvent*
  commentId: Overload:AdvancedSceneManager.Models.SceneCollection.ReopenEvent
  name: ReopenEvent
  nameWithType: SceneCollection.ReopenEvent
  fullName: AdvancedSceneManager.Models.SceneCollection.ReopenEvent
- uid: AdvancedSceneManager.Models.SceneCollection.CloseEvent*
  commentId: Overload:AdvancedSceneManager.Models.SceneCollection.CloseEvent
  name: CloseEvent
  nameWithType: SceneCollection.CloseEvent
  fullName: AdvancedSceneManager.Models.SceneCollection.CloseEvent
- uid: AdvancedSceneManager.Models.SceneCollection.AllScenes*
  commentId: Overload:AdvancedSceneManager.Models.SceneCollection.AllScenes
  name: AllScenes
  nameWithType: SceneCollection.AllScenes
  fullName: AdvancedSceneManager.Models.SceneCollection.AllScenes
- uid: AdvancedSceneManager.Models.SceneCollection.AllScenePaths*
  commentId: Overload:AdvancedSceneManager.Models.SceneCollection.AllScenePaths
  name: AllScenePaths
  nameWithType: SceneCollection.AllScenePaths
  fullName: AdvancedSceneManager.Models.SceneCollection.AllScenePaths
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: AdvancedSceneManager.Models.Profile
  commentId: T:AdvancedSceneManager.Models.Profile
  parent: AdvancedSceneManager.Models
  name: Profile
  nameWithType: Profile
  fullName: AdvancedSceneManager.Models.Profile
- uid: AdvancedSceneManager.Models.SceneCollection.FindProfile*
  commentId: Overload:AdvancedSceneManager.Models.SceneCollection.FindProfile
  name: FindProfile
  nameWithType: SceneCollection.FindProfile
  fullName: AdvancedSceneManager.Models.SceneCollection.FindProfile
- uid: AdvancedSceneManager.Models.SceneCollection.Find*
  commentId: Overload:AdvancedSceneManager.Models.SceneCollection.Find
  name: Find
  nameWithType: SceneCollection.Find
  fullName: AdvancedSceneManager.Models.SceneCollection.Find
- uid: AdvancedSceneManager.Models.SceneCollection.extraData
  commentId: P:AdvancedSceneManager.Models.SceneCollection.extraData
  parent: AdvancedSceneManager.Models.SceneCollection
  name: extraData
  nameWithType: SceneCollection.extraData
  fullName: AdvancedSceneManager.Models.SceneCollection.extraData
- uid: AdvancedSceneManager.Models.SceneCollection.ExtraData*
  commentId: Overload:AdvancedSceneManager.Models.SceneCollection.ExtraData
  name: ExtraData
  nameWithType: SceneCollection.ExtraData
  fullName: AdvancedSceneManager.Models.SceneCollection.ExtraData
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
