### YamlMime:ManagedReference
items:
- uid: AdvancedSceneManager.Editor.ScenePropertyDrawer
  commentId: T:AdvancedSceneManager.Editor.ScenePropertyDrawer
  id: ScenePropertyDrawer
  parent: AdvancedSceneManager.Editor
  children:
  - AdvancedSceneManager.Editor.ScenePropertyDrawer.ObjectField``1(UnityEngine.Rect,``0,System.Func{UnityEngine.Object,System.ValueTuple{``0,System.Boolean}},System.Type[])
  - AdvancedSceneManager.Editor.ScenePropertyDrawer.OnGUI(UnityEngine.Rect,UnityEditor.SerializedProperty,UnityEngine.GUIContent)
  langs:
  - csharp
  - vb
  name: ScenePropertyDrawer
  nameWithType: ScenePropertyDrawer
  fullName: AdvancedSceneManager.Editor.ScenePropertyDrawer
  type: Class
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Editor/Custom elements/ScenePropertyDrawer.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: ScenePropertyDrawer
    path: ../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Editor/Custom elements/ScenePropertyDrawer.cs
    startLine: 12
  assemblies:
  - AdvancedSceneManager.Editor
  namespace: AdvancedSceneManager.Editor
  syntax:
    content: >-
      [CustomPropertyDrawer(typeof(Scene))]

      public class ScenePropertyDrawer : PropertyDrawer
    content.vb: >-
      <CustomPropertyDrawer(GetType(Scene))>

      Public Class ScenePropertyDrawer
          Inherits PropertyDrawer
  inheritance:
  - System.Object
  - UnityEditor.GUIDrawer
  - UnityEditor.PropertyDrawer
  attributes:
  - type: UnityEditor.CustomPropertyDrawer
    ctor: UnityEditor.CustomPropertyDrawer.#ctor(System.Type)
    arguments:
    - type: System.Type
      value: AdvancedSceneManager.Models.Scene
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: AdvancedSceneManager.Editor.ScenePropertyDrawer.OnGUI(UnityEngine.Rect,UnityEditor.SerializedProperty,UnityEngine.GUIContent)
  commentId: M:AdvancedSceneManager.Editor.ScenePropertyDrawer.OnGUI(UnityEngine.Rect,UnityEditor.SerializedProperty,UnityEngine.GUIContent)
  id: OnGUI(UnityEngine.Rect,UnityEditor.SerializedProperty,UnityEngine.GUIContent)
  parent: AdvancedSceneManager.Editor.ScenePropertyDrawer
  langs:
  - csharp
  - vb
  name: OnGUI(Rect, SerializedProperty, GUIContent)
  nameWithType: ScenePropertyDrawer.OnGUI(Rect, SerializedProperty, GUIContent)
  fullName: AdvancedSceneManager.Editor.ScenePropertyDrawer.OnGUI(UnityEngine.Rect, UnityEditor.SerializedProperty, UnityEngine.GUIContent)
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Editor/Custom elements/ScenePropertyDrawer.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: OnGUI
    path: ../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Editor/Custom elements/ScenePropertyDrawer.cs
    startLine: 16
  assemblies:
  - AdvancedSceneManager.Editor
  namespace: AdvancedSceneManager.Editor
  syntax:
    content: public override void OnGUI(Rect position, SerializedProperty property, GUIContent label)
    parameters:
    - id: position
      type: UnityEngine.Rect
    - id: property
      type: UnityEditor.SerializedProperty
    - id: label
      type: UnityEngine.GUIContent
    content.vb: Public Overrides Sub OnGUI(position As Rect, property As SerializedProperty, label As GUIContent)
  overridden: UnityEditor.PropertyDrawer.OnGUI(UnityEngine.Rect,UnityEditor.SerializedProperty,UnityEngine.GUIContent)
  overload: AdvancedSceneManager.Editor.ScenePropertyDrawer.OnGUI*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: AdvancedSceneManager.Editor.ScenePropertyDrawer.ObjectField``1(UnityEngine.Rect,``0,System.Func{UnityEngine.Object,System.ValueTuple{``0,System.Boolean}},System.Type[])
  commentId: M:AdvancedSceneManager.Editor.ScenePropertyDrawer.ObjectField``1(UnityEngine.Rect,``0,System.Func{UnityEngine.Object,System.ValueTuple{``0,System.Boolean}},System.Type[])
  id: ObjectField``1(UnityEngine.Rect,``0,System.Func{UnityEngine.Object,System.ValueTuple{``0,System.Boolean}},System.Type[])
  parent: AdvancedSceneManager.Editor.ScenePropertyDrawer
  langs:
  - csharp
  - vb
  name: ObjectField<T>(Rect, T, Func<Object, (T obj, Boolean didConvert)>, Type[])
  nameWithType: ScenePropertyDrawer.ObjectField<T>(Rect, T, Func<Object, (T obj, Boolean didConvert)>, Type[])
  fullName: AdvancedSceneManager.Editor.ScenePropertyDrawer.ObjectField<T>(UnityEngine.Rect, T, System.Func<UnityEngine.Object, System.ValueTuple<T, System.Boolean>>, System.Type[])
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Editor/Custom elements/ScenePropertyDrawer.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: ObjectField
    path: ../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Editor/Custom elements/ScenePropertyDrawer.cs
    startLine: 45
  assemblies:
  - AdvancedSceneManager.Editor
  namespace: AdvancedSceneManager.Editor
  summary: Makes a object field. You can assign objects either by drag and drop objects or by selecting a object using the Object Picker, allows other types to be dragged onto the field and be converted to the target object..
  example: []
  syntax:
    content: >-
      public static T ObjectField<T>(Rect position, T obj, Func<Object, (T obj, bool didConvert)> convertAllowedType = null, params Type[] extraAllowedTypes)
          where T : Object
    parameters:
    - id: position
      type: UnityEngine.Rect
    - id: obj
      type: '{T}'
    - id: convertAllowedType
      type: System.Func{UnityEngine.Object,System.ValueTuple{{T},System.Boolean}}
    - id: extraAllowedTypes
      type: System.Type[]
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Public Shared Function ObjectField(Of T As Object)(position As Rect, obj As T, convertAllowedType As Func(Of Object, (obj As T, didConvert As Boolean)(Of T , Boolean)) = Nothing, ParamArray extraAllowedTypes As Type()) As T
  overload: AdvancedSceneManager.Editor.ScenePropertyDrawer.ObjectField*
  nameWithType.vb: ScenePropertyDrawer.ObjectField(Of T)(Rect, T, Func(Of Object, (obj As T, didConvert As Boolean)(Of T, Boolean)), Type())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AdvancedSceneManager.Editor.ScenePropertyDrawer.ObjectField(Of T)(UnityEngine.Rect, T, System.Func(Of UnityEngine.Object, System.ValueTuple(Of T, System.Boolean)), System.Type())
  name.vb: ObjectField(Of T)(Rect, T, Func(Of Object, (obj As T, didConvert As Boolean)(Of T, Boolean)), Type())
references:
- uid: AdvancedSceneManager.Editor
  commentId: N:AdvancedSceneManager.Editor
  name: AdvancedSceneManager.Editor
  nameWithType: AdvancedSceneManager.Editor
  fullName: AdvancedSceneManager.Editor
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: UnityEditor.GUIDrawer
  commentId: T:UnityEditor.GUIDrawer
  parent: UnityEditor
  isExternal: true
  name: GUIDrawer
  nameWithType: GUIDrawer
  fullName: UnityEditor.GUIDrawer
- uid: UnityEditor.PropertyDrawer
  commentId: T:UnityEditor.PropertyDrawer
  parent: UnityEditor
  isExternal: true
  name: PropertyDrawer
  nameWithType: PropertyDrawer
  fullName: UnityEditor.PropertyDrawer
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: UnityEditor
  commentId: N:UnityEditor
  isExternal: true
  name: UnityEditor
  nameWithType: UnityEditor
  fullName: UnityEditor
- uid: UnityEditor.PropertyDrawer.OnGUI(UnityEngine.Rect,UnityEditor.SerializedProperty,UnityEngine.GUIContent)
  commentId: M:UnityEditor.PropertyDrawer.OnGUI(UnityEngine.Rect,UnityEditor.SerializedProperty,UnityEngine.GUIContent)
  parent: UnityEditor.PropertyDrawer
  isExternal: true
  name: OnGUI(Rect, SerializedProperty, GUIContent)
  nameWithType: PropertyDrawer.OnGUI(Rect, SerializedProperty, GUIContent)
  fullName: UnityEditor.PropertyDrawer.OnGUI(UnityEngine.Rect, UnityEditor.SerializedProperty, UnityEngine.GUIContent)
  spec.csharp:
  - uid: UnityEditor.PropertyDrawer.OnGUI(UnityEngine.Rect,UnityEditor.SerializedProperty,UnityEngine.GUIContent)
    name: OnGUI
    nameWithType: PropertyDrawer.OnGUI
    fullName: UnityEditor.PropertyDrawer.OnGUI
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: UnityEngine.Rect
    name: Rect
    nameWithType: Rect
    fullName: UnityEngine.Rect
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: UnityEditor.SerializedProperty
    name: SerializedProperty
    nameWithType: SerializedProperty
    fullName: UnityEditor.SerializedProperty
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: UnityEngine.GUIContent
    name: GUIContent
    nameWithType: GUIContent
    fullName: UnityEngine.GUIContent
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: UnityEditor.PropertyDrawer.OnGUI(UnityEngine.Rect,UnityEditor.SerializedProperty,UnityEngine.GUIContent)
    name: OnGUI
    nameWithType: PropertyDrawer.OnGUI
    fullName: UnityEditor.PropertyDrawer.OnGUI
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: UnityEngine.Rect
    name: Rect
    nameWithType: Rect
    fullName: UnityEngine.Rect
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: UnityEditor.SerializedProperty
    name: SerializedProperty
    nameWithType: SerializedProperty
    fullName: UnityEditor.SerializedProperty
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: UnityEngine.GUIContent
    name: GUIContent
    nameWithType: GUIContent
    fullName: UnityEngine.GUIContent
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: AdvancedSceneManager.Editor.ScenePropertyDrawer.OnGUI*
  commentId: Overload:AdvancedSceneManager.Editor.ScenePropertyDrawer.OnGUI
  name: OnGUI
  nameWithType: ScenePropertyDrawer.OnGUI
  fullName: AdvancedSceneManager.Editor.ScenePropertyDrawer.OnGUI
- uid: UnityEngine.Rect
  commentId: T:UnityEngine.Rect
  parent: UnityEngine
  isExternal: true
  name: Rect
  nameWithType: Rect
  fullName: UnityEngine.Rect
- uid: UnityEditor.SerializedProperty
  commentId: T:UnityEditor.SerializedProperty
  parent: UnityEditor
  isExternal: true
  name: SerializedProperty
  nameWithType: SerializedProperty
  fullName: UnityEditor.SerializedProperty
- uid: UnityEngine.GUIContent
  commentId: T:UnityEngine.GUIContent
  parent: UnityEngine
  isExternal: true
  name: GUIContent
  nameWithType: GUIContent
  fullName: UnityEngine.GUIContent
- uid: UnityEngine
  commentId: N:UnityEngine
  isExternal: true
  name: UnityEngine
  nameWithType: UnityEngine
  fullName: UnityEngine
- uid: AdvancedSceneManager.Editor.ScenePropertyDrawer.ObjectField*
  commentId: Overload:AdvancedSceneManager.Editor.ScenePropertyDrawer.ObjectField
  name: ObjectField
  nameWithType: ScenePropertyDrawer.ObjectField
  fullName: AdvancedSceneManager.Editor.ScenePropertyDrawer.ObjectField
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Func{UnityEngine.Object,System.ValueTuple{{T},System.Boolean}}
  commentId: T:System.Func{UnityEngine.Object,System.ValueTuple{``0,System.Boolean}}
  parent: System
  definition: System.Func`2
  name: Func<Object, (T1, T2)<T, Boolean>>
  nameWithType: Func<Object, (T1, T2)<T, Boolean>>
  fullName: System.Func<UnityEngine.Object, System.ValueTuple<T, System.Boolean>>
  nameWithType.vb: Func(Of Object, (T1, T2)(Of T, Boolean))
  fullName.vb: System.Func(Of UnityEngine.Object, System.ValueTuple(Of T, System.Boolean))
  name.vb: Func(Of Object, (T1, T2)(Of T, Boolean))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: UnityEngine.Object
    name: Object
    nameWithType: Object
    fullName: UnityEngine.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: UnityEngine.Object
    name: Object
    nameWithType: Object
    fullName: UnityEngine.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Type[]
  isExternal: true
  name: Type[]
  nameWithType: Type[]
  fullName: System.Type[]
  nameWithType.vb: Type()
  fullName.vb: System.Type()
  name.vb: Type()
  spec.csharp:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
