### YamlMime:ManagedReference
items:
- uid: AdvancedSceneManager.Utility.SerializableDictionary`2
  commentId: T:AdvancedSceneManager.Utility.SerializableDictionary`2
  id: SerializableDictionary`2
  parent: AdvancedSceneManager.Utility
  children:
  - AdvancedSceneManager.Utility.SerializableDictionary`2.keys
  - AdvancedSceneManager.Utility.SerializableDictionary`2.OnAfterDeserialize
  - AdvancedSceneManager.Utility.SerializableDictionary`2.OnBeforeSerialize
  - AdvancedSceneManager.Utility.SerializableDictionary`2.throwOnDeserializeWhenKeyValueMismatch
  - AdvancedSceneManager.Utility.SerializableDictionary`2.values
  langs:
  - csharp
  - vb
  name: SerializableDictionary<TKey, TValue>
  nameWithType: SerializableDictionary<TKey, TValue>
  fullName: AdvancedSceneManager.Utility.SerializableDictionary<TKey, TValue>
  type: Class
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Utility/SerializableDictionary.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: SerializableDictionary
    path: ../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Utility/SerializableDictionary.cs
    startLine: 15
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Utility
  summary: A serializable dictionary.
  remarks: Older unity versions might need a wrapper class, since unity does not support serializing generic types. Don&apos;t forget <xref href="System.SerializableAttribute" data-throw-if-not-resolved="false"></xref> on wrapper!
  example: []
  syntax:
    content: >-
      [Serializable]

      public class SerializableDictionary<TKey, TValue> : Dictionary<TKey, TValue>, IDictionary<TKey, TValue>, ICollection<KeyValuePair<TKey, TValue>>, IReadOnlyDictionary<TKey, TValue>, IReadOnlyCollection<KeyValuePair<TKey, TValue>>, IEnumerable<KeyValuePair<TKey, TValue>>, IDictionary, ICollection, IEnumerable, IDeserializationCallback, ISerializable, ISerializationCallbackReceiver
    typeParameters:
    - id: TKey
    - id: TValue
    content.vb: >-
      <Serializable>

      Public Class SerializableDictionary(Of TKey, TValue)
          Inherits Dictionary(Of TKey, TValue)
          Implements IDictionary(Of TKey, TValue), ICollection(Of KeyValuePair(Of TKey, TValue)), IReadOnlyDictionary(Of TKey, TValue), IReadOnlyCollection(Of KeyValuePair(Of TKey, TValue)), IEnumerable(Of KeyValuePair(Of TKey, TValue)), IDictionary, ICollection, IEnumerable, IDeserializationCallback, ISerializable, ISerializationCallbackReceiver
  inheritance:
  - System.Object
  - System.Collections.Generic.Dictionary{{TKey},{TValue}}
  derivedClasses:
  - AdvancedSceneManager.Models.TagList
  - AdvancedSceneManager.Utility.SerializableStringBoolDict
  extensionMethods:
  - System.Collections.Generic.Dictionary{`0,`1}.AdvancedSceneManager.Utility.DictionaryUtility.WithNullKey``2({TKey})
  - System.Collections.Generic.Dictionary{`0,`1}.AdvancedSceneManager.Utility.DictionaryUtility.Set``2({TKey},{TValue})
  - System.Collections.Generic.Dictionary{`0,`1}.AdvancedSceneManager.Utility.DictionaryUtility.EnsureAdded``2({TKey})
  - System.Collections.Generic.Dictionary{`0,`1}.AdvancedSceneManager.Utility.DictionaryUtility.Add``2({TKey},{TValue})
  - System.Collections.Generic.Dictionary{`0,`1}.AdvancedSceneManager.Utility.DictionaryUtility.GetValue``2({TKey},{TValue})
  - System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}}.AdvancedSceneManager.Editor.Utility.ListUtility.ForEach``1(System.Action{System.Collections.Generic.KeyValuePair{{TKey},{TValue}},System.Int32})
  - System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}}.AdvancedSceneManager.Editor.Utility.ListUtility.Flatten``1(System.Func{System.Collections.Generic.KeyValuePair{{TKey},{TValue}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}})
  - System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}}.AdvancedSceneManager.Editor.Utility.ListUtility.Except``1(System.Collections.Generic.KeyValuePair{{TKey},{TValue}})
  - System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}}.AdvancedSceneManager.Editor.Utility.ListUtility.GroupConsecutive``1(System.Func{System.Collections.Generic.KeyValuePair{{TKey},{TValue}},System.Collections.Generic.KeyValuePair{{TKey},{TValue}},System.Boolean})
  attributes:
  - type: System.SerializableAttribute
    ctor: System.SerializableAttribute.#ctor
    arguments: []
  nameWithType.vb: SerializableDictionary(Of TKey, TValue)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: AdvancedSceneManager.Utility.SerializableDictionary(Of TKey, TValue)
  name.vb: SerializableDictionary(Of TKey, TValue)
- uid: AdvancedSceneManager.Utility.SerializableDictionary`2.throwOnDeserializeWhenKeyValueMismatch
  commentId: P:AdvancedSceneManager.Utility.SerializableDictionary`2.throwOnDeserializeWhenKeyValueMismatch
  id: throwOnDeserializeWhenKeyValueMismatch
  parent: AdvancedSceneManager.Utility.SerializableDictionary`2
  langs:
  - csharp
  - vb
  name: throwOnDeserializeWhenKeyValueMismatch
  nameWithType: SerializableDictionary<TKey, TValue>.throwOnDeserializeWhenKeyValueMismatch
  fullName: AdvancedSceneManager.Utility.SerializableDictionary<TKey, TValue>.throwOnDeserializeWhenKeyValueMismatch
  type: Property
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Utility/SerializableDictionary.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: throwOnDeserializeWhenKeyValueMismatch
    path: ../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Utility/SerializableDictionary.cs
    startLine: 22
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Utility
  syntax:
    content: public bool throwOnDeserializeWhenKeyValueMismatch { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property throwOnDeserializeWhenKeyValueMismatch As Boolean
  overload: AdvancedSceneManager.Utility.SerializableDictionary`2.throwOnDeserializeWhenKeyValueMismatch*
  nameWithType.vb: SerializableDictionary(Of TKey, TValue).throwOnDeserializeWhenKeyValueMismatch
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: AdvancedSceneManager.Utility.SerializableDictionary(Of TKey, TValue).throwOnDeserializeWhenKeyValueMismatch
- uid: AdvancedSceneManager.Utility.SerializableDictionary`2.keys
  commentId: F:AdvancedSceneManager.Utility.SerializableDictionary`2.keys
  id: keys
  parent: AdvancedSceneManager.Utility.SerializableDictionary`2
  langs:
  - csharp
  - vb
  name: keys
  nameWithType: SerializableDictionary<TKey, TValue>.keys
  fullName: AdvancedSceneManager.Utility.SerializableDictionary<TKey, TValue>.keys
  type: Field
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Utility/SerializableDictionary.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: keys
    path: ../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Utility/SerializableDictionary.cs
    startLine: 29
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Utility
  syntax:
    content: >-
      [SerializeField]

      protected List<TKey> keys
    return:
      type: System.Collections.Generic.List{{TKey}}
    content.vb: >-
      <SerializeField>

      Protected keys As List(Of TKey)
  attributes:
  - type: UnityEngine.SerializeField
    ctor: UnityEngine.SerializeField.#ctor
    arguments: []
  nameWithType.vb: SerializableDictionary(Of TKey, TValue).keys
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: AdvancedSceneManager.Utility.SerializableDictionary(Of TKey, TValue).keys
- uid: AdvancedSceneManager.Utility.SerializableDictionary`2.values
  commentId: F:AdvancedSceneManager.Utility.SerializableDictionary`2.values
  id: values
  parent: AdvancedSceneManager.Utility.SerializableDictionary`2
  langs:
  - csharp
  - vb
  name: values
  nameWithType: SerializableDictionary<TKey, TValue>.values
  fullName: AdvancedSceneManager.Utility.SerializableDictionary<TKey, TValue>.values
  type: Field
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Utility/SerializableDictionary.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: values
    path: ../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Utility/SerializableDictionary.cs
    startLine: 32
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Utility
  syntax:
    content: >-
      [SerializeField]

      protected List<TValue> values
    return:
      type: System.Collections.Generic.List{{TValue}}
    content.vb: >-
      <SerializeField>

      Protected values As List(Of TValue)
  attributes:
  - type: UnityEngine.SerializeField
    ctor: UnityEngine.SerializeField.#ctor
    arguments: []
  nameWithType.vb: SerializableDictionary(Of TKey, TValue).values
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: AdvancedSceneManager.Utility.SerializableDictionary(Of TKey, TValue).values
- uid: AdvancedSceneManager.Utility.SerializableDictionary`2.OnBeforeSerialize
  commentId: M:AdvancedSceneManager.Utility.SerializableDictionary`2.OnBeforeSerialize
  id: OnBeforeSerialize
  parent: AdvancedSceneManager.Utility.SerializableDictionary`2
  langs:
  - csharp
  - vb
  name: OnBeforeSerialize()
  nameWithType: SerializableDictionary<TKey, TValue>.OnBeforeSerialize()
  fullName: AdvancedSceneManager.Utility.SerializableDictionary<TKey, TValue>.OnBeforeSerialize()
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Utility/SerializableDictionary.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: OnBeforeSerialize
    path: ../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Utility/SerializableDictionary.cs
    startLine: 34
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Utility
  syntax:
    content: public virtual void OnBeforeSerialize()
    content.vb: Public Overridable Sub OnBeforeSerialize
  overload: AdvancedSceneManager.Utility.SerializableDictionary`2.OnBeforeSerialize*
  nameWithType.vb: SerializableDictionary(Of TKey, TValue).OnBeforeSerialize()
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: AdvancedSceneManager.Utility.SerializableDictionary(Of TKey, TValue).OnBeforeSerialize()
- uid: AdvancedSceneManager.Utility.SerializableDictionary`2.OnAfterDeserialize
  commentId: M:AdvancedSceneManager.Utility.SerializableDictionary`2.OnAfterDeserialize
  id: OnAfterDeserialize
  parent: AdvancedSceneManager.Utility.SerializableDictionary`2
  langs:
  - csharp
  - vb
  name: OnAfterDeserialize()
  nameWithType: SerializableDictionary<TKey, TValue>.OnAfterDeserialize()
  fullName: AdvancedSceneManager.Utility.SerializableDictionary<TKey, TValue>.OnAfterDeserialize()
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Utility/SerializableDictionary.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: OnAfterDeserialize
    path: ../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Utility/SerializableDictionary.cs
    startLine: 45
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Utility
  syntax:
    content: public virtual void OnAfterDeserialize()
    content.vb: Public Overridable Sub OnAfterDeserialize
  overload: AdvancedSceneManager.Utility.SerializableDictionary`2.OnAfterDeserialize*
  nameWithType.vb: SerializableDictionary(Of TKey, TValue).OnAfterDeserialize()
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: AdvancedSceneManager.Utility.SerializableDictionary(Of TKey, TValue).OnAfterDeserialize()
references:
- uid: System.SerializableAttribute
  commentId: T:System.SerializableAttribute
  parent: System
  isExternal: true
  name: SerializableAttribute
  nameWithType: SerializableAttribute
  fullName: System.SerializableAttribute
- uid: AdvancedSceneManager.Utility
  commentId: N:AdvancedSceneManager.Utility
  name: AdvancedSceneManager.Utility
  nameWithType: AdvancedSceneManager.Utility
  fullName: AdvancedSceneManager.Utility
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.Generic.Dictionary{{TKey},{TValue}}
  commentId: T:System.Collections.Generic.Dictionary{``0,``1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary{`0,`1}.AdvancedSceneManager.Utility.DictionaryUtility.WithNullKey``2({TKey})
  commentId: M:AdvancedSceneManager.Utility.DictionaryUtility.WithNullKey``2(System.Collections.Generic.Dictionary{``0,``1},``0)
  parent: AdvancedSceneManager.Utility.DictionaryUtility
  definition: AdvancedSceneManager.Utility.DictionaryUtility.WithNullKey``2(System.Collections.Generic.Dictionary{``0,``1},``0)
  name: WithNullKey<TKey, TValue>(TKey)
  nameWithType: DictionaryUtility.WithNullKey<TKey, TValue>(TKey)
  fullName: AdvancedSceneManager.Utility.DictionaryUtility.WithNullKey<TKey, TValue>(TKey)
  nameWithType.vb: DictionaryUtility.WithNullKey(Of TKey, TValue)(TKey)
  fullName.vb: AdvancedSceneManager.Utility.DictionaryUtility.WithNullKey(Of TKey, TValue)(TKey)
  name.vb: WithNullKey(Of TKey, TValue)(TKey)
  spec.csharp:
  - uid: AdvancedSceneManager.Utility.DictionaryUtility.WithNullKey``2(``0)
    name: WithNullKey<TKey, TValue>
    nameWithType: DictionaryUtility.WithNullKey<TKey, TValue>
    fullName: AdvancedSceneManager.Utility.DictionaryUtility.WithNullKey<TKey, TValue>
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AdvancedSceneManager.Utility.DictionaryUtility.WithNullKey``2(``0)
    name: WithNullKey(Of TKey, TValue)
    nameWithType: DictionaryUtility.WithNullKey(Of TKey, TValue)
    fullName: AdvancedSceneManager.Utility.DictionaryUtility.WithNullKey(Of TKey, TValue)
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary{`0,`1}.AdvancedSceneManager.Utility.DictionaryUtility.Set``2({TKey},{TValue})
  commentId: M:AdvancedSceneManager.Utility.DictionaryUtility.Set``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)
  parent: AdvancedSceneManager.Utility.DictionaryUtility
  definition: AdvancedSceneManager.Utility.DictionaryUtility.Set``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)
  name: Set<TKey, TValue>(TKey, TValue)
  nameWithType: DictionaryUtility.Set<TKey, TValue>(TKey, TValue)
  fullName: AdvancedSceneManager.Utility.DictionaryUtility.Set<TKey, TValue>(TKey, TValue)
  nameWithType.vb: DictionaryUtility.Set(Of TKey, TValue)(TKey, TValue)
  fullName.vb: AdvancedSceneManager.Utility.DictionaryUtility.Set(Of TKey, TValue)(TKey, TValue)
  name.vb: Set(Of TKey, TValue)(TKey, TValue)
  spec.csharp:
  - uid: AdvancedSceneManager.Utility.DictionaryUtility.Set``2(``0,``1)
    name: Set<TKey, TValue>
    nameWithType: DictionaryUtility.Set<TKey, TValue>
    fullName: AdvancedSceneManager.Utility.DictionaryUtility.Set<TKey, TValue>
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AdvancedSceneManager.Utility.DictionaryUtility.Set``2(``0,``1)
    name: Set(Of TKey, TValue)
    nameWithType: DictionaryUtility.Set(Of TKey, TValue)
    fullName: AdvancedSceneManager.Utility.DictionaryUtility.Set(Of TKey, TValue)
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary{`0,`1}.AdvancedSceneManager.Utility.DictionaryUtility.EnsureAdded``2({TKey})
  commentId: M:AdvancedSceneManager.Utility.DictionaryUtility.EnsureAdded``2(System.Collections.Generic.Dictionary{``0,``1},``0)
  parent: AdvancedSceneManager.Utility.DictionaryUtility
  definition: AdvancedSceneManager.Utility.DictionaryUtility.EnsureAdded``2(System.Collections.Generic.Dictionary{``0,``1},``0)
  name: EnsureAdded<TKey, TValue>(TKey)
  nameWithType: DictionaryUtility.EnsureAdded<TKey, TValue>(TKey)
  fullName: AdvancedSceneManager.Utility.DictionaryUtility.EnsureAdded<TKey, TValue>(TKey)
  nameWithType.vb: DictionaryUtility.EnsureAdded(Of TKey, TValue)(TKey)
  fullName.vb: AdvancedSceneManager.Utility.DictionaryUtility.EnsureAdded(Of TKey, TValue)(TKey)
  name.vb: EnsureAdded(Of TKey, TValue)(TKey)
  spec.csharp:
  - uid: AdvancedSceneManager.Utility.DictionaryUtility.EnsureAdded``2(``0)
    name: EnsureAdded<TKey, TValue>
    nameWithType: DictionaryUtility.EnsureAdded<TKey, TValue>
    fullName: AdvancedSceneManager.Utility.DictionaryUtility.EnsureAdded<TKey, TValue>
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AdvancedSceneManager.Utility.DictionaryUtility.EnsureAdded``2(``0)
    name: EnsureAdded(Of TKey, TValue)
    nameWithType: DictionaryUtility.EnsureAdded(Of TKey, TValue)
    fullName: AdvancedSceneManager.Utility.DictionaryUtility.EnsureAdded(Of TKey, TValue)
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary{`0,`1}.AdvancedSceneManager.Utility.DictionaryUtility.Add``2({TKey},{TValue})
  commentId: M:AdvancedSceneManager.Utility.DictionaryUtility.Add``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)
  parent: AdvancedSceneManager.Utility.DictionaryUtility
  definition: AdvancedSceneManager.Utility.DictionaryUtility.Add``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)
  name: Add<TKey, TValue>(TKey, TValue)
  nameWithType: DictionaryUtility.Add<TKey, TValue>(TKey, TValue)
  fullName: AdvancedSceneManager.Utility.DictionaryUtility.Add<TKey, TValue>(TKey, TValue)
  nameWithType.vb: DictionaryUtility.Add(Of TKey, TValue)(TKey, TValue)
  fullName.vb: AdvancedSceneManager.Utility.DictionaryUtility.Add(Of TKey, TValue)(TKey, TValue)
  name.vb: Add(Of TKey, TValue)(TKey, TValue)
  spec.csharp:
  - uid: AdvancedSceneManager.Utility.DictionaryUtility.Add``2(``0,``1)
    name: Add<TKey, TValue>
    nameWithType: DictionaryUtility.Add<TKey, TValue>
    fullName: AdvancedSceneManager.Utility.DictionaryUtility.Add<TKey, TValue>
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AdvancedSceneManager.Utility.DictionaryUtility.Add``2(``0,``1)
    name: Add(Of TKey, TValue)
    nameWithType: DictionaryUtility.Add(Of TKey, TValue)
    fullName: AdvancedSceneManager.Utility.DictionaryUtility.Add(Of TKey, TValue)
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary{`0,`1}.AdvancedSceneManager.Utility.DictionaryUtility.GetValue``2({TKey},{TValue})
  commentId: M:AdvancedSceneManager.Utility.DictionaryUtility.GetValue``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)
  parent: AdvancedSceneManager.Utility.DictionaryUtility
  definition: AdvancedSceneManager.Utility.DictionaryUtility.GetValue``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)
  name: GetValue<TKey, TValue>(TKey, TValue)
  nameWithType: DictionaryUtility.GetValue<TKey, TValue>(TKey, TValue)
  fullName: AdvancedSceneManager.Utility.DictionaryUtility.GetValue<TKey, TValue>(TKey, TValue)
  nameWithType.vb: DictionaryUtility.GetValue(Of TKey, TValue)(TKey, TValue)
  fullName.vb: AdvancedSceneManager.Utility.DictionaryUtility.GetValue(Of TKey, TValue)(TKey, TValue)
  name.vb: GetValue(Of TKey, TValue)(TKey, TValue)
  spec.csharp:
  - uid: AdvancedSceneManager.Utility.DictionaryUtility.GetValue``2(``0,``1)
    name: GetValue<TKey, TValue>
    nameWithType: DictionaryUtility.GetValue<TKey, TValue>
    fullName: AdvancedSceneManager.Utility.DictionaryUtility.GetValue<TKey, TValue>
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AdvancedSceneManager.Utility.DictionaryUtility.GetValue``2(``0,``1)
    name: GetValue(Of TKey, TValue)
    nameWithType: DictionaryUtility.GetValue(Of TKey, TValue)
    fullName: AdvancedSceneManager.Utility.DictionaryUtility.GetValue(Of TKey, TValue)
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}}.AdvancedSceneManager.Editor.Utility.ListUtility.ForEach``1(System.Action{System.Collections.Generic.KeyValuePair{{TKey},{TValue}},System.Int32})
  commentId: M:AdvancedSceneManager.Editor.Utility.ListUtility.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})
  parent: AdvancedSceneManager.Editor.Utility.ListUtility
  definition: AdvancedSceneManager.Editor.Utility.ListUtility.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})
  name: ForEach<KeyValuePair<TKey, TValue>>(Action<KeyValuePair<TKey, TValue>, Int32>)
  nameWithType: ListUtility.ForEach<KeyValuePair<TKey, TValue>>(Action<KeyValuePair<TKey, TValue>, Int32>)
  fullName: AdvancedSceneManager.Editor.Utility.ListUtility.ForEach<System.Collections.Generic.KeyValuePair<TKey, TValue>>(System.Action<System.Collections.Generic.KeyValuePair<TKey, TValue>, System.Int32>)
  nameWithType.vb: ListUtility.ForEach(Of KeyValuePair(Of TKey, TValue))(Action(Of KeyValuePair(Of TKey, TValue), Int32))
  fullName.vb: AdvancedSceneManager.Editor.Utility.ListUtility.ForEach(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue))(System.Action(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue), System.Int32))
  name.vb: ForEach(Of KeyValuePair(Of TKey, TValue))(Action(Of KeyValuePair(Of TKey, TValue), Int32))
  spec.csharp:
  - uid: AdvancedSceneManager.Editor.Utility.ListUtility.ForEach``1(System.Action{``0,System.Int32})
    name: ForEach<KeyValuePair<TKey, TValue>>
    nameWithType: ListUtility.ForEach<KeyValuePair<TKey, TValue>>
    fullName: AdvancedSceneManager.Editor.Utility.ListUtility.ForEach<System.Collections.Generic.KeyValuePair<TKey, TValue>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AdvancedSceneManager.Editor.Utility.ListUtility.ForEach``1(System.Action{``0,System.Int32})
    name: ForEach(Of KeyValuePair(Of TKey, TValue))
    nameWithType: ListUtility.ForEach(Of KeyValuePair(Of TKey, TValue))
    fullName: AdvancedSceneManager.Editor.Utility.ListUtility.ForEach(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}}.AdvancedSceneManager.Editor.Utility.ListUtility.Flatten``1(System.Func{System.Collections.Generic.KeyValuePair{{TKey},{TValue}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}})
  commentId: M:AdvancedSceneManager.Editor.Utility.ListUtility.Flatten``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}})
  parent: AdvancedSceneManager.Editor.Utility.ListUtility
  definition: AdvancedSceneManager.Editor.Utility.ListUtility.Flatten``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}})
  name: Flatten<KeyValuePair<TKey, TValue>>(Func<KeyValuePair<TKey, TValue>, IEnumerable<KeyValuePair<TKey, TValue>>>)
  nameWithType: ListUtility.Flatten<KeyValuePair<TKey, TValue>>(Func<KeyValuePair<TKey, TValue>, IEnumerable<KeyValuePair<TKey, TValue>>>)
  fullName: AdvancedSceneManager.Editor.Utility.ListUtility.Flatten<System.Collections.Generic.KeyValuePair<TKey, TValue>>(System.Func<System.Collections.Generic.KeyValuePair<TKey, TValue>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>>>)
  nameWithType.vb: ListUtility.Flatten(Of KeyValuePair(Of TKey, TValue))(Func(Of KeyValuePair(Of TKey, TValue), IEnumerable(Of KeyValuePair(Of TKey, TValue))))
  fullName.vb: AdvancedSceneManager.Editor.Utility.ListUtility.Flatten(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue))(System.Func(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue), System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue))))
  name.vb: Flatten(Of KeyValuePair(Of TKey, TValue))(Func(Of KeyValuePair(Of TKey, TValue), IEnumerable(Of KeyValuePair(Of TKey, TValue))))
  spec.csharp:
  - uid: AdvancedSceneManager.Editor.Utility.ListUtility.Flatten``1(System.Func{``0,System.Collections.Generic.IEnumerable{``0}})
    name: Flatten<KeyValuePair<TKey, TValue>>
    nameWithType: ListUtility.Flatten<KeyValuePair<TKey, TValue>>
    fullName: AdvancedSceneManager.Editor.Utility.ListUtility.Flatten<System.Collections.Generic.KeyValuePair<TKey, TValue>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AdvancedSceneManager.Editor.Utility.ListUtility.Flatten``1(System.Func{``0,System.Collections.Generic.IEnumerable{``0}})
    name: Flatten(Of KeyValuePair(Of TKey, TValue))
    nameWithType: ListUtility.Flatten(Of KeyValuePair(Of TKey, TValue))
    fullName: AdvancedSceneManager.Editor.Utility.ListUtility.Flatten(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}}.AdvancedSceneManager.Editor.Utility.ListUtility.Except``1(System.Collections.Generic.KeyValuePair{{TKey},{TValue}})
  commentId: M:AdvancedSceneManager.Editor.Utility.ListUtility.Except``1(System.Collections.Generic.IEnumerable{``0},``0)
  parent: AdvancedSceneManager.Editor.Utility.ListUtility
  definition: AdvancedSceneManager.Editor.Utility.ListUtility.Except``1(System.Collections.Generic.IEnumerable{``0},``0)
  name: Except<KeyValuePair<TKey, TValue>>(KeyValuePair<TKey, TValue>)
  nameWithType: ListUtility.Except<KeyValuePair<TKey, TValue>>(KeyValuePair<TKey, TValue>)
  fullName: AdvancedSceneManager.Editor.Utility.ListUtility.Except<System.Collections.Generic.KeyValuePair<TKey, TValue>>(System.Collections.Generic.KeyValuePair<TKey, TValue>)
  nameWithType.vb: ListUtility.Except(Of KeyValuePair(Of TKey, TValue))(KeyValuePair(Of TKey, TValue))
  fullName.vb: AdvancedSceneManager.Editor.Utility.ListUtility.Except(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue))(System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  name.vb: Except(Of KeyValuePair(Of TKey, TValue))(KeyValuePair(Of TKey, TValue))
  spec.csharp:
  - uid: AdvancedSceneManager.Editor.Utility.ListUtility.Except``1(``0)
    name: Except<KeyValuePair<TKey, TValue>>
    nameWithType: ListUtility.Except<KeyValuePair<TKey, TValue>>
    fullName: AdvancedSceneManager.Editor.Utility.ListUtility.Except<System.Collections.Generic.KeyValuePair<TKey, TValue>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AdvancedSceneManager.Editor.Utility.ListUtility.Except``1(``0)
    name: Except(Of KeyValuePair(Of TKey, TValue))
    nameWithType: ListUtility.Except(Of KeyValuePair(Of TKey, TValue))
    fullName: AdvancedSceneManager.Editor.Utility.ListUtility.Except(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}}.AdvancedSceneManager.Editor.Utility.ListUtility.GroupConsecutive``1(System.Func{System.Collections.Generic.KeyValuePair{{TKey},{TValue}},System.Collections.Generic.KeyValuePair{{TKey},{TValue}},System.Boolean})
  commentId: M:AdvancedSceneManager.Editor.Utility.ListUtility.GroupConsecutive``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})
  parent: AdvancedSceneManager.Editor.Utility.ListUtility
  definition: AdvancedSceneManager.Editor.Utility.ListUtility.GroupConsecutive``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})
  name: GroupConsecutive<KeyValuePair<TKey, TValue>>(Func<KeyValuePair<TKey, TValue>, KeyValuePair<TKey, TValue>, Boolean>)
  nameWithType: ListUtility.GroupConsecutive<KeyValuePair<TKey, TValue>>(Func<KeyValuePair<TKey, TValue>, KeyValuePair<TKey, TValue>, Boolean>)
  fullName: AdvancedSceneManager.Editor.Utility.ListUtility.GroupConsecutive<System.Collections.Generic.KeyValuePair<TKey, TValue>>(System.Func<System.Collections.Generic.KeyValuePair<TKey, TValue>, System.Collections.Generic.KeyValuePair<TKey, TValue>, System.Boolean>)
  nameWithType.vb: ListUtility.GroupConsecutive(Of KeyValuePair(Of TKey, TValue))(Func(Of KeyValuePair(Of TKey, TValue), KeyValuePair(Of TKey, TValue), Boolean))
  fullName.vb: AdvancedSceneManager.Editor.Utility.ListUtility.GroupConsecutive(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue))(System.Func(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue), System.Collections.Generic.KeyValuePair(Of TKey, TValue), System.Boolean))
  name.vb: GroupConsecutive(Of KeyValuePair(Of TKey, TValue))(Func(Of KeyValuePair(Of TKey, TValue), KeyValuePair(Of TKey, TValue), Boolean))
  spec.csharp:
  - uid: AdvancedSceneManager.Editor.Utility.ListUtility.GroupConsecutive``1(System.Func{``0,``0,System.Boolean})
    name: GroupConsecutive<KeyValuePair<TKey, TValue>>
    nameWithType: ListUtility.GroupConsecutive<KeyValuePair<TKey, TValue>>
    fullName: AdvancedSceneManager.Editor.Utility.ListUtility.GroupConsecutive<System.Collections.Generic.KeyValuePair<TKey, TValue>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AdvancedSceneManager.Editor.Utility.ListUtility.GroupConsecutive``1(System.Func{``0,``0,System.Boolean})
    name: GroupConsecutive(Of KeyValuePair(Of TKey, TValue))
    nameWithType: ListUtility.GroupConsecutive(Of KeyValuePair(Of TKey, TValue))
    fullName: AdvancedSceneManager.Editor.Utility.ListUtility.GroupConsecutive(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: AdvancedSceneManager.Utility.DictionaryUtility.WithNullKey``2(System.Collections.Generic.Dictionary{``0,``1},``0)
  commentId: M:AdvancedSceneManager.Utility.DictionaryUtility.WithNullKey``2(System.Collections.Generic.Dictionary{``0,``1},``0)
  isExternal: true
  name: WithNullKey<TKey, TValue>(Dictionary<TKey, TValue>, TKey)
  nameWithType: DictionaryUtility.WithNullKey<TKey, TValue>(Dictionary<TKey, TValue>, TKey)
  fullName: AdvancedSceneManager.Utility.DictionaryUtility.WithNullKey<TKey, TValue>(System.Collections.Generic.Dictionary<TKey, TValue>, TKey)
  nameWithType.vb: DictionaryUtility.WithNullKey(Of TKey, TValue)(Dictionary(Of TKey, TValue), TKey)
  fullName.vb: AdvancedSceneManager.Utility.DictionaryUtility.WithNullKey(Of TKey, TValue)(System.Collections.Generic.Dictionary(Of TKey, TValue), TKey)
  name.vb: WithNullKey(Of TKey, TValue)(Dictionary(Of TKey, TValue), TKey)
  spec.csharp:
  - uid: AdvancedSceneManager.Utility.DictionaryUtility.WithNullKey``2(System.Collections.Generic.Dictionary{``0,``1},``0)
    name: WithNullKey<TKey, TValue>
    nameWithType: DictionaryUtility.WithNullKey<TKey, TValue>
    fullName: AdvancedSceneManager.Utility.DictionaryUtility.WithNullKey<TKey, TValue>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AdvancedSceneManager.Utility.DictionaryUtility.WithNullKey``2(System.Collections.Generic.Dictionary{``0,``1},``0)
    name: WithNullKey(Of TKey, TValue)
    nameWithType: DictionaryUtility.WithNullKey(Of TKey, TValue)
    fullName: AdvancedSceneManager.Utility.DictionaryUtility.WithNullKey(Of TKey, TValue)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: AdvancedSceneManager.Utility.DictionaryUtility
  commentId: T:AdvancedSceneManager.Utility.DictionaryUtility
  parent: AdvancedSceneManager.Utility
  name: DictionaryUtility
  nameWithType: DictionaryUtility
  fullName: AdvancedSceneManager.Utility.DictionaryUtility
- uid: AdvancedSceneManager.Utility.DictionaryUtility.Set``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)
  commentId: M:AdvancedSceneManager.Utility.DictionaryUtility.Set``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)
  isExternal: true
  name: Set<TKey, TValue>(Dictionary<TKey, TValue>, TKey, TValue)
  nameWithType: DictionaryUtility.Set<TKey, TValue>(Dictionary<TKey, TValue>, TKey, TValue)
  fullName: AdvancedSceneManager.Utility.DictionaryUtility.Set<TKey, TValue>(System.Collections.Generic.Dictionary<TKey, TValue>, TKey, TValue)
  nameWithType.vb: DictionaryUtility.Set(Of TKey, TValue)(Dictionary(Of TKey, TValue), TKey, TValue)
  fullName.vb: AdvancedSceneManager.Utility.DictionaryUtility.Set(Of TKey, TValue)(System.Collections.Generic.Dictionary(Of TKey, TValue), TKey, TValue)
  name.vb: Set(Of TKey, TValue)(Dictionary(Of TKey, TValue), TKey, TValue)
  spec.csharp:
  - uid: AdvancedSceneManager.Utility.DictionaryUtility.Set``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)
    name: Set<TKey, TValue>
    nameWithType: DictionaryUtility.Set<TKey, TValue>
    fullName: AdvancedSceneManager.Utility.DictionaryUtility.Set<TKey, TValue>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AdvancedSceneManager.Utility.DictionaryUtility.Set``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)
    name: Set(Of TKey, TValue)
    nameWithType: DictionaryUtility.Set(Of TKey, TValue)
    fullName: AdvancedSceneManager.Utility.DictionaryUtility.Set(Of TKey, TValue)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: AdvancedSceneManager.Utility.DictionaryUtility.EnsureAdded``2(System.Collections.Generic.Dictionary{``0,``1},``0)
  commentId: M:AdvancedSceneManager.Utility.DictionaryUtility.EnsureAdded``2(System.Collections.Generic.Dictionary{``0,``1},``0)
  isExternal: true
  name: EnsureAdded<TKey, TValue>(Dictionary<TKey, TValue>, TKey)
  nameWithType: DictionaryUtility.EnsureAdded<TKey, TValue>(Dictionary<TKey, TValue>, TKey)
  fullName: AdvancedSceneManager.Utility.DictionaryUtility.EnsureAdded<TKey, TValue>(System.Collections.Generic.Dictionary<TKey, TValue>, TKey)
  nameWithType.vb: DictionaryUtility.EnsureAdded(Of TKey, TValue)(Dictionary(Of TKey, TValue), TKey)
  fullName.vb: AdvancedSceneManager.Utility.DictionaryUtility.EnsureAdded(Of TKey, TValue)(System.Collections.Generic.Dictionary(Of TKey, TValue), TKey)
  name.vb: EnsureAdded(Of TKey, TValue)(Dictionary(Of TKey, TValue), TKey)
  spec.csharp:
  - uid: AdvancedSceneManager.Utility.DictionaryUtility.EnsureAdded``2(System.Collections.Generic.Dictionary{``0,``1},``0)
    name: EnsureAdded<TKey, TValue>
    nameWithType: DictionaryUtility.EnsureAdded<TKey, TValue>
    fullName: AdvancedSceneManager.Utility.DictionaryUtility.EnsureAdded<TKey, TValue>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AdvancedSceneManager.Utility.DictionaryUtility.EnsureAdded``2(System.Collections.Generic.Dictionary{``0,``1},``0)
    name: EnsureAdded(Of TKey, TValue)
    nameWithType: DictionaryUtility.EnsureAdded(Of TKey, TValue)
    fullName: AdvancedSceneManager.Utility.DictionaryUtility.EnsureAdded(Of TKey, TValue)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: AdvancedSceneManager.Utility.DictionaryUtility.Add``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)
  commentId: M:AdvancedSceneManager.Utility.DictionaryUtility.Add``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)
  isExternal: true
  name: Add<TKey, TValue>(Dictionary<TKey, TValue>, TKey, TValue)
  nameWithType: DictionaryUtility.Add<TKey, TValue>(Dictionary<TKey, TValue>, TKey, TValue)
  fullName: AdvancedSceneManager.Utility.DictionaryUtility.Add<TKey, TValue>(System.Collections.Generic.Dictionary<TKey, TValue>, TKey, TValue)
  nameWithType.vb: DictionaryUtility.Add(Of TKey, TValue)(Dictionary(Of TKey, TValue), TKey, TValue)
  fullName.vb: AdvancedSceneManager.Utility.DictionaryUtility.Add(Of TKey, TValue)(System.Collections.Generic.Dictionary(Of TKey, TValue), TKey, TValue)
  name.vb: Add(Of TKey, TValue)(Dictionary(Of TKey, TValue), TKey, TValue)
  spec.csharp:
  - uid: AdvancedSceneManager.Utility.DictionaryUtility.Add``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)
    name: Add<TKey, TValue>
    nameWithType: DictionaryUtility.Add<TKey, TValue>
    fullName: AdvancedSceneManager.Utility.DictionaryUtility.Add<TKey, TValue>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AdvancedSceneManager.Utility.DictionaryUtility.Add``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)
    name: Add(Of TKey, TValue)
    nameWithType: DictionaryUtility.Add(Of TKey, TValue)
    fullName: AdvancedSceneManager.Utility.DictionaryUtility.Add(Of TKey, TValue)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: AdvancedSceneManager.Utility.DictionaryUtility.GetValue``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)
  commentId: M:AdvancedSceneManager.Utility.DictionaryUtility.GetValue``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)
  isExternal: true
  name: GetValue<TKey, TValue>(Dictionary<TKey, TValue>, TKey, TValue)
  nameWithType: DictionaryUtility.GetValue<TKey, TValue>(Dictionary<TKey, TValue>, TKey, TValue)
  fullName: AdvancedSceneManager.Utility.DictionaryUtility.GetValue<TKey, TValue>(System.Collections.Generic.Dictionary<TKey, TValue>, TKey, TValue)
  nameWithType.vb: DictionaryUtility.GetValue(Of TKey, TValue)(Dictionary(Of TKey, TValue), TKey, TValue)
  fullName.vb: AdvancedSceneManager.Utility.DictionaryUtility.GetValue(Of TKey, TValue)(System.Collections.Generic.Dictionary(Of TKey, TValue), TKey, TValue)
  name.vb: GetValue(Of TKey, TValue)(Dictionary(Of TKey, TValue), TKey, TValue)
  spec.csharp:
  - uid: AdvancedSceneManager.Utility.DictionaryUtility.GetValue``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)
    name: GetValue<TKey, TValue>
    nameWithType: DictionaryUtility.GetValue<TKey, TValue>
    fullName: AdvancedSceneManager.Utility.DictionaryUtility.GetValue<TKey, TValue>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AdvancedSceneManager.Utility.DictionaryUtility.GetValue``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)
    name: GetValue(Of TKey, TValue)
    nameWithType: DictionaryUtility.GetValue(Of TKey, TValue)
    fullName: AdvancedSceneManager.Utility.DictionaryUtility.GetValue(Of TKey, TValue)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: AdvancedSceneManager.Editor.Utility.ListUtility.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})
  commentId: M:AdvancedSceneManager.Editor.Utility.ListUtility.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})
  isExternal: true
  name: ForEach<T>(IEnumerable<T>, Action<T, Int32>)
  nameWithType: ListUtility.ForEach<T>(IEnumerable<T>, Action<T, Int32>)
  fullName: AdvancedSceneManager.Editor.Utility.ListUtility.ForEach<T>(System.Collections.Generic.IEnumerable<T>, System.Action<T, System.Int32>)
  nameWithType.vb: ListUtility.ForEach(Of T)(IEnumerable(Of T), Action(Of T, Int32))
  fullName.vb: AdvancedSceneManager.Editor.Utility.ListUtility.ForEach(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Action(Of T, System.Int32))
  name.vb: ForEach(Of T)(IEnumerable(Of T), Action(Of T, Int32))
  spec.csharp:
  - uid: AdvancedSceneManager.Editor.Utility.ListUtility.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})
    name: ForEach<T>
    nameWithType: ListUtility.ForEach<T>
    fullName: AdvancedSceneManager.Editor.Utility.ListUtility.ForEach<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AdvancedSceneManager.Editor.Utility.ListUtility.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})
    name: ForEach(Of T)
    nameWithType: ListUtility.ForEach(Of T)
    fullName: AdvancedSceneManager.Editor.Utility.ListUtility.ForEach(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: AdvancedSceneManager.Editor.Utility.ListUtility
  commentId: T:AdvancedSceneManager.Editor.Utility.ListUtility
  parent: AdvancedSceneManager.Editor.Utility
  name: ListUtility
  nameWithType: ListUtility
  fullName: AdvancedSceneManager.Editor.Utility.ListUtility
- uid: AdvancedSceneManager.Editor.Utility.ListUtility.Flatten``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}})
  commentId: M:AdvancedSceneManager.Editor.Utility.ListUtility.Flatten``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}})
  isExternal: true
  name: Flatten<T>(IEnumerable<T>, Func<T, IEnumerable<T>>)
  nameWithType: ListUtility.Flatten<T>(IEnumerable<T>, Func<T, IEnumerable<T>>)
  fullName: AdvancedSceneManager.Editor.Utility.ListUtility.Flatten<T>(System.Collections.Generic.IEnumerable<T>, System.Func<T, System.Collections.Generic.IEnumerable<T>>)
  nameWithType.vb: ListUtility.Flatten(Of T)(IEnumerable(Of T), Func(Of T, IEnumerable(Of T)))
  fullName.vb: AdvancedSceneManager.Editor.Utility.ListUtility.Flatten(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, System.Collections.Generic.IEnumerable(Of T)))
  name.vb: Flatten(Of T)(IEnumerable(Of T), Func(Of T, IEnumerable(Of T)))
  spec.csharp:
  - uid: AdvancedSceneManager.Editor.Utility.ListUtility.Flatten``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}})
    name: Flatten<T>
    nameWithType: ListUtility.Flatten<T>
    fullName: AdvancedSceneManager.Editor.Utility.ListUtility.Flatten<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AdvancedSceneManager.Editor.Utility.ListUtility.Flatten``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}})
    name: Flatten(Of T)
    nameWithType: ListUtility.Flatten(Of T)
    fullName: AdvancedSceneManager.Editor.Utility.ListUtility.Flatten(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: AdvancedSceneManager.Editor.Utility.ListUtility.Except``1(System.Collections.Generic.IEnumerable{``0},``0)
  commentId: M:AdvancedSceneManager.Editor.Utility.ListUtility.Except``1(System.Collections.Generic.IEnumerable{``0},``0)
  isExternal: true
  name: Except<T>(IEnumerable<T>, T)
  nameWithType: ListUtility.Except<T>(IEnumerable<T>, T)
  fullName: AdvancedSceneManager.Editor.Utility.ListUtility.Except<T>(System.Collections.Generic.IEnumerable<T>, T)
  nameWithType.vb: ListUtility.Except(Of T)(IEnumerable(Of T), T)
  fullName.vb: AdvancedSceneManager.Editor.Utility.ListUtility.Except(Of T)(System.Collections.Generic.IEnumerable(Of T), T)
  name.vb: Except(Of T)(IEnumerable(Of T), T)
  spec.csharp:
  - uid: AdvancedSceneManager.Editor.Utility.ListUtility.Except``1(System.Collections.Generic.IEnumerable{``0},``0)
    name: Except<T>
    nameWithType: ListUtility.Except<T>
    fullName: AdvancedSceneManager.Editor.Utility.ListUtility.Except<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AdvancedSceneManager.Editor.Utility.ListUtility.Except``1(System.Collections.Generic.IEnumerable{``0},``0)
    name: Except(Of T)
    nameWithType: ListUtility.Except(Of T)
    fullName: AdvancedSceneManager.Editor.Utility.ListUtility.Except(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: AdvancedSceneManager.Editor.Utility.ListUtility.GroupConsecutive``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})
  commentId: M:AdvancedSceneManager.Editor.Utility.ListUtility.GroupConsecutive``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})
  isExternal: true
  name: GroupConsecutive<T>(IEnumerable<T>, Func<T, T, Boolean>)
  nameWithType: ListUtility.GroupConsecutive<T>(IEnumerable<T>, Func<T, T, Boolean>)
  fullName: AdvancedSceneManager.Editor.Utility.ListUtility.GroupConsecutive<T>(System.Collections.Generic.IEnumerable<T>, System.Func<T, T, System.Boolean>)
  nameWithType.vb: ListUtility.GroupConsecutive(Of T)(IEnumerable(Of T), Func(Of T, T, Boolean))
  fullName.vb: AdvancedSceneManager.Editor.Utility.ListUtility.GroupConsecutive(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, T, System.Boolean))
  name.vb: GroupConsecutive(Of T)(IEnumerable(Of T), Func(Of T, T, Boolean))
  spec.csharp:
  - uid: AdvancedSceneManager.Editor.Utility.ListUtility.GroupConsecutive``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})
    name: GroupConsecutive<T>
    nameWithType: ListUtility.GroupConsecutive<T>
    fullName: AdvancedSceneManager.Editor.Utility.ListUtility.GroupConsecutive<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AdvancedSceneManager.Editor.Utility.ListUtility.GroupConsecutive``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})
    name: GroupConsecutive(Of T)
    nameWithType: ListUtility.GroupConsecutive(Of T)
    fullName: AdvancedSceneManager.Editor.Utility.ListUtility.GroupConsecutive(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: AdvancedSceneManager.Editor.Utility
  commentId: N:AdvancedSceneManager.Editor.Utility
  name: AdvancedSceneManager.Editor.Utility
  nameWithType: AdvancedSceneManager.Editor.Utility
  fullName: AdvancedSceneManager.Editor.Utility
- uid: AdvancedSceneManager.Utility.SerializableDictionary`2.throwOnDeserializeWhenKeyValueMismatch*
  commentId: Overload:AdvancedSceneManager.Utility.SerializableDictionary`2.throwOnDeserializeWhenKeyValueMismatch
  name: throwOnDeserializeWhenKeyValueMismatch
  nameWithType: SerializableDictionary<TKey, TValue>.throwOnDeserializeWhenKeyValueMismatch
  fullName: AdvancedSceneManager.Utility.SerializableDictionary<TKey, TValue>.throwOnDeserializeWhenKeyValueMismatch
  nameWithType.vb: SerializableDictionary(Of TKey, TValue).throwOnDeserializeWhenKeyValueMismatch
  fullName.vb: AdvancedSceneManager.Utility.SerializableDictionary(Of TKey, TValue).throwOnDeserializeWhenKeyValueMismatch
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.List{{TKey}}
  commentId: T:System.Collections.Generic.List{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<TKey>
  nameWithType: List<TKey>
  fullName: System.Collections.Generic.List<TKey>
  nameWithType.vb: List(Of TKey)
  fullName.vb: System.Collections.Generic.List(Of TKey)
  name.vb: List(Of TKey)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{{TValue}}
  commentId: T:System.Collections.Generic.List{`1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<TValue>
  nameWithType: List<TValue>
  fullName: System.Collections.Generic.List<TValue>
  nameWithType.vb: List(Of TValue)
  fullName.vb: System.Collections.Generic.List(Of TValue)
  name.vb: List(Of TValue)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: AdvancedSceneManager.Utility.SerializableDictionary`2.OnBeforeSerialize*
  commentId: Overload:AdvancedSceneManager.Utility.SerializableDictionary`2.OnBeforeSerialize
  name: OnBeforeSerialize
  nameWithType: SerializableDictionary<TKey, TValue>.OnBeforeSerialize
  fullName: AdvancedSceneManager.Utility.SerializableDictionary<TKey, TValue>.OnBeforeSerialize
  nameWithType.vb: SerializableDictionary(Of TKey, TValue).OnBeforeSerialize
  fullName.vb: AdvancedSceneManager.Utility.SerializableDictionary(Of TKey, TValue).OnBeforeSerialize
- uid: AdvancedSceneManager.Utility.SerializableDictionary`2.OnAfterDeserialize*
  commentId: Overload:AdvancedSceneManager.Utility.SerializableDictionary`2.OnAfterDeserialize
  name: OnAfterDeserialize
  nameWithType: SerializableDictionary<TKey, TValue>.OnAfterDeserialize
  fullName: AdvancedSceneManager.Utility.SerializableDictionary<TKey, TValue>.OnAfterDeserialize
  nameWithType.vb: SerializableDictionary(Of TKey, TValue).OnAfterDeserialize
  fullName.vb: AdvancedSceneManager.Utility.SerializableDictionary(Of TKey, TValue).OnAfterDeserialize
