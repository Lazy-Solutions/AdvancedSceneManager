### YamlMime:ManagedReference
items:
- uid: AdvancedSceneManager.Models.TagList
  commentId: T:AdvancedSceneManager.Models.TagList
  id: TagList
  parent: AdvancedSceneManager.Models
  children:
  - AdvancedSceneManager.Models.TagList.Item(AdvancedSceneManager.Models.Scene)
  - AdvancedSceneManager.Models.TagList.Item(System.String)
  - AdvancedSceneManager.Models.TagList.TryGetValue(AdvancedSceneManager.Models.Scene,AdvancedSceneManager.Models.SceneTag@)
  - AdvancedSceneManager.Models.TagList.TryGetValue(System.String,AdvancedSceneManager.Models.SceneTag@)
  langs:
  - csharp
  - vb
  name: TagList
  nameWithType: TagList
  fullName: AdvancedSceneManager.Models.TagList
  type: Class
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/SceneTag.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: TagList
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/SceneTag.cs
    startLine: 19
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Models
  syntax:
    content: >-
      [Serializable]

      public class TagList : SerializableDictionary<string, string>, IDictionary<string, string>, ICollection<KeyValuePair<string, string>>, IReadOnlyDictionary<string, string>, IReadOnlyCollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IDictionary, ICollection, IEnumerable, IDeserializationCallback, ISerializable, ISerializationCallbackReceiver
    content.vb: >-
      <Serializable>

      Public Class TagList
          Inherits SerializableDictionary(Of String, String)
          Implements IDictionary(Of String, String), ICollection(Of KeyValuePair(Of String, String)), IReadOnlyDictionary(Of String, String), IReadOnlyCollection(Of KeyValuePair(Of String, String)), IEnumerable(Of KeyValuePair(Of String, String)), IDictionary, ICollection, IEnumerable, IDeserializationCallback, ISerializable, ISerializationCallbackReceiver
  inheritance:
  - System.Object
  - System.Collections.Generic.Dictionary{System.String,System.String}
  - AdvancedSceneManager.Utility.SerializableDictionary{System.String,System.String}
  inheritedMembers:
  - AdvancedSceneManager.Utility.SerializableDictionary{System.String,System.String}.throwOnDeserializeWhenKeyValueMismatch
  - AdvancedSceneManager.Utility.SerializableDictionary{System.String,System.String}.keys
  - AdvancedSceneManager.Utility.SerializableDictionary{System.String,System.String}.values
  - AdvancedSceneManager.Utility.SerializableDictionary{System.String,System.String}.OnBeforeSerialize
  - AdvancedSceneManager.Utility.SerializableDictionary{System.String,System.String}.OnAfterDeserialize
  extensionMethods:
  - System.Collections.Generic.Dictionary{System.String,System.String}.AdvancedSceneManager.Utility.DictionaryUtility.WithNullKey``2(System.String)
  - System.Collections.Generic.Dictionary{System.String,System.String}.AdvancedSceneManager.Utility.DictionaryUtility.Set``2(System.String,System.String)
  - System.Collections.Generic.Dictionary{System.String,System.String}.AdvancedSceneManager.Utility.DictionaryUtility.EnsureAdded``2(System.String)
  - System.Collections.Generic.Dictionary{System.String,System.String}.AdvancedSceneManager.Utility.DictionaryUtility.Add``2(System.String,System.String)
  - System.Collections.Generic.Dictionary{System.String,System.String}.AdvancedSceneManager.Utility.DictionaryUtility.GetValue``2(System.String,System.String)
  - System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}}.AdvancedSceneManager.Editor.Utility.ListUtility.ForEach``1(System.Action{System.Collections.Generic.KeyValuePair{System.String,System.String},System.Int32})
  - System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}}.AdvancedSceneManager.Editor.Utility.ListUtility.Flatten``1(System.Func{System.Collections.Generic.KeyValuePair{System.String,System.String},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}}})
  - System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}}.AdvancedSceneManager.Editor.Utility.ListUtility.Except``1(System.Collections.Generic.KeyValuePair{System.String,System.String})
  - System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}}.AdvancedSceneManager.Editor.Utility.ListUtility.GroupConsecutive``1(System.Func{System.Collections.Generic.KeyValuePair{System.String,System.String},System.Collections.Generic.KeyValuePair{System.String,System.String},System.Boolean})
  attributes:
  - type: System.SerializableAttribute
    ctor: System.SerializableAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: AdvancedSceneManager.Models.TagList.Item(System.String)
  commentId: P:AdvancedSceneManager.Models.TagList.Item(System.String)
  id: Item(System.String)
  parent: AdvancedSceneManager.Models.TagList
  langs:
  - csharp
  - vb
  name: Item[String]
  nameWithType: TagList.Item[String]
  fullName: AdvancedSceneManager.Models.TagList.Item[System.String]
  type: Property
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/SceneTag.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: this[]
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/SceneTag.cs
    startLine: 23
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Models
  syntax:
    content: public SceneTag this[string path] { get; set; }
    parameters:
    - id: path
      type: System.String
    return:
      type: AdvancedSceneManager.Models.SceneTag
    content.vb: Public Property Item(path As String) As SceneTag
  overload: AdvancedSceneManager.Models.TagList.Item*
  nameWithType.vb: TagList.Item(String)
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: AdvancedSceneManager.Models.TagList.Item(System.String)
  name.vb: Item(String)
- uid: AdvancedSceneManager.Models.TagList.Item(AdvancedSceneManager.Models.Scene)
  commentId: P:AdvancedSceneManager.Models.TagList.Item(AdvancedSceneManager.Models.Scene)
  id: Item(AdvancedSceneManager.Models.Scene)
  parent: AdvancedSceneManager.Models.TagList
  langs:
  - csharp
  - vb
  name: Item[Scene]
  nameWithType: TagList.Item[Scene]
  fullName: AdvancedSceneManager.Models.TagList.Item[AdvancedSceneManager.Models.Scene]
  type: Property
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/SceneTag.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: this[]
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/SceneTag.cs
    startLine: 29
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Models
  syntax:
    content: public SceneTag this[Scene scene] { get; set; }
    parameters:
    - id: scene
      type: AdvancedSceneManager.Models.Scene
    return:
      type: AdvancedSceneManager.Models.SceneTag
    content.vb: Public Property Item(scene As Scene) As SceneTag
  overload: AdvancedSceneManager.Models.TagList.Item*
  nameWithType.vb: TagList.Item(Scene)
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: AdvancedSceneManager.Models.TagList.Item(AdvancedSceneManager.Models.Scene)
  name.vb: Item(Scene)
- uid: AdvancedSceneManager.Models.TagList.TryGetValue(AdvancedSceneManager.Models.Scene,AdvancedSceneManager.Models.SceneTag@)
  commentId: M:AdvancedSceneManager.Models.TagList.TryGetValue(AdvancedSceneManager.Models.Scene,AdvancedSceneManager.Models.SceneTag@)
  id: TryGetValue(AdvancedSceneManager.Models.Scene,AdvancedSceneManager.Models.SceneTag@)
  parent: AdvancedSceneManager.Models.TagList
  langs:
  - csharp
  - vb
  name: TryGetValue(Scene, out SceneTag)
  nameWithType: TagList.TryGetValue(Scene, out SceneTag)
  fullName: AdvancedSceneManager.Models.TagList.TryGetValue(AdvancedSceneManager.Models.Scene, out AdvancedSceneManager.Models.SceneTag)
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/SceneTag.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: TryGetValue
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/SceneTag.cs
    startLine: 35
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Models
  syntax:
    content: public bool TryGetValue(Scene scene, out SceneTag layer)
    parameters:
    - id: scene
      type: AdvancedSceneManager.Models.Scene
    - id: layer
      type: AdvancedSceneManager.Models.SceneTag
    return:
      type: System.Boolean
    content.vb: Public Function TryGetValue(scene As Scene, ByRef layer As SceneTag) As Boolean
  overload: AdvancedSceneManager.Models.TagList.TryGetValue*
  nameWithType.vb: TagList.TryGetValue(Scene, ByRef SceneTag)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: AdvancedSceneManager.Models.TagList.TryGetValue(AdvancedSceneManager.Models.Scene, ByRef AdvancedSceneManager.Models.SceneTag)
  name.vb: TryGetValue(Scene, ByRef SceneTag)
- uid: AdvancedSceneManager.Models.TagList.TryGetValue(System.String,AdvancedSceneManager.Models.SceneTag@)
  commentId: M:AdvancedSceneManager.Models.TagList.TryGetValue(System.String,AdvancedSceneManager.Models.SceneTag@)
  id: TryGetValue(System.String,AdvancedSceneManager.Models.SceneTag@)
  parent: AdvancedSceneManager.Models.TagList
  langs:
  - csharp
  - vb
  name: TryGetValue(String, out SceneTag)
  nameWithType: TagList.TryGetValue(String, out SceneTag)
  fullName: AdvancedSceneManager.Models.TagList.TryGetValue(System.String, out AdvancedSceneManager.Models.SceneTag)
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/SceneTag.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: TryGetValue
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/SceneTag.cs
    startLine: 38
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Models
  syntax:
    content: public bool TryGetValue(string path, out SceneTag layer)
    parameters:
    - id: path
      type: System.String
    - id: layer
      type: AdvancedSceneManager.Models.SceneTag
    return:
      type: System.Boolean
    content.vb: Public Function TryGetValue(path As String, ByRef layer As SceneTag) As Boolean
  overload: AdvancedSceneManager.Models.TagList.TryGetValue*
  nameWithType.vb: TagList.TryGetValue(String, ByRef SceneTag)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: AdvancedSceneManager.Models.TagList.TryGetValue(System.String, ByRef AdvancedSceneManager.Models.SceneTag)
  name.vb: TryGetValue(String, ByRef SceneTag)
references:
- uid: AdvancedSceneManager.Models
  commentId: N:AdvancedSceneManager.Models
  name: AdvancedSceneManager.Models
  nameWithType: AdvancedSceneManager.Models
  fullName: AdvancedSceneManager.Models
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.Generic.Dictionary{System.String,System.String}
  commentId: T:System.Collections.Generic.Dictionary{System.String,System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, String>
  nameWithType: Dictionary<String, String>
  fullName: System.Collections.Generic.Dictionary<System.String, System.String>
  nameWithType.vb: Dictionary(Of String, String)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, System.String)
  name.vb: Dictionary(Of String, String)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: AdvancedSceneManager.Utility.SerializableDictionary{System.String,System.String}
  commentId: T:AdvancedSceneManager.Utility.SerializableDictionary{System.String,System.String}
  parent: AdvancedSceneManager.Utility
  definition: AdvancedSceneManager.Utility.SerializableDictionary`2
  name: SerializableDictionary<String, String>
  nameWithType: SerializableDictionary<String, String>
  fullName: AdvancedSceneManager.Utility.SerializableDictionary<System.String, System.String>
  nameWithType.vb: SerializableDictionary(Of String, String)
  fullName.vb: AdvancedSceneManager.Utility.SerializableDictionary(Of System.String, System.String)
  name.vb: SerializableDictionary(Of String, String)
  spec.csharp:
  - uid: AdvancedSceneManager.Utility.SerializableDictionary`2
    name: SerializableDictionary
    nameWithType: SerializableDictionary
    fullName: AdvancedSceneManager.Utility.SerializableDictionary
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: AdvancedSceneManager.Utility.SerializableDictionary`2
    name: SerializableDictionary
    nameWithType: SerializableDictionary
    fullName: AdvancedSceneManager.Utility.SerializableDictionary
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: AdvancedSceneManager.Utility.SerializableDictionary{System.String,System.String}.throwOnDeserializeWhenKeyValueMismatch
  commentId: P:AdvancedSceneManager.Utility.SerializableDictionary{System.String,System.String}.throwOnDeserializeWhenKeyValueMismatch
  parent: AdvancedSceneManager.Utility.SerializableDictionary{System.String,System.String}
  definition: AdvancedSceneManager.Utility.SerializableDictionary`2.throwOnDeserializeWhenKeyValueMismatch
  name: throwOnDeserializeWhenKeyValueMismatch
  nameWithType: SerializableDictionary<String, String>.throwOnDeserializeWhenKeyValueMismatch
  fullName: AdvancedSceneManager.Utility.SerializableDictionary<System.String, System.String>.throwOnDeserializeWhenKeyValueMismatch
  nameWithType.vb: SerializableDictionary(Of String, String).throwOnDeserializeWhenKeyValueMismatch
  fullName.vb: AdvancedSceneManager.Utility.SerializableDictionary(Of System.String, System.String).throwOnDeserializeWhenKeyValueMismatch
- uid: AdvancedSceneManager.Utility.SerializableDictionary{System.String,System.String}.keys
  commentId: F:AdvancedSceneManager.Utility.SerializableDictionary{System.String,System.String}.keys
  parent: AdvancedSceneManager.Utility.SerializableDictionary{System.String,System.String}
  definition: AdvancedSceneManager.Utility.SerializableDictionary`2.keys
  name: keys
  nameWithType: SerializableDictionary<String, String>.keys
  fullName: AdvancedSceneManager.Utility.SerializableDictionary<System.String, System.String>.keys
  nameWithType.vb: SerializableDictionary(Of String, String).keys
  fullName.vb: AdvancedSceneManager.Utility.SerializableDictionary(Of System.String, System.String).keys
- uid: AdvancedSceneManager.Utility.SerializableDictionary{System.String,System.String}.values
  commentId: F:AdvancedSceneManager.Utility.SerializableDictionary{System.String,System.String}.values
  parent: AdvancedSceneManager.Utility.SerializableDictionary{System.String,System.String}
  definition: AdvancedSceneManager.Utility.SerializableDictionary`2.values
  name: values
  nameWithType: SerializableDictionary<String, String>.values
  fullName: AdvancedSceneManager.Utility.SerializableDictionary<System.String, System.String>.values
  nameWithType.vb: SerializableDictionary(Of String, String).values
  fullName.vb: AdvancedSceneManager.Utility.SerializableDictionary(Of System.String, System.String).values
- uid: AdvancedSceneManager.Utility.SerializableDictionary{System.String,System.String}.OnBeforeSerialize
  commentId: M:AdvancedSceneManager.Utility.SerializableDictionary{System.String,System.String}.OnBeforeSerialize
  parent: AdvancedSceneManager.Utility.SerializableDictionary{System.String,System.String}
  definition: AdvancedSceneManager.Utility.SerializableDictionary`2.OnBeforeSerialize
  name: OnBeforeSerialize()
  nameWithType: SerializableDictionary<String, String>.OnBeforeSerialize()
  fullName: AdvancedSceneManager.Utility.SerializableDictionary<System.String, System.String>.OnBeforeSerialize()
  nameWithType.vb: SerializableDictionary(Of String, String).OnBeforeSerialize()
  fullName.vb: AdvancedSceneManager.Utility.SerializableDictionary(Of System.String, System.String).OnBeforeSerialize()
  spec.csharp:
  - uid: AdvancedSceneManager.Utility.SerializableDictionary`2.OnBeforeSerialize
    name: OnBeforeSerialize
    nameWithType: SerializableDictionary<String, String>.OnBeforeSerialize
    fullName: AdvancedSceneManager.Utility.SerializableDictionary<System.String, System.String>.OnBeforeSerialize
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AdvancedSceneManager.Utility.SerializableDictionary`2.OnBeforeSerialize
    name: OnBeforeSerialize
    nameWithType: SerializableDictionary(Of String, String).OnBeforeSerialize
    fullName: AdvancedSceneManager.Utility.SerializableDictionary(Of System.String, System.String).OnBeforeSerialize
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: AdvancedSceneManager.Utility.SerializableDictionary{System.String,System.String}.OnAfterDeserialize
  commentId: M:AdvancedSceneManager.Utility.SerializableDictionary{System.String,System.String}.OnAfterDeserialize
  parent: AdvancedSceneManager.Utility.SerializableDictionary{System.String,System.String}
  definition: AdvancedSceneManager.Utility.SerializableDictionary`2.OnAfterDeserialize
  name: OnAfterDeserialize()
  nameWithType: SerializableDictionary<String, String>.OnAfterDeserialize()
  fullName: AdvancedSceneManager.Utility.SerializableDictionary<System.String, System.String>.OnAfterDeserialize()
  nameWithType.vb: SerializableDictionary(Of String, String).OnAfterDeserialize()
  fullName.vb: AdvancedSceneManager.Utility.SerializableDictionary(Of System.String, System.String).OnAfterDeserialize()
  spec.csharp:
  - uid: AdvancedSceneManager.Utility.SerializableDictionary`2.OnAfterDeserialize
    name: OnAfterDeserialize
    nameWithType: SerializableDictionary<String, String>.OnAfterDeserialize
    fullName: AdvancedSceneManager.Utility.SerializableDictionary<System.String, System.String>.OnAfterDeserialize
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AdvancedSceneManager.Utility.SerializableDictionary`2.OnAfterDeserialize
    name: OnAfterDeserialize
    nameWithType: SerializableDictionary(Of String, String).OnAfterDeserialize
    fullName: AdvancedSceneManager.Utility.SerializableDictionary(Of System.String, System.String).OnAfterDeserialize
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary{System.String,System.String}.AdvancedSceneManager.Utility.DictionaryUtility.WithNullKey``2(System.String)
  commentId: M:AdvancedSceneManager.Utility.DictionaryUtility.WithNullKey``2(System.Collections.Generic.Dictionary{``0,``1},``0)
  parent: AdvancedSceneManager.Utility.DictionaryUtility
  definition: AdvancedSceneManager.Utility.DictionaryUtility.WithNullKey``2(System.Collections.Generic.Dictionary{``0,``1},``0)
  name: WithNullKey<String, String>(String)
  nameWithType: DictionaryUtility.WithNullKey<String, String>(String)
  fullName: AdvancedSceneManager.Utility.DictionaryUtility.WithNullKey<System.String, System.String>(System.String)
  nameWithType.vb: DictionaryUtility.WithNullKey(Of String, String)(String)
  fullName.vb: AdvancedSceneManager.Utility.DictionaryUtility.WithNullKey(Of System.String, System.String)(System.String)
  name.vb: WithNullKey(Of String, String)(String)
  spec.csharp:
  - uid: AdvancedSceneManager.Utility.DictionaryUtility.WithNullKey``2(``0)
    name: WithNullKey<String, String>
    nameWithType: DictionaryUtility.WithNullKey<String, String>
    fullName: AdvancedSceneManager.Utility.DictionaryUtility.WithNullKey<System.String, System.String>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AdvancedSceneManager.Utility.DictionaryUtility.WithNullKey``2(``0)
    name: WithNullKey(Of String, String)
    nameWithType: DictionaryUtility.WithNullKey(Of String, String)
    fullName: AdvancedSceneManager.Utility.DictionaryUtility.WithNullKey(Of System.String, System.String)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary{System.String,System.String}.AdvancedSceneManager.Utility.DictionaryUtility.Set``2(System.String,System.String)
  commentId: M:AdvancedSceneManager.Utility.DictionaryUtility.Set``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)
  parent: AdvancedSceneManager.Utility.DictionaryUtility
  definition: AdvancedSceneManager.Utility.DictionaryUtility.Set``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)
  name: Set<String, String>(String, String)
  nameWithType: DictionaryUtility.Set<String, String>(String, String)
  fullName: AdvancedSceneManager.Utility.DictionaryUtility.Set<System.String, System.String>(System.String, System.String)
  nameWithType.vb: DictionaryUtility.Set(Of String, String)(String, String)
  fullName.vb: AdvancedSceneManager.Utility.DictionaryUtility.Set(Of System.String, System.String)(System.String, System.String)
  name.vb: Set(Of String, String)(String, String)
  spec.csharp:
  - uid: AdvancedSceneManager.Utility.DictionaryUtility.Set``2(``0,``1)
    name: Set<String, String>
    nameWithType: DictionaryUtility.Set<String, String>
    fullName: AdvancedSceneManager.Utility.DictionaryUtility.Set<System.String, System.String>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AdvancedSceneManager.Utility.DictionaryUtility.Set``2(``0,``1)
    name: Set(Of String, String)
    nameWithType: DictionaryUtility.Set(Of String, String)
    fullName: AdvancedSceneManager.Utility.DictionaryUtility.Set(Of System.String, System.String)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary{System.String,System.String}.AdvancedSceneManager.Utility.DictionaryUtility.EnsureAdded``2(System.String)
  commentId: M:AdvancedSceneManager.Utility.DictionaryUtility.EnsureAdded``2(System.Collections.Generic.Dictionary{``0,``1},``0)
  parent: AdvancedSceneManager.Utility.DictionaryUtility
  definition: AdvancedSceneManager.Utility.DictionaryUtility.EnsureAdded``2(System.Collections.Generic.Dictionary{``0,``1},``0)
  name: EnsureAdded<String, String>(String)
  nameWithType: DictionaryUtility.EnsureAdded<String, String>(String)
  fullName: AdvancedSceneManager.Utility.DictionaryUtility.EnsureAdded<System.String, System.String>(System.String)
  nameWithType.vb: DictionaryUtility.EnsureAdded(Of String, String)(String)
  fullName.vb: AdvancedSceneManager.Utility.DictionaryUtility.EnsureAdded(Of System.String, System.String)(System.String)
  name.vb: EnsureAdded(Of String, String)(String)
  spec.csharp:
  - uid: AdvancedSceneManager.Utility.DictionaryUtility.EnsureAdded``2(``0)
    name: EnsureAdded<String, String>
    nameWithType: DictionaryUtility.EnsureAdded<String, String>
    fullName: AdvancedSceneManager.Utility.DictionaryUtility.EnsureAdded<System.String, System.String>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AdvancedSceneManager.Utility.DictionaryUtility.EnsureAdded``2(``0)
    name: EnsureAdded(Of String, String)
    nameWithType: DictionaryUtility.EnsureAdded(Of String, String)
    fullName: AdvancedSceneManager.Utility.DictionaryUtility.EnsureAdded(Of System.String, System.String)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary{System.String,System.String}.AdvancedSceneManager.Utility.DictionaryUtility.Add``2(System.String,System.String)
  commentId: M:AdvancedSceneManager.Utility.DictionaryUtility.Add``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)
  parent: AdvancedSceneManager.Utility.DictionaryUtility
  definition: AdvancedSceneManager.Utility.DictionaryUtility.Add``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)
  name: Add<String, String>(String, String)
  nameWithType: DictionaryUtility.Add<String, String>(String, String)
  fullName: AdvancedSceneManager.Utility.DictionaryUtility.Add<System.String, System.String>(System.String, System.String)
  nameWithType.vb: DictionaryUtility.Add(Of String, String)(String, String)
  fullName.vb: AdvancedSceneManager.Utility.DictionaryUtility.Add(Of System.String, System.String)(System.String, System.String)
  name.vb: Add(Of String, String)(String, String)
  spec.csharp:
  - uid: AdvancedSceneManager.Utility.DictionaryUtility.Add``2(``0,``1)
    name: Add<String, String>
    nameWithType: DictionaryUtility.Add<String, String>
    fullName: AdvancedSceneManager.Utility.DictionaryUtility.Add<System.String, System.String>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AdvancedSceneManager.Utility.DictionaryUtility.Add``2(``0,``1)
    name: Add(Of String, String)
    nameWithType: DictionaryUtility.Add(Of String, String)
    fullName: AdvancedSceneManager.Utility.DictionaryUtility.Add(Of System.String, System.String)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary{System.String,System.String}.AdvancedSceneManager.Utility.DictionaryUtility.GetValue``2(System.String,System.String)
  commentId: M:AdvancedSceneManager.Utility.DictionaryUtility.GetValue``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)
  parent: AdvancedSceneManager.Utility.DictionaryUtility
  definition: AdvancedSceneManager.Utility.DictionaryUtility.GetValue``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)
  name: GetValue<String, String>(String, String)
  nameWithType: DictionaryUtility.GetValue<String, String>(String, String)
  fullName: AdvancedSceneManager.Utility.DictionaryUtility.GetValue<System.String, System.String>(System.String, System.String)
  nameWithType.vb: DictionaryUtility.GetValue(Of String, String)(String, String)
  fullName.vb: AdvancedSceneManager.Utility.DictionaryUtility.GetValue(Of System.String, System.String)(System.String, System.String)
  name.vb: GetValue(Of String, String)(String, String)
  spec.csharp:
  - uid: AdvancedSceneManager.Utility.DictionaryUtility.GetValue``2(``0,``1)
    name: GetValue<String, String>
    nameWithType: DictionaryUtility.GetValue<String, String>
    fullName: AdvancedSceneManager.Utility.DictionaryUtility.GetValue<System.String, System.String>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AdvancedSceneManager.Utility.DictionaryUtility.GetValue``2(``0,``1)
    name: GetValue(Of String, String)
    nameWithType: DictionaryUtility.GetValue(Of String, String)
    fullName: AdvancedSceneManager.Utility.DictionaryUtility.GetValue(Of System.String, System.String)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}}.AdvancedSceneManager.Editor.Utility.ListUtility.ForEach``1(System.Action{System.Collections.Generic.KeyValuePair{System.String,System.String},System.Int32})
  commentId: M:AdvancedSceneManager.Editor.Utility.ListUtility.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})
  parent: AdvancedSceneManager.Editor.Utility.ListUtility
  definition: AdvancedSceneManager.Editor.Utility.ListUtility.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})
  name: ForEach<KeyValuePair<String, String>>(Action<KeyValuePair<String, String>, Int32>)
  nameWithType: ListUtility.ForEach<KeyValuePair<String, String>>(Action<KeyValuePair<String, String>, Int32>)
  fullName: AdvancedSceneManager.Editor.Utility.ListUtility.ForEach<System.Collections.Generic.KeyValuePair<System.String, System.String>>(System.Action<System.Collections.Generic.KeyValuePair<System.String, System.String>, System.Int32>)
  nameWithType.vb: ListUtility.ForEach(Of KeyValuePair(Of String, String))(Action(Of KeyValuePair(Of String, String), Int32))
  fullName.vb: AdvancedSceneManager.Editor.Utility.ListUtility.ForEach(Of System.Collections.Generic.KeyValuePair(Of System.String, System.String))(System.Action(Of System.Collections.Generic.KeyValuePair(Of System.String, System.String), System.Int32))
  name.vb: ForEach(Of KeyValuePair(Of String, String))(Action(Of KeyValuePair(Of String, String), Int32))
  spec.csharp:
  - uid: AdvancedSceneManager.Editor.Utility.ListUtility.ForEach``1(System.Action{``0,System.Int32})
    name: ForEach<KeyValuePair<String, String>>
    nameWithType: ListUtility.ForEach<KeyValuePair<String, String>>
    fullName: AdvancedSceneManager.Editor.Utility.ListUtility.ForEach<System.Collections.Generic.KeyValuePair<System.String, System.String>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AdvancedSceneManager.Editor.Utility.ListUtility.ForEach``1(System.Action{``0,System.Int32})
    name: ForEach(Of KeyValuePair(Of String, String))
    nameWithType: ListUtility.ForEach(Of KeyValuePair(Of String, String))
    fullName: AdvancedSceneManager.Editor.Utility.ListUtility.ForEach(Of System.Collections.Generic.KeyValuePair(Of System.String, System.String))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}}.AdvancedSceneManager.Editor.Utility.ListUtility.Flatten``1(System.Func{System.Collections.Generic.KeyValuePair{System.String,System.String},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}}})
  commentId: M:AdvancedSceneManager.Editor.Utility.ListUtility.Flatten``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}})
  parent: AdvancedSceneManager.Editor.Utility.ListUtility
  definition: AdvancedSceneManager.Editor.Utility.ListUtility.Flatten``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}})
  name: Flatten<KeyValuePair<String, String>>(Func<KeyValuePair<String, String>, IEnumerable<KeyValuePair<String, String>>>)
  nameWithType: ListUtility.Flatten<KeyValuePair<String, String>>(Func<KeyValuePair<String, String>, IEnumerable<KeyValuePair<String, String>>>)
  fullName: AdvancedSceneManager.Editor.Utility.ListUtility.Flatten<System.Collections.Generic.KeyValuePair<System.String, System.String>>(System.Func<System.Collections.Generic.KeyValuePair<System.String, System.String>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String, System.String>>>)
  nameWithType.vb: ListUtility.Flatten(Of KeyValuePair(Of String, String))(Func(Of KeyValuePair(Of String, String), IEnumerable(Of KeyValuePair(Of String, String))))
  fullName.vb: AdvancedSceneManager.Editor.Utility.ListUtility.Flatten(Of System.Collections.Generic.KeyValuePair(Of System.String, System.String))(System.Func(Of System.Collections.Generic.KeyValuePair(Of System.String, System.String), System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of System.String, System.String))))
  name.vb: Flatten(Of KeyValuePair(Of String, String))(Func(Of KeyValuePair(Of String, String), IEnumerable(Of KeyValuePair(Of String, String))))
  spec.csharp:
  - uid: AdvancedSceneManager.Editor.Utility.ListUtility.Flatten``1(System.Func{``0,System.Collections.Generic.IEnumerable{``0}})
    name: Flatten<KeyValuePair<String, String>>
    nameWithType: ListUtility.Flatten<KeyValuePair<String, String>>
    fullName: AdvancedSceneManager.Editor.Utility.ListUtility.Flatten<System.Collections.Generic.KeyValuePair<System.String, System.String>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AdvancedSceneManager.Editor.Utility.ListUtility.Flatten``1(System.Func{``0,System.Collections.Generic.IEnumerable{``0}})
    name: Flatten(Of KeyValuePair(Of String, String))
    nameWithType: ListUtility.Flatten(Of KeyValuePair(Of String, String))
    fullName: AdvancedSceneManager.Editor.Utility.ListUtility.Flatten(Of System.Collections.Generic.KeyValuePair(Of System.String, System.String))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}}.AdvancedSceneManager.Editor.Utility.ListUtility.Except``1(System.Collections.Generic.KeyValuePair{System.String,System.String})
  commentId: M:AdvancedSceneManager.Editor.Utility.ListUtility.Except``1(System.Collections.Generic.IEnumerable{``0},``0)
  parent: AdvancedSceneManager.Editor.Utility.ListUtility
  definition: AdvancedSceneManager.Editor.Utility.ListUtility.Except``1(System.Collections.Generic.IEnumerable{``0},``0)
  name: Except<KeyValuePair<String, String>>(KeyValuePair<String, String>)
  nameWithType: ListUtility.Except<KeyValuePair<String, String>>(KeyValuePair<String, String>)
  fullName: AdvancedSceneManager.Editor.Utility.ListUtility.Except<System.Collections.Generic.KeyValuePair<System.String, System.String>>(System.Collections.Generic.KeyValuePair<System.String, System.String>)
  nameWithType.vb: ListUtility.Except(Of KeyValuePair(Of String, String))(KeyValuePair(Of String, String))
  fullName.vb: AdvancedSceneManager.Editor.Utility.ListUtility.Except(Of System.Collections.Generic.KeyValuePair(Of System.String, System.String))(System.Collections.Generic.KeyValuePair(Of System.String, System.String))
  name.vb: Except(Of KeyValuePair(Of String, String))(KeyValuePair(Of String, String))
  spec.csharp:
  - uid: AdvancedSceneManager.Editor.Utility.ListUtility.Except``1(``0)
    name: Except<KeyValuePair<String, String>>
    nameWithType: ListUtility.Except<KeyValuePair<String, String>>
    fullName: AdvancedSceneManager.Editor.Utility.ListUtility.Except<System.Collections.Generic.KeyValuePair<System.String, System.String>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AdvancedSceneManager.Editor.Utility.ListUtility.Except``1(``0)
    name: Except(Of KeyValuePair(Of String, String))
    nameWithType: ListUtility.Except(Of KeyValuePair(Of String, String))
    fullName: AdvancedSceneManager.Editor.Utility.ListUtility.Except(Of System.Collections.Generic.KeyValuePair(Of System.String, System.String))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}}.AdvancedSceneManager.Editor.Utility.ListUtility.GroupConsecutive``1(System.Func{System.Collections.Generic.KeyValuePair{System.String,System.String},System.Collections.Generic.KeyValuePair{System.String,System.String},System.Boolean})
  commentId: M:AdvancedSceneManager.Editor.Utility.ListUtility.GroupConsecutive``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})
  parent: AdvancedSceneManager.Editor.Utility.ListUtility
  definition: AdvancedSceneManager.Editor.Utility.ListUtility.GroupConsecutive``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})
  name: GroupConsecutive<KeyValuePair<String, String>>(Func<KeyValuePair<String, String>, KeyValuePair<String, String>, Boolean>)
  nameWithType: ListUtility.GroupConsecutive<KeyValuePair<String, String>>(Func<KeyValuePair<String, String>, KeyValuePair<String, String>, Boolean>)
  fullName: AdvancedSceneManager.Editor.Utility.ListUtility.GroupConsecutive<System.Collections.Generic.KeyValuePair<System.String, System.String>>(System.Func<System.Collections.Generic.KeyValuePair<System.String, System.String>, System.Collections.Generic.KeyValuePair<System.String, System.String>, System.Boolean>)
  nameWithType.vb: ListUtility.GroupConsecutive(Of KeyValuePair(Of String, String))(Func(Of KeyValuePair(Of String, String), KeyValuePair(Of String, String), Boolean))
  fullName.vb: AdvancedSceneManager.Editor.Utility.ListUtility.GroupConsecutive(Of System.Collections.Generic.KeyValuePair(Of System.String, System.String))(System.Func(Of System.Collections.Generic.KeyValuePair(Of System.String, System.String), System.Collections.Generic.KeyValuePair(Of System.String, System.String), System.Boolean))
  name.vb: GroupConsecutive(Of KeyValuePair(Of String, String))(Func(Of KeyValuePair(Of String, String), KeyValuePair(Of String, String), Boolean))
  spec.csharp:
  - uid: AdvancedSceneManager.Editor.Utility.ListUtility.GroupConsecutive``1(System.Func{``0,``0,System.Boolean})
    name: GroupConsecutive<KeyValuePair<String, String>>
    nameWithType: ListUtility.GroupConsecutive<KeyValuePair<String, String>>
    fullName: AdvancedSceneManager.Editor.Utility.ListUtility.GroupConsecutive<System.Collections.Generic.KeyValuePair<System.String, System.String>>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AdvancedSceneManager.Editor.Utility.ListUtility.GroupConsecutive``1(System.Func{``0,``0,System.Boolean})
    name: GroupConsecutive(Of KeyValuePair(Of String, String))
    nameWithType: ListUtility.GroupConsecutive(Of KeyValuePair(Of String, String))
    fullName: AdvancedSceneManager.Editor.Utility.ListUtility.GroupConsecutive(Of System.Collections.Generic.KeyValuePair(Of System.String, System.String))
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: AdvancedSceneManager.Utility.SerializableDictionary`2
  commentId: T:AdvancedSceneManager.Utility.SerializableDictionary`2
  name: SerializableDictionary<TKey, TValue>
  nameWithType: SerializableDictionary<TKey, TValue>
  fullName: AdvancedSceneManager.Utility.SerializableDictionary<TKey, TValue>
  nameWithType.vb: SerializableDictionary(Of TKey, TValue)
  fullName.vb: AdvancedSceneManager.Utility.SerializableDictionary(Of TKey, TValue)
  name.vb: SerializableDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: AdvancedSceneManager.Utility.SerializableDictionary`2
    name: SerializableDictionary
    nameWithType: SerializableDictionary
    fullName: AdvancedSceneManager.Utility.SerializableDictionary
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: AdvancedSceneManager.Utility.SerializableDictionary`2
    name: SerializableDictionary
    nameWithType: SerializableDictionary
    fullName: AdvancedSceneManager.Utility.SerializableDictionary
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: AdvancedSceneManager.Utility
  commentId: N:AdvancedSceneManager.Utility
  name: AdvancedSceneManager.Utility
  nameWithType: AdvancedSceneManager.Utility
  fullName: AdvancedSceneManager.Utility
- uid: AdvancedSceneManager.Utility.SerializableDictionary`2.throwOnDeserializeWhenKeyValueMismatch
  commentId: P:AdvancedSceneManager.Utility.SerializableDictionary`2.throwOnDeserializeWhenKeyValueMismatch
  name: throwOnDeserializeWhenKeyValueMismatch
  nameWithType: SerializableDictionary<TKey, TValue>.throwOnDeserializeWhenKeyValueMismatch
  fullName: AdvancedSceneManager.Utility.SerializableDictionary<TKey, TValue>.throwOnDeserializeWhenKeyValueMismatch
  nameWithType.vb: SerializableDictionary(Of TKey, TValue).throwOnDeserializeWhenKeyValueMismatch
  fullName.vb: AdvancedSceneManager.Utility.SerializableDictionary(Of TKey, TValue).throwOnDeserializeWhenKeyValueMismatch
- uid: AdvancedSceneManager.Utility.SerializableDictionary`2.keys
  commentId: F:AdvancedSceneManager.Utility.SerializableDictionary`2.keys
  name: keys
  nameWithType: SerializableDictionary<TKey, TValue>.keys
  fullName: AdvancedSceneManager.Utility.SerializableDictionary<TKey, TValue>.keys
  nameWithType.vb: SerializableDictionary(Of TKey, TValue).keys
  fullName.vb: AdvancedSceneManager.Utility.SerializableDictionary(Of TKey, TValue).keys
- uid: AdvancedSceneManager.Utility.SerializableDictionary`2.values
  commentId: F:AdvancedSceneManager.Utility.SerializableDictionary`2.values
  name: values
  nameWithType: SerializableDictionary<TKey, TValue>.values
  fullName: AdvancedSceneManager.Utility.SerializableDictionary<TKey, TValue>.values
  nameWithType.vb: SerializableDictionary(Of TKey, TValue).values
  fullName.vb: AdvancedSceneManager.Utility.SerializableDictionary(Of TKey, TValue).values
- uid: AdvancedSceneManager.Utility.SerializableDictionary`2.OnBeforeSerialize
  commentId: M:AdvancedSceneManager.Utility.SerializableDictionary`2.OnBeforeSerialize
  name: OnBeforeSerialize()
  nameWithType: SerializableDictionary<TKey, TValue>.OnBeforeSerialize()
  fullName: AdvancedSceneManager.Utility.SerializableDictionary<TKey, TValue>.OnBeforeSerialize()
  nameWithType.vb: SerializableDictionary(Of TKey, TValue).OnBeforeSerialize()
  fullName.vb: AdvancedSceneManager.Utility.SerializableDictionary(Of TKey, TValue).OnBeforeSerialize()
  spec.csharp:
  - uid: AdvancedSceneManager.Utility.SerializableDictionary`2.OnBeforeSerialize
    name: OnBeforeSerialize
    nameWithType: SerializableDictionary<TKey, TValue>.OnBeforeSerialize
    fullName: AdvancedSceneManager.Utility.SerializableDictionary<TKey, TValue>.OnBeforeSerialize
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AdvancedSceneManager.Utility.SerializableDictionary`2.OnBeforeSerialize
    name: OnBeforeSerialize
    nameWithType: SerializableDictionary(Of TKey, TValue).OnBeforeSerialize
    fullName: AdvancedSceneManager.Utility.SerializableDictionary(Of TKey, TValue).OnBeforeSerialize
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: AdvancedSceneManager.Utility.SerializableDictionary`2.OnAfterDeserialize
  commentId: M:AdvancedSceneManager.Utility.SerializableDictionary`2.OnAfterDeserialize
  name: OnAfterDeserialize()
  nameWithType: SerializableDictionary<TKey, TValue>.OnAfterDeserialize()
  fullName: AdvancedSceneManager.Utility.SerializableDictionary<TKey, TValue>.OnAfterDeserialize()
  nameWithType.vb: SerializableDictionary(Of TKey, TValue).OnAfterDeserialize()
  fullName.vb: AdvancedSceneManager.Utility.SerializableDictionary(Of TKey, TValue).OnAfterDeserialize()
  spec.csharp:
  - uid: AdvancedSceneManager.Utility.SerializableDictionary`2.OnAfterDeserialize
    name: OnAfterDeserialize
    nameWithType: SerializableDictionary<TKey, TValue>.OnAfterDeserialize
    fullName: AdvancedSceneManager.Utility.SerializableDictionary<TKey, TValue>.OnAfterDeserialize
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AdvancedSceneManager.Utility.SerializableDictionary`2.OnAfterDeserialize
    name: OnAfterDeserialize
    nameWithType: SerializableDictionary(Of TKey, TValue).OnAfterDeserialize
    fullName: AdvancedSceneManager.Utility.SerializableDictionary(Of TKey, TValue).OnAfterDeserialize
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: AdvancedSceneManager.Utility.DictionaryUtility.WithNullKey``2(System.Collections.Generic.Dictionary{``0,``1},``0)
  commentId: M:AdvancedSceneManager.Utility.DictionaryUtility.WithNullKey``2(System.Collections.Generic.Dictionary{``0,``1},``0)
  isExternal: true
  name: WithNullKey<TKey, TValue>(Dictionary<TKey, TValue>, TKey)
  nameWithType: DictionaryUtility.WithNullKey<TKey, TValue>(Dictionary<TKey, TValue>, TKey)
  fullName: AdvancedSceneManager.Utility.DictionaryUtility.WithNullKey<TKey, TValue>(System.Collections.Generic.Dictionary<TKey, TValue>, TKey)
  nameWithType.vb: DictionaryUtility.WithNullKey(Of TKey, TValue)(Dictionary(Of TKey, TValue), TKey)
  fullName.vb: AdvancedSceneManager.Utility.DictionaryUtility.WithNullKey(Of TKey, TValue)(System.Collections.Generic.Dictionary(Of TKey, TValue), TKey)
  name.vb: WithNullKey(Of TKey, TValue)(Dictionary(Of TKey, TValue), TKey)
  spec.csharp:
  - uid: AdvancedSceneManager.Utility.DictionaryUtility.WithNullKey``2(System.Collections.Generic.Dictionary{``0,``1},``0)
    name: WithNullKey<TKey, TValue>
    nameWithType: DictionaryUtility.WithNullKey<TKey, TValue>
    fullName: AdvancedSceneManager.Utility.DictionaryUtility.WithNullKey<TKey, TValue>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AdvancedSceneManager.Utility.DictionaryUtility.WithNullKey``2(System.Collections.Generic.Dictionary{``0,``1},``0)
    name: WithNullKey(Of TKey, TValue)
    nameWithType: DictionaryUtility.WithNullKey(Of TKey, TValue)
    fullName: AdvancedSceneManager.Utility.DictionaryUtility.WithNullKey(Of TKey, TValue)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: AdvancedSceneManager.Utility.DictionaryUtility
  commentId: T:AdvancedSceneManager.Utility.DictionaryUtility
  parent: AdvancedSceneManager.Utility
  name: DictionaryUtility
  nameWithType: DictionaryUtility
  fullName: AdvancedSceneManager.Utility.DictionaryUtility
- uid: AdvancedSceneManager.Utility.DictionaryUtility.Set``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)
  commentId: M:AdvancedSceneManager.Utility.DictionaryUtility.Set``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)
  isExternal: true
  name: Set<TKey, TValue>(Dictionary<TKey, TValue>, TKey, TValue)
  nameWithType: DictionaryUtility.Set<TKey, TValue>(Dictionary<TKey, TValue>, TKey, TValue)
  fullName: AdvancedSceneManager.Utility.DictionaryUtility.Set<TKey, TValue>(System.Collections.Generic.Dictionary<TKey, TValue>, TKey, TValue)
  nameWithType.vb: DictionaryUtility.Set(Of TKey, TValue)(Dictionary(Of TKey, TValue), TKey, TValue)
  fullName.vb: AdvancedSceneManager.Utility.DictionaryUtility.Set(Of TKey, TValue)(System.Collections.Generic.Dictionary(Of TKey, TValue), TKey, TValue)
  name.vb: Set(Of TKey, TValue)(Dictionary(Of TKey, TValue), TKey, TValue)
  spec.csharp:
  - uid: AdvancedSceneManager.Utility.DictionaryUtility.Set``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)
    name: Set<TKey, TValue>
    nameWithType: DictionaryUtility.Set<TKey, TValue>
    fullName: AdvancedSceneManager.Utility.DictionaryUtility.Set<TKey, TValue>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AdvancedSceneManager.Utility.DictionaryUtility.Set``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)
    name: Set(Of TKey, TValue)
    nameWithType: DictionaryUtility.Set(Of TKey, TValue)
    fullName: AdvancedSceneManager.Utility.DictionaryUtility.Set(Of TKey, TValue)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: AdvancedSceneManager.Utility.DictionaryUtility.EnsureAdded``2(System.Collections.Generic.Dictionary{``0,``1},``0)
  commentId: M:AdvancedSceneManager.Utility.DictionaryUtility.EnsureAdded``2(System.Collections.Generic.Dictionary{``0,``1},``0)
  isExternal: true
  name: EnsureAdded<TKey, TValue>(Dictionary<TKey, TValue>, TKey)
  nameWithType: DictionaryUtility.EnsureAdded<TKey, TValue>(Dictionary<TKey, TValue>, TKey)
  fullName: AdvancedSceneManager.Utility.DictionaryUtility.EnsureAdded<TKey, TValue>(System.Collections.Generic.Dictionary<TKey, TValue>, TKey)
  nameWithType.vb: DictionaryUtility.EnsureAdded(Of TKey, TValue)(Dictionary(Of TKey, TValue), TKey)
  fullName.vb: AdvancedSceneManager.Utility.DictionaryUtility.EnsureAdded(Of TKey, TValue)(System.Collections.Generic.Dictionary(Of TKey, TValue), TKey)
  name.vb: EnsureAdded(Of TKey, TValue)(Dictionary(Of TKey, TValue), TKey)
  spec.csharp:
  - uid: AdvancedSceneManager.Utility.DictionaryUtility.EnsureAdded``2(System.Collections.Generic.Dictionary{``0,``1},``0)
    name: EnsureAdded<TKey, TValue>
    nameWithType: DictionaryUtility.EnsureAdded<TKey, TValue>
    fullName: AdvancedSceneManager.Utility.DictionaryUtility.EnsureAdded<TKey, TValue>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AdvancedSceneManager.Utility.DictionaryUtility.EnsureAdded``2(System.Collections.Generic.Dictionary{``0,``1},``0)
    name: EnsureAdded(Of TKey, TValue)
    nameWithType: DictionaryUtility.EnsureAdded(Of TKey, TValue)
    fullName: AdvancedSceneManager.Utility.DictionaryUtility.EnsureAdded(Of TKey, TValue)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: AdvancedSceneManager.Utility.DictionaryUtility.Add``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)
  commentId: M:AdvancedSceneManager.Utility.DictionaryUtility.Add``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)
  isExternal: true
  name: Add<TKey, TValue>(Dictionary<TKey, TValue>, TKey, TValue)
  nameWithType: DictionaryUtility.Add<TKey, TValue>(Dictionary<TKey, TValue>, TKey, TValue)
  fullName: AdvancedSceneManager.Utility.DictionaryUtility.Add<TKey, TValue>(System.Collections.Generic.Dictionary<TKey, TValue>, TKey, TValue)
  nameWithType.vb: DictionaryUtility.Add(Of TKey, TValue)(Dictionary(Of TKey, TValue), TKey, TValue)
  fullName.vb: AdvancedSceneManager.Utility.DictionaryUtility.Add(Of TKey, TValue)(System.Collections.Generic.Dictionary(Of TKey, TValue), TKey, TValue)
  name.vb: Add(Of TKey, TValue)(Dictionary(Of TKey, TValue), TKey, TValue)
  spec.csharp:
  - uid: AdvancedSceneManager.Utility.DictionaryUtility.Add``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)
    name: Add<TKey, TValue>
    nameWithType: DictionaryUtility.Add<TKey, TValue>
    fullName: AdvancedSceneManager.Utility.DictionaryUtility.Add<TKey, TValue>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AdvancedSceneManager.Utility.DictionaryUtility.Add``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)
    name: Add(Of TKey, TValue)
    nameWithType: DictionaryUtility.Add(Of TKey, TValue)
    fullName: AdvancedSceneManager.Utility.DictionaryUtility.Add(Of TKey, TValue)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: AdvancedSceneManager.Utility.DictionaryUtility.GetValue``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)
  commentId: M:AdvancedSceneManager.Utility.DictionaryUtility.GetValue``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)
  isExternal: true
  name: GetValue<TKey, TValue>(Dictionary<TKey, TValue>, TKey, TValue)
  nameWithType: DictionaryUtility.GetValue<TKey, TValue>(Dictionary<TKey, TValue>, TKey, TValue)
  fullName: AdvancedSceneManager.Utility.DictionaryUtility.GetValue<TKey, TValue>(System.Collections.Generic.Dictionary<TKey, TValue>, TKey, TValue)
  nameWithType.vb: DictionaryUtility.GetValue(Of TKey, TValue)(Dictionary(Of TKey, TValue), TKey, TValue)
  fullName.vb: AdvancedSceneManager.Utility.DictionaryUtility.GetValue(Of TKey, TValue)(System.Collections.Generic.Dictionary(Of TKey, TValue), TKey, TValue)
  name.vb: GetValue(Of TKey, TValue)(Dictionary(Of TKey, TValue), TKey, TValue)
  spec.csharp:
  - uid: AdvancedSceneManager.Utility.DictionaryUtility.GetValue``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)
    name: GetValue<TKey, TValue>
    nameWithType: DictionaryUtility.GetValue<TKey, TValue>
    fullName: AdvancedSceneManager.Utility.DictionaryUtility.GetValue<TKey, TValue>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AdvancedSceneManager.Utility.DictionaryUtility.GetValue``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)
    name: GetValue(Of TKey, TValue)
    nameWithType: DictionaryUtility.GetValue(Of TKey, TValue)
    fullName: AdvancedSceneManager.Utility.DictionaryUtility.GetValue(Of TKey, TValue)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: AdvancedSceneManager.Editor.Utility.ListUtility.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})
  commentId: M:AdvancedSceneManager.Editor.Utility.ListUtility.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})
  isExternal: true
  name: ForEach<T>(IEnumerable<T>, Action<T, Int32>)
  nameWithType: ListUtility.ForEach<T>(IEnumerable<T>, Action<T, Int32>)
  fullName: AdvancedSceneManager.Editor.Utility.ListUtility.ForEach<T>(System.Collections.Generic.IEnumerable<T>, System.Action<T, System.Int32>)
  nameWithType.vb: ListUtility.ForEach(Of T)(IEnumerable(Of T), Action(Of T, Int32))
  fullName.vb: AdvancedSceneManager.Editor.Utility.ListUtility.ForEach(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Action(Of T, System.Int32))
  name.vb: ForEach(Of T)(IEnumerable(Of T), Action(Of T, Int32))
  spec.csharp:
  - uid: AdvancedSceneManager.Editor.Utility.ListUtility.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})
    name: ForEach<T>
    nameWithType: ListUtility.ForEach<T>
    fullName: AdvancedSceneManager.Editor.Utility.ListUtility.ForEach<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AdvancedSceneManager.Editor.Utility.ListUtility.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})
    name: ForEach(Of T)
    nameWithType: ListUtility.ForEach(Of T)
    fullName: AdvancedSceneManager.Editor.Utility.ListUtility.ForEach(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: AdvancedSceneManager.Editor.Utility.ListUtility
  commentId: T:AdvancedSceneManager.Editor.Utility.ListUtility
  parent: AdvancedSceneManager.Editor.Utility
  name: ListUtility
  nameWithType: ListUtility
  fullName: AdvancedSceneManager.Editor.Utility.ListUtility
- uid: AdvancedSceneManager.Editor.Utility.ListUtility.Flatten``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}})
  commentId: M:AdvancedSceneManager.Editor.Utility.ListUtility.Flatten``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}})
  isExternal: true
  name: Flatten<T>(IEnumerable<T>, Func<T, IEnumerable<T>>)
  nameWithType: ListUtility.Flatten<T>(IEnumerable<T>, Func<T, IEnumerable<T>>)
  fullName: AdvancedSceneManager.Editor.Utility.ListUtility.Flatten<T>(System.Collections.Generic.IEnumerable<T>, System.Func<T, System.Collections.Generic.IEnumerable<T>>)
  nameWithType.vb: ListUtility.Flatten(Of T)(IEnumerable(Of T), Func(Of T, IEnumerable(Of T)))
  fullName.vb: AdvancedSceneManager.Editor.Utility.ListUtility.Flatten(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, System.Collections.Generic.IEnumerable(Of T)))
  name.vb: Flatten(Of T)(IEnumerable(Of T), Func(Of T, IEnumerable(Of T)))
  spec.csharp:
  - uid: AdvancedSceneManager.Editor.Utility.ListUtility.Flatten``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}})
    name: Flatten<T>
    nameWithType: ListUtility.Flatten<T>
    fullName: AdvancedSceneManager.Editor.Utility.ListUtility.Flatten<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AdvancedSceneManager.Editor.Utility.ListUtility.Flatten``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}})
    name: Flatten(Of T)
    nameWithType: ListUtility.Flatten(Of T)
    fullName: AdvancedSceneManager.Editor.Utility.ListUtility.Flatten(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: AdvancedSceneManager.Editor.Utility.ListUtility.Except``1(System.Collections.Generic.IEnumerable{``0},``0)
  commentId: M:AdvancedSceneManager.Editor.Utility.ListUtility.Except``1(System.Collections.Generic.IEnumerable{``0},``0)
  isExternal: true
  name: Except<T>(IEnumerable<T>, T)
  nameWithType: ListUtility.Except<T>(IEnumerable<T>, T)
  fullName: AdvancedSceneManager.Editor.Utility.ListUtility.Except<T>(System.Collections.Generic.IEnumerable<T>, T)
  nameWithType.vb: ListUtility.Except(Of T)(IEnumerable(Of T), T)
  fullName.vb: AdvancedSceneManager.Editor.Utility.ListUtility.Except(Of T)(System.Collections.Generic.IEnumerable(Of T), T)
  name.vb: Except(Of T)(IEnumerable(Of T), T)
  spec.csharp:
  - uid: AdvancedSceneManager.Editor.Utility.ListUtility.Except``1(System.Collections.Generic.IEnumerable{``0},``0)
    name: Except<T>
    nameWithType: ListUtility.Except<T>
    fullName: AdvancedSceneManager.Editor.Utility.ListUtility.Except<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AdvancedSceneManager.Editor.Utility.ListUtility.Except``1(System.Collections.Generic.IEnumerable{``0},``0)
    name: Except(Of T)
    nameWithType: ListUtility.Except(Of T)
    fullName: AdvancedSceneManager.Editor.Utility.ListUtility.Except(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: AdvancedSceneManager.Editor.Utility.ListUtility.GroupConsecutive``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})
  commentId: M:AdvancedSceneManager.Editor.Utility.ListUtility.GroupConsecutive``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})
  isExternal: true
  name: GroupConsecutive<T>(IEnumerable<T>, Func<T, T, Boolean>)
  nameWithType: ListUtility.GroupConsecutive<T>(IEnumerable<T>, Func<T, T, Boolean>)
  fullName: AdvancedSceneManager.Editor.Utility.ListUtility.GroupConsecutive<T>(System.Collections.Generic.IEnumerable<T>, System.Func<T, T, System.Boolean>)
  nameWithType.vb: ListUtility.GroupConsecutive(Of T)(IEnumerable(Of T), Func(Of T, T, Boolean))
  fullName.vb: AdvancedSceneManager.Editor.Utility.ListUtility.GroupConsecutive(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, T, System.Boolean))
  name.vb: GroupConsecutive(Of T)(IEnumerable(Of T), Func(Of T, T, Boolean))
  spec.csharp:
  - uid: AdvancedSceneManager.Editor.Utility.ListUtility.GroupConsecutive``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})
    name: GroupConsecutive<T>
    nameWithType: ListUtility.GroupConsecutive<T>
    fullName: AdvancedSceneManager.Editor.Utility.ListUtility.GroupConsecutive<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AdvancedSceneManager.Editor.Utility.ListUtility.GroupConsecutive``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})
    name: GroupConsecutive(Of T)
    nameWithType: ListUtility.GroupConsecutive(Of T)
    fullName: AdvancedSceneManager.Editor.Utility.ListUtility.GroupConsecutive(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: AdvancedSceneManager.Editor.Utility
  commentId: N:AdvancedSceneManager.Editor.Utility
  name: AdvancedSceneManager.Editor.Utility
  nameWithType: AdvancedSceneManager.Editor.Utility
  fullName: AdvancedSceneManager.Editor.Utility
- uid: AdvancedSceneManager.Models.TagList.Item*
  commentId: Overload:AdvancedSceneManager.Models.TagList.Item
  name: Item
  nameWithType: TagList.Item
  fullName: AdvancedSceneManager.Models.TagList.Item
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: AdvancedSceneManager.Models.SceneTag
  commentId: T:AdvancedSceneManager.Models.SceneTag
  parent: AdvancedSceneManager.Models
  name: SceneTag
  nameWithType: SceneTag
  fullName: AdvancedSceneManager.Models.SceneTag
- uid: AdvancedSceneManager.Models.Scene
  commentId: T:AdvancedSceneManager.Models.Scene
  parent: AdvancedSceneManager.Models
  name: Scene
  nameWithType: Scene
  fullName: AdvancedSceneManager.Models.Scene
- uid: AdvancedSceneManager.Models.TagList.TryGetValue*
  commentId: Overload:AdvancedSceneManager.Models.TagList.TryGetValue
  name: TryGetValue
  nameWithType: TagList.TryGetValue
  fullName: AdvancedSceneManager.Models.TagList.TryGetValue
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
