### YamlMime:ManagedReference
items:
- uid: AdvancedSceneManager.Core.Actions.OverridableAction`1
  commentId: T:AdvancedSceneManager.Core.Actions.OverridableAction`1
  id: OverridableAction`1
  parent: AdvancedSceneManager.Core.Actions
  children:
  - AdvancedSceneManager.Core.Actions.OverridableAction`1.BeforeDoAction(System.Boolean@)
  - AdvancedSceneManager.Core.Actions.OverridableAction`1.ClearOverride(System.String)
  - AdvancedSceneManager.Core.Actions.OverridableAction`1.ClearOverrides
  - AdvancedSceneManager.Core.Actions.OverridableAction`1.DoAction(AdvancedSceneManager.Core.SceneManagerBase)
  - AdvancedSceneManager.Core.Actions.OverridableAction`1.DoNonOverridenAction(AdvancedSceneManager.Core.SceneManagerBase)
  - AdvancedSceneManager.Core.Actions.OverridableAction`1.lazyScene
  - AdvancedSceneManager.Core.Actions.OverridableAction`1.Override(System.String,System.Func{AdvancedSceneManager.Core.SceneManagerBase,`0,System.Collections.IEnumerator})
  - AdvancedSceneManager.Core.Actions.OverridableAction`1.overrides
  - AdvancedSceneManager.Core.Actions.OverridableAction`1.ToString
  langs:
  - csharp
  - vb
  name: OverridableAction<T>
  nameWithType: OverridableAction<T>
  fullName: AdvancedSceneManager.Core.Actions.OverridableAction<T>
  type: Class
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Actions/Utility/OverridableAction.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: OverridableAction
    path: ../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Actions/Utility/OverridableAction.cs
    startLine: 10
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core.Actions
  summary: An action that can have its functionality overriden, this is needed to provide addressables support. When overriding default ASM actions, use caution since this will obviously lead to undocumented behavior.
  example: []
  syntax:
    content: 'public abstract class OverridableAction<T> : SceneAction where T : OverridableAction<T>'
    typeParameters:
    - id: T
    content.vb: >-
      Public MustInherit Class OverridableAction(Of T As OverridableAction(Of T))
          Inherits SceneAction
  inheritance:
  - System.Object
  - AdvancedSceneManager.Core.Actions.SceneAction
  derivedClasses:
  - AdvancedSceneManager.Core.Actions.SceneCloseCallbackAction
  - AdvancedSceneManager.Core.Actions.SceneFinishLoadAction
  - AdvancedSceneManager.Core.Actions.SceneLoadAction
  - AdvancedSceneManager.Core.Actions.SceneOpenCallbackAction
  - AdvancedSceneManager.Core.Actions.SceneUnloadAction
  inheritedMembers:
  - AdvancedSceneManager.Core.Actions.SceneAction.reportsProgress
  - AdvancedSceneManager.Core.Actions.SceneAction.openScene
  - AdvancedSceneManager.Core.Actions.SceneAction.scene
  - AdvancedSceneManager.Core.Actions.SceneAction.collection
  - AdvancedSceneManager.Core.Actions.SceneAction.progress
  - AdvancedSceneManager.Core.Actions.SceneAction.isDone
  - AdvancedSceneManager.Core.Actions.SceneAction.RegisterCallback(System.Action)
  - AdvancedSceneManager.Core.Actions.SceneAction.UnregisterCallback(System.Action)
  - AdvancedSceneManager.Core.Actions.SceneAction.OnProgressCallback(System.Action{System.Single})
  - AdvancedSceneManager.Core.Actions.SceneAction.OnProgress(System.Single)
  - AdvancedSceneManager.Core.Actions.SceneAction.Done
  - AdvancedSceneManager.Core.Actions.SceneAction.Done(AdvancedSceneManager.Core.OpenSceneInfo)
  nameWithType.vb: OverridableAction(Of T)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: AdvancedSceneManager.Core.Actions.OverridableAction(Of T)
  name.vb: OverridableAction(Of T)
- uid: AdvancedSceneManager.Core.Actions.OverridableAction`1.overrides
  commentId: P:AdvancedSceneManager.Core.Actions.OverridableAction`1.overrides
  id: overrides
  parent: AdvancedSceneManager.Core.Actions.OverridableAction`1
  langs:
  - csharp
  - vb
  name: overrides
  nameWithType: OverridableAction<T>.overrides
  fullName: AdvancedSceneManager.Core.Actions.OverridableAction<T>.overrides
  type: Property
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Actions/Utility/OverridableAction.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: overrides
    path: ../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Actions/Utility/OverridableAction.cs
    startLine: 19
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core.Actions
  summary: All overriden scenes.
  example: []
  syntax:
    content: public static ReadOnlyDictionary<string, Func<SceneManagerBase, T, IEnumerator>> overrides { get; }
    parameters: []
    return:
      type: System.Collections.ObjectModel.ReadOnlyDictionary{System.String,System.Func{AdvancedSceneManager.Core.SceneManagerBase,{T},System.Collections.IEnumerator}}
    content.vb: Public Shared ReadOnly Property overrides As ReadOnlyDictionary(Of String, Func(Of SceneManagerBase, T, IEnumerator))
  overload: AdvancedSceneManager.Core.Actions.OverridableAction`1.overrides*
  nameWithType.vb: OverridableAction(Of T).overrides
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
  fullName.vb: AdvancedSceneManager.Core.Actions.OverridableAction(Of T).overrides
- uid: AdvancedSceneManager.Core.Actions.OverridableAction`1.Override(System.String,System.Func{AdvancedSceneManager.Core.SceneManagerBase,`0,System.Collections.IEnumerator})
  commentId: M:AdvancedSceneManager.Core.Actions.OverridableAction`1.Override(System.String,System.Func{AdvancedSceneManager.Core.SceneManagerBase,`0,System.Collections.IEnumerator})
  id: Override(System.String,System.Func{AdvancedSceneManager.Core.SceneManagerBase,`0,System.Collections.IEnumerator})
  parent: AdvancedSceneManager.Core.Actions.OverridableAction`1
  langs:
  - csharp
  - vb
  name: Override(String, Func<SceneManagerBase, T, IEnumerator>)
  nameWithType: OverridableAction<T>.Override(String, Func<SceneManagerBase, T, IEnumerator>)
  fullName: AdvancedSceneManager.Core.Actions.OverridableAction<T>.Override(System.String, System.Func<AdvancedSceneManager.Core.SceneManagerBase, T, System.Collections.IEnumerator>)
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Actions/Utility/OverridableAction.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: Override
    path: ../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Actions/Utility/OverridableAction.cs
    startLine: 22
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core.Actions
  summary: Overrides behavior for the specified scene.
  example: []
  syntax:
    content: public static void Override(string scene, Func<SceneManagerBase, T, IEnumerator> coroutine)
    parameters:
    - id: scene
      type: System.String
    - id: coroutine
      type: System.Func{AdvancedSceneManager.Core.SceneManagerBase,{T},System.Collections.IEnumerator}
    content.vb: Public Shared Sub Override(scene As String, coroutine As Func(Of SceneManagerBase, T, IEnumerator))
  overload: AdvancedSceneManager.Core.Actions.OverridableAction`1.Override*
  nameWithType.vb: OverridableAction(Of T).Override(String, Func(Of SceneManagerBase, T, IEnumerator))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AdvancedSceneManager.Core.Actions.OverridableAction(Of T).Override(System.String, System.Func(Of AdvancedSceneManager.Core.SceneManagerBase, T, System.Collections.IEnumerator))
  name.vb: Override(String, Func(Of SceneManagerBase, T, IEnumerator))
- uid: AdvancedSceneManager.Core.Actions.OverridableAction`1.ClearOverride(System.String)
  commentId: M:AdvancedSceneManager.Core.Actions.OverridableAction`1.ClearOverride(System.String)
  id: ClearOverride(System.String)
  parent: AdvancedSceneManager.Core.Actions.OverridableAction`1
  langs:
  - csharp
  - vb
  name: ClearOverride(String)
  nameWithType: OverridableAction<T>.ClearOverride(String)
  fullName: AdvancedSceneManager.Core.Actions.OverridableAction<T>.ClearOverride(System.String)
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Actions/Utility/OverridableAction.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: ClearOverride
    path: ../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Actions/Utility/OverridableAction.cs
    startLine: 26
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core.Actions
  summary: Clears overrides for the specified scene.
  example: []
  syntax:
    content: public static void ClearOverride(string scene)
    parameters:
    - id: scene
      type: System.String
    content.vb: Public Shared Sub ClearOverride(scene As String)
  overload: AdvancedSceneManager.Core.Actions.OverridableAction`1.ClearOverride*
  nameWithType.vb: OverridableAction(Of T).ClearOverride(String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AdvancedSceneManager.Core.Actions.OverridableAction(Of T).ClearOverride(System.String)
- uid: AdvancedSceneManager.Core.Actions.OverridableAction`1.ClearOverrides
  commentId: M:AdvancedSceneManager.Core.Actions.OverridableAction`1.ClearOverrides
  id: ClearOverrides
  parent: AdvancedSceneManager.Core.Actions.OverridableAction`1
  langs:
  - csharp
  - vb
  name: ClearOverrides()
  nameWithType: OverridableAction<T>.ClearOverrides()
  fullName: AdvancedSceneManager.Core.Actions.OverridableAction<T>.ClearOverrides()
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Actions/Utility/OverridableAction.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: ClearOverrides
    path: ../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Actions/Utility/OverridableAction.cs
    startLine: 30
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core.Actions
  summary: Clears all overrides.
  example: []
  syntax:
    content: public static void ClearOverrides()
    content.vb: Public Shared Sub ClearOverrides
  overload: AdvancedSceneManager.Core.Actions.OverridableAction`1.ClearOverrides*
  nameWithType.vb: OverridableAction(Of T).ClearOverrides()
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AdvancedSceneManager.Core.Actions.OverridableAction(Of T).ClearOverrides()
- uid: AdvancedSceneManager.Core.Actions.OverridableAction`1.DoAction(AdvancedSceneManager.Core.SceneManagerBase)
  commentId: M:AdvancedSceneManager.Core.Actions.OverridableAction`1.DoAction(AdvancedSceneManager.Core.SceneManagerBase)
  id: DoAction(AdvancedSceneManager.Core.SceneManagerBase)
  parent: AdvancedSceneManager.Core.Actions.OverridableAction`1
  langs:
  - csharp
  - vb
  name: DoAction(SceneManagerBase)
  nameWithType: OverridableAction<T>.DoAction(SceneManagerBase)
  fullName: AdvancedSceneManager.Core.Actions.OverridableAction<T>.DoAction(AdvancedSceneManager.Core.SceneManagerBase)
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Actions/Utility/OverridableAction.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: DoAction
    path: ../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Actions/Utility/OverridableAction.cs
    startLine: 37
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core.Actions
  summary: "\n<p>This must not be overriden since <xref href=\"AdvancedSceneManager.Core.Actions.OverridableAction%601\" data-throw-if-not-resolved=\"false\"></xref> does not work otherwise</p> \n<p>Override <xref href=\"AdvancedSceneManager.Core.Actions.OverridableAction%601.DoNonOverridenAction(AdvancedSceneManager.Core.SceneManagerBase)\" data-throw-if-not-resolved=\"false\"></xref> instead.</p>\n"
  example: []
  syntax:
    content: public override IEnumerator DoAction(SceneManagerBase _sceneManager)
    parameters:
    - id: _sceneManager
      type: AdvancedSceneManager.Core.SceneManagerBase
    return:
      type: System.Collections.IEnumerator
    content.vb: Public Overrides Function DoAction(_sceneManager As SceneManagerBase) As IEnumerator
  overridden: AdvancedSceneManager.Core.Actions.SceneAction.DoAction(AdvancedSceneManager.Core.SceneManagerBase)
  overload: AdvancedSceneManager.Core.Actions.OverridableAction`1.DoAction*
  nameWithType.vb: OverridableAction(Of T).DoAction(SceneManagerBase)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: AdvancedSceneManager.Core.Actions.OverridableAction(Of T).DoAction(AdvancedSceneManager.Core.SceneManagerBase)
- uid: AdvancedSceneManager.Core.Actions.OverridableAction`1.DoNonOverridenAction(AdvancedSceneManager.Core.SceneManagerBase)
  commentId: M:AdvancedSceneManager.Core.Actions.OverridableAction`1.DoNonOverridenAction(AdvancedSceneManager.Core.SceneManagerBase)
  id: DoNonOverridenAction(AdvancedSceneManager.Core.SceneManagerBase)
  parent: AdvancedSceneManager.Core.Actions.OverridableAction`1
  langs:
  - csharp
  - vb
  name: DoNonOverridenAction(SceneManagerBase)
  nameWithType: OverridableAction<T>.DoNonOverridenAction(SceneManagerBase)
  fullName: AdvancedSceneManager.Core.Actions.OverridableAction<T>.DoNonOverridenAction(AdvancedSceneManager.Core.SceneManagerBase)
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Actions/Utility/OverridableAction.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: DoNonOverridenAction
    path: ../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Actions/Utility/OverridableAction.cs
    startLine: 60
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core.Actions
  syntax:
    content: public abstract IEnumerator DoNonOverridenAction(SceneManagerBase _sceneManager)
    parameters:
    - id: _sceneManager
      type: AdvancedSceneManager.Core.SceneManagerBase
    return:
      type: System.Collections.IEnumerator
    content.vb: Public MustOverride Function DoNonOverridenAction(_sceneManager As SceneManagerBase) As IEnumerator
  overload: AdvancedSceneManager.Core.Actions.OverridableAction`1.DoNonOverridenAction*
  nameWithType.vb: OverridableAction(Of T).DoNonOverridenAction(SceneManagerBase)
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: AdvancedSceneManager.Core.Actions.OverridableAction(Of T).DoNonOverridenAction(AdvancedSceneManager.Core.SceneManagerBase)
- uid: AdvancedSceneManager.Core.Actions.OverridableAction`1.BeforeDoAction(System.Boolean@)
  commentId: M:AdvancedSceneManager.Core.Actions.OverridableAction`1.BeforeDoAction(System.Boolean@)
  id: BeforeDoAction(System.Boolean@)
  parent: AdvancedSceneManager.Core.Actions.OverridableAction`1
  langs:
  - csharp
  - vb
  name: BeforeDoAction(out Boolean)
  nameWithType: OverridableAction<T>.BeforeDoAction(out Boolean)
  fullName: AdvancedSceneManager.Core.Actions.OverridableAction<T>.BeforeDoAction(out System.Boolean)
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Actions/Utility/OverridableAction.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: BeforeDoAction
    path: ../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Actions/Utility/OverridableAction.cs
    startLine: 62
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core.Actions
  syntax:
    content: protected virtual void BeforeDoAction(out bool exitOutEarly)
    parameters:
    - id: exitOutEarly
      type: System.Boolean
    content.vb: Protected Overridable Sub BeforeDoAction(ByRef exitOutEarly As Boolean)
  overload: AdvancedSceneManager.Core.Actions.OverridableAction`1.BeforeDoAction*
  nameWithType.vb: OverridableAction(Of T).BeforeDoAction(ByRef Boolean)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: AdvancedSceneManager.Core.Actions.OverridableAction(Of T).BeforeDoAction(ByRef System.Boolean)
  name.vb: BeforeDoAction(ByRef Boolean)
- uid: AdvancedSceneManager.Core.Actions.OverridableAction`1.lazyScene
  commentId: P:AdvancedSceneManager.Core.Actions.OverridableAction`1.lazyScene
  id: lazyScene
  parent: AdvancedSceneManager.Core.Actions.OverridableAction`1
  langs:
  - csharp
  - vb
  name: lazyScene
  nameWithType: OverridableAction<T>.lazyScene
  fullName: AdvancedSceneManager.Core.Actions.OverridableAction<T>.lazyScene
  type: Property
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Actions/Utility/OverridableAction.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: lazyScene
    path: ../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Actions/Utility/OverridableAction.cs
    startLine: 65
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core.Actions
  syntax:
    content: protected Func<OpenSceneInfo> lazyScene { get; set; }
    parameters: []
    return:
      type: System.Func{AdvancedSceneManager.Core.OpenSceneInfo}
    content.vb: Protected Property lazyScene As Func(Of OpenSceneInfo)
  overload: AdvancedSceneManager.Core.Actions.OverridableAction`1.lazyScene*
  nameWithType.vb: OverridableAction(Of T).lazyScene
  modifiers.csharp:
  - protected
  - get
  - set
  modifiers.vb:
  - Protected
  fullName.vb: AdvancedSceneManager.Core.Actions.OverridableAction(Of T).lazyScene
- uid: AdvancedSceneManager.Core.Actions.OverridableAction`1.ToString
  commentId: M:AdvancedSceneManager.Core.Actions.OverridableAction`1.ToString
  id: ToString
  parent: AdvancedSceneManager.Core.Actions.OverridableAction`1
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: OverridableAction<T>.ToString()
  fullName: AdvancedSceneManager.Core.Actions.OverridableAction<T>.ToString()
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Actions/Utility/OverridableAction.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: ToString
    path: ../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/Scene Actions/Utility/OverridableAction.cs
    startLine: 67
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core.Actions
  syntax:
    content: public override string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString As String
  overridden: AdvancedSceneManager.Core.Actions.SceneAction.ToString
  overload: AdvancedSceneManager.Core.Actions.OverridableAction`1.ToString*
  nameWithType.vb: OverridableAction(Of T).ToString()
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: AdvancedSceneManager.Core.Actions.OverridableAction(Of T).ToString()
references:
- uid: AdvancedSceneManager.Core.Actions
  commentId: N:AdvancedSceneManager.Core.Actions
  name: AdvancedSceneManager.Core.Actions
  nameWithType: AdvancedSceneManager.Core.Actions
  fullName: AdvancedSceneManager.Core.Actions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: AdvancedSceneManager.Core.Actions.SceneAction
  commentId: T:AdvancedSceneManager.Core.Actions.SceneAction
  parent: AdvancedSceneManager.Core.Actions
  name: SceneAction
  nameWithType: SceneAction
  fullName: AdvancedSceneManager.Core.Actions.SceneAction
- uid: AdvancedSceneManager.Core.Actions.SceneAction.reportsProgress
  commentId: P:AdvancedSceneManager.Core.Actions.SceneAction.reportsProgress
  parent: AdvancedSceneManager.Core.Actions.SceneAction
  name: reportsProgress
  nameWithType: SceneAction.reportsProgress
  fullName: AdvancedSceneManager.Core.Actions.SceneAction.reportsProgress
- uid: AdvancedSceneManager.Core.Actions.SceneAction.openScene
  commentId: P:AdvancedSceneManager.Core.Actions.SceneAction.openScene
  parent: AdvancedSceneManager.Core.Actions.SceneAction
  name: openScene
  nameWithType: SceneAction.openScene
  fullName: AdvancedSceneManager.Core.Actions.SceneAction.openScene
- uid: AdvancedSceneManager.Core.Actions.SceneAction.scene
  commentId: P:AdvancedSceneManager.Core.Actions.SceneAction.scene
  parent: AdvancedSceneManager.Core.Actions.SceneAction
  name: scene
  nameWithType: SceneAction.scene
  fullName: AdvancedSceneManager.Core.Actions.SceneAction.scene
- uid: AdvancedSceneManager.Core.Actions.SceneAction.collection
  commentId: P:AdvancedSceneManager.Core.Actions.SceneAction.collection
  parent: AdvancedSceneManager.Core.Actions.SceneAction
  name: collection
  nameWithType: SceneAction.collection
  fullName: AdvancedSceneManager.Core.Actions.SceneAction.collection
- uid: AdvancedSceneManager.Core.Actions.SceneAction.progress
  commentId: P:AdvancedSceneManager.Core.Actions.SceneAction.progress
  parent: AdvancedSceneManager.Core.Actions.SceneAction
  name: progress
  nameWithType: SceneAction.progress
  fullName: AdvancedSceneManager.Core.Actions.SceneAction.progress
- uid: AdvancedSceneManager.Core.Actions.SceneAction.isDone
  commentId: P:AdvancedSceneManager.Core.Actions.SceneAction.isDone
  parent: AdvancedSceneManager.Core.Actions.SceneAction
  name: isDone
  nameWithType: SceneAction.isDone
  fullName: AdvancedSceneManager.Core.Actions.SceneAction.isDone
- uid: AdvancedSceneManager.Core.Actions.SceneAction.RegisterCallback(System.Action)
  commentId: M:AdvancedSceneManager.Core.Actions.SceneAction.RegisterCallback(System.Action)
  parent: AdvancedSceneManager.Core.Actions.SceneAction
  isExternal: true
  name: RegisterCallback(Action)
  nameWithType: SceneAction.RegisterCallback(Action)
  fullName: AdvancedSceneManager.Core.Actions.SceneAction.RegisterCallback(System.Action)
  spec.csharp:
  - uid: AdvancedSceneManager.Core.Actions.SceneAction.RegisterCallback(System.Action)
    name: RegisterCallback
    nameWithType: SceneAction.RegisterCallback
    fullName: AdvancedSceneManager.Core.Actions.SceneAction.RegisterCallback
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AdvancedSceneManager.Core.Actions.SceneAction.RegisterCallback(System.Action)
    name: RegisterCallback
    nameWithType: SceneAction.RegisterCallback
    fullName: AdvancedSceneManager.Core.Actions.SceneAction.RegisterCallback
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: AdvancedSceneManager.Core.Actions.SceneAction.UnregisterCallback(System.Action)
  commentId: M:AdvancedSceneManager.Core.Actions.SceneAction.UnregisterCallback(System.Action)
  parent: AdvancedSceneManager.Core.Actions.SceneAction
  isExternal: true
  name: UnregisterCallback(Action)
  nameWithType: SceneAction.UnregisterCallback(Action)
  fullName: AdvancedSceneManager.Core.Actions.SceneAction.UnregisterCallback(System.Action)
  spec.csharp:
  - uid: AdvancedSceneManager.Core.Actions.SceneAction.UnregisterCallback(System.Action)
    name: UnregisterCallback
    nameWithType: SceneAction.UnregisterCallback
    fullName: AdvancedSceneManager.Core.Actions.SceneAction.UnregisterCallback
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AdvancedSceneManager.Core.Actions.SceneAction.UnregisterCallback(System.Action)
    name: UnregisterCallback
    nameWithType: SceneAction.UnregisterCallback
    fullName: AdvancedSceneManager.Core.Actions.SceneAction.UnregisterCallback
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: AdvancedSceneManager.Core.Actions.SceneAction.OnProgressCallback(System.Action{System.Single})
  commentId: M:AdvancedSceneManager.Core.Actions.SceneAction.OnProgressCallback(System.Action{System.Single})
  parent: AdvancedSceneManager.Core.Actions.SceneAction
  isExternal: true
  name: OnProgressCallback(Action<Single>)
  nameWithType: SceneAction.OnProgressCallback(Action<Single>)
  fullName: AdvancedSceneManager.Core.Actions.SceneAction.OnProgressCallback(System.Action<System.Single>)
  nameWithType.vb: SceneAction.OnProgressCallback(Action(Of Single))
  fullName.vb: AdvancedSceneManager.Core.Actions.SceneAction.OnProgressCallback(System.Action(Of System.Single))
  name.vb: OnProgressCallback(Action(Of Single))
  spec.csharp:
  - uid: AdvancedSceneManager.Core.Actions.SceneAction.OnProgressCallback(System.Action{System.Single})
    name: OnProgressCallback
    nameWithType: SceneAction.OnProgressCallback
    fullName: AdvancedSceneManager.Core.Actions.SceneAction.OnProgressCallback
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AdvancedSceneManager.Core.Actions.SceneAction.OnProgressCallback(System.Action{System.Single})
    name: OnProgressCallback
    nameWithType: SceneAction.OnProgressCallback
    fullName: AdvancedSceneManager.Core.Actions.SceneAction.OnProgressCallback
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: AdvancedSceneManager.Core.Actions.SceneAction.OnProgress(System.Single)
  commentId: M:AdvancedSceneManager.Core.Actions.SceneAction.OnProgress(System.Single)
  parent: AdvancedSceneManager.Core.Actions.SceneAction
  isExternal: true
  name: OnProgress(Single)
  nameWithType: SceneAction.OnProgress(Single)
  fullName: AdvancedSceneManager.Core.Actions.SceneAction.OnProgress(System.Single)
  spec.csharp:
  - uid: AdvancedSceneManager.Core.Actions.SceneAction.OnProgress(System.Single)
    name: OnProgress
    nameWithType: SceneAction.OnProgress
    fullName: AdvancedSceneManager.Core.Actions.SceneAction.OnProgress
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AdvancedSceneManager.Core.Actions.SceneAction.OnProgress(System.Single)
    name: OnProgress
    nameWithType: SceneAction.OnProgress
    fullName: AdvancedSceneManager.Core.Actions.SceneAction.OnProgress
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: AdvancedSceneManager.Core.Actions.SceneAction.Done
  commentId: M:AdvancedSceneManager.Core.Actions.SceneAction.Done
  parent: AdvancedSceneManager.Core.Actions.SceneAction
  name: Done()
  nameWithType: SceneAction.Done()
  fullName: AdvancedSceneManager.Core.Actions.SceneAction.Done()
  spec.csharp:
  - uid: AdvancedSceneManager.Core.Actions.SceneAction.Done
    name: Done
    nameWithType: SceneAction.Done
    fullName: AdvancedSceneManager.Core.Actions.SceneAction.Done
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AdvancedSceneManager.Core.Actions.SceneAction.Done
    name: Done
    nameWithType: SceneAction.Done
    fullName: AdvancedSceneManager.Core.Actions.SceneAction.Done
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: AdvancedSceneManager.Core.Actions.SceneAction.Done(AdvancedSceneManager.Core.OpenSceneInfo)
  commentId: M:AdvancedSceneManager.Core.Actions.SceneAction.Done(AdvancedSceneManager.Core.OpenSceneInfo)
  parent: AdvancedSceneManager.Core.Actions.SceneAction
  name: Done(OpenSceneInfo)
  nameWithType: SceneAction.Done(OpenSceneInfo)
  fullName: AdvancedSceneManager.Core.Actions.SceneAction.Done(AdvancedSceneManager.Core.OpenSceneInfo)
  spec.csharp:
  - uid: AdvancedSceneManager.Core.Actions.SceneAction.Done(AdvancedSceneManager.Core.OpenSceneInfo)
    name: Done
    nameWithType: SceneAction.Done
    fullName: AdvancedSceneManager.Core.Actions.SceneAction.Done
  - name: (
    nameWithType: (
    fullName: (
  - uid: AdvancedSceneManager.Core.OpenSceneInfo
    name: OpenSceneInfo
    nameWithType: OpenSceneInfo
    fullName: AdvancedSceneManager.Core.OpenSceneInfo
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AdvancedSceneManager.Core.Actions.SceneAction.Done(AdvancedSceneManager.Core.OpenSceneInfo)
    name: Done
    nameWithType: SceneAction.Done
    fullName: AdvancedSceneManager.Core.Actions.SceneAction.Done
  - name: (
    nameWithType: (
    fullName: (
  - uid: AdvancedSceneManager.Core.OpenSceneInfo
    name: OpenSceneInfo
    nameWithType: OpenSceneInfo
    fullName: AdvancedSceneManager.Core.OpenSceneInfo
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: AdvancedSceneManager.Core.Actions.OverridableAction`1.overrides*
  commentId: Overload:AdvancedSceneManager.Core.Actions.OverridableAction`1.overrides
  name: overrides
  nameWithType: OverridableAction<T>.overrides
  fullName: AdvancedSceneManager.Core.Actions.OverridableAction<T>.overrides
  nameWithType.vb: OverridableAction(Of T).overrides
  fullName.vb: AdvancedSceneManager.Core.Actions.OverridableAction(Of T).overrides
- uid: System.Collections.ObjectModel.ReadOnlyDictionary{System.String,System.Func{AdvancedSceneManager.Core.SceneManagerBase,{T},System.Collections.IEnumerator}}
  commentId: T:System.Collections.ObjectModel.ReadOnlyDictionary{System.String,System.Func{AdvancedSceneManager.Core.SceneManagerBase,`0,System.Collections.IEnumerator}}
  parent: System.Collections.ObjectModel
  definition: System.Collections.ObjectModel.ReadOnlyDictionary`2
  name: ReadOnlyDictionary<String, Func<SceneManagerBase, T, IEnumerator>>
  nameWithType: ReadOnlyDictionary<String, Func<SceneManagerBase, T, IEnumerator>>
  fullName: System.Collections.ObjectModel.ReadOnlyDictionary<System.String, System.Func<AdvancedSceneManager.Core.SceneManagerBase, T, System.Collections.IEnumerator>>
  nameWithType.vb: ReadOnlyDictionary(Of String, Func(Of SceneManagerBase, T, IEnumerator))
  fullName.vb: System.Collections.ObjectModel.ReadOnlyDictionary(Of System.String, System.Func(Of AdvancedSceneManager.Core.SceneManagerBase, T, System.Collections.IEnumerator))
  name.vb: ReadOnlyDictionary(Of String, Func(Of SceneManagerBase, T, IEnumerator))
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyDictionary`2
    name: ReadOnlyDictionary
    nameWithType: ReadOnlyDictionary
    fullName: System.Collections.ObjectModel.ReadOnlyDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: AdvancedSceneManager.Core.SceneManagerBase
    name: SceneManagerBase
    nameWithType: SceneManagerBase
    fullName: AdvancedSceneManager.Core.SceneManagerBase
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.IEnumerator
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.IEnumerator
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyDictionary`2
    name: ReadOnlyDictionary
    nameWithType: ReadOnlyDictionary
    fullName: System.Collections.ObjectModel.ReadOnlyDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: AdvancedSceneManager.Core.SceneManagerBase
    name: SceneManagerBase
    nameWithType: SceneManagerBase
    fullName: AdvancedSceneManager.Core.SceneManagerBase
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.IEnumerator
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.IEnumerator
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyDictionary`2
  commentId: T:System.Collections.ObjectModel.ReadOnlyDictionary`2
  isExternal: true
  name: ReadOnlyDictionary<TKey, TValue>
  nameWithType: ReadOnlyDictionary<TKey, TValue>
  fullName: System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>
  nameWithType.vb: ReadOnlyDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyDictionary(Of TKey, TValue)
  name.vb: ReadOnlyDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyDictionary`2
    name: ReadOnlyDictionary
    nameWithType: ReadOnlyDictionary
    fullName: System.Collections.ObjectModel.ReadOnlyDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyDictionary`2
    name: ReadOnlyDictionary
    nameWithType: ReadOnlyDictionary
    fullName: System.Collections.ObjectModel.ReadOnlyDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel
  commentId: N:System.Collections.ObjectModel
  isExternal: true
  name: System.Collections.ObjectModel
  nameWithType: System.Collections.ObjectModel
  fullName: System.Collections.ObjectModel
- uid: AdvancedSceneManager.Core.Actions.OverridableAction`1.Override*
  commentId: Overload:AdvancedSceneManager.Core.Actions.OverridableAction`1.Override
  name: Override
  nameWithType: OverridableAction<T>.Override
  fullName: AdvancedSceneManager.Core.Actions.OverridableAction<T>.Override
  nameWithType.vb: OverridableAction(Of T).Override
  fullName.vb: AdvancedSceneManager.Core.Actions.OverridableAction(Of T).Override
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Func{AdvancedSceneManager.Core.SceneManagerBase,{T},System.Collections.IEnumerator}
  commentId: T:System.Func{AdvancedSceneManager.Core.SceneManagerBase,`0,System.Collections.IEnumerator}
  parent: System
  definition: System.Func`3
  name: Func<SceneManagerBase, T, IEnumerator>
  nameWithType: Func<SceneManagerBase, T, IEnumerator>
  fullName: System.Func<AdvancedSceneManager.Core.SceneManagerBase, T, System.Collections.IEnumerator>
  nameWithType.vb: Func(Of SceneManagerBase, T, IEnumerator)
  fullName.vb: System.Func(Of AdvancedSceneManager.Core.SceneManagerBase, T, System.Collections.IEnumerator)
  name.vb: Func(Of SceneManagerBase, T, IEnumerator)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: AdvancedSceneManager.Core.SceneManagerBase
    name: SceneManagerBase
    nameWithType: SceneManagerBase
    fullName: AdvancedSceneManager.Core.SceneManagerBase
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.IEnumerator
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.IEnumerator
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: AdvancedSceneManager.Core.SceneManagerBase
    name: SceneManagerBase
    nameWithType: SceneManagerBase
    fullName: AdvancedSceneManager.Core.SceneManagerBase
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.IEnumerator
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.IEnumerator
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`3
  commentId: T:System.Func`3
  isExternal: true
  name: Func<T1, T2, TResult>
  nameWithType: Func<T1, T2, TResult>
  fullName: System.Func<T1, T2, TResult>
  nameWithType.vb: Func(Of T1, T2, TResult)
  fullName.vb: System.Func(Of T1, T2, TResult)
  name.vb: Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: AdvancedSceneManager.Core.Actions.OverridableAction`1.ClearOverride*
  commentId: Overload:AdvancedSceneManager.Core.Actions.OverridableAction`1.ClearOverride
  name: ClearOverride
  nameWithType: OverridableAction<T>.ClearOverride
  fullName: AdvancedSceneManager.Core.Actions.OverridableAction<T>.ClearOverride
  nameWithType.vb: OverridableAction(Of T).ClearOverride
  fullName.vb: AdvancedSceneManager.Core.Actions.OverridableAction(Of T).ClearOverride
- uid: AdvancedSceneManager.Core.Actions.OverridableAction`1.ClearOverrides*
  commentId: Overload:AdvancedSceneManager.Core.Actions.OverridableAction`1.ClearOverrides
  name: ClearOverrides
  nameWithType: OverridableAction<T>.ClearOverrides
  fullName: AdvancedSceneManager.Core.Actions.OverridableAction<T>.ClearOverrides
  nameWithType.vb: OverridableAction(Of T).ClearOverrides
  fullName.vb: AdvancedSceneManager.Core.Actions.OverridableAction(Of T).ClearOverrides
- uid: AdvancedSceneManager.Core.Actions.OverridableAction`1
  commentId: T:AdvancedSceneManager.Core.Actions.OverridableAction`1
  name: OverridableAction<T>
  nameWithType: OverridableAction<T>
  fullName: AdvancedSceneManager.Core.Actions.OverridableAction<T>
  nameWithType.vb: OverridableAction(Of T)
  fullName.vb: AdvancedSceneManager.Core.Actions.OverridableAction(Of T)
  name.vb: OverridableAction(Of T)
  spec.csharp:
  - uid: AdvancedSceneManager.Core.Actions.OverridableAction`1
    name: OverridableAction
    nameWithType: OverridableAction
    fullName: AdvancedSceneManager.Core.Actions.OverridableAction
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: AdvancedSceneManager.Core.Actions.OverridableAction`1
    name: OverridableAction
    nameWithType: OverridableAction
    fullName: AdvancedSceneManager.Core.Actions.OverridableAction
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: AdvancedSceneManager.Core.Actions.OverridableAction`1.DoNonOverridenAction(AdvancedSceneManager.Core.SceneManagerBase)
  commentId: M:AdvancedSceneManager.Core.Actions.OverridableAction`1.DoNonOverridenAction(AdvancedSceneManager.Core.SceneManagerBase)
  name: DoNonOverridenAction(SceneManagerBase)
  nameWithType: OverridableAction<T>.DoNonOverridenAction(SceneManagerBase)
  fullName: AdvancedSceneManager.Core.Actions.OverridableAction<T>.DoNonOverridenAction(AdvancedSceneManager.Core.SceneManagerBase)
  nameWithType.vb: OverridableAction(Of T).DoNonOverridenAction(SceneManagerBase)
  fullName.vb: AdvancedSceneManager.Core.Actions.OverridableAction(Of T).DoNonOverridenAction(AdvancedSceneManager.Core.SceneManagerBase)
  spec.csharp:
  - uid: AdvancedSceneManager.Core.Actions.OverridableAction`1.DoNonOverridenAction(AdvancedSceneManager.Core.SceneManagerBase)
    name: DoNonOverridenAction
    nameWithType: OverridableAction<T>.DoNonOverridenAction
    fullName: AdvancedSceneManager.Core.Actions.OverridableAction<T>.DoNonOverridenAction
  - name: (
    nameWithType: (
    fullName: (
  - uid: AdvancedSceneManager.Core.SceneManagerBase
    name: SceneManagerBase
    nameWithType: SceneManagerBase
    fullName: AdvancedSceneManager.Core.SceneManagerBase
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AdvancedSceneManager.Core.Actions.OverridableAction`1.DoNonOverridenAction(AdvancedSceneManager.Core.SceneManagerBase)
    name: DoNonOverridenAction
    nameWithType: OverridableAction(Of T).DoNonOverridenAction
    fullName: AdvancedSceneManager.Core.Actions.OverridableAction(Of T).DoNonOverridenAction
  - name: (
    nameWithType: (
    fullName: (
  - uid: AdvancedSceneManager.Core.SceneManagerBase
    name: SceneManagerBase
    nameWithType: SceneManagerBase
    fullName: AdvancedSceneManager.Core.SceneManagerBase
  - name: )
    nameWithType: )
    fullName: )
- uid: AdvancedSceneManager.Core.Actions.SceneAction.DoAction(AdvancedSceneManager.Core.SceneManagerBase)
  commentId: M:AdvancedSceneManager.Core.Actions.SceneAction.DoAction(AdvancedSceneManager.Core.SceneManagerBase)
  parent: AdvancedSceneManager.Core.Actions.SceneAction
  name: DoAction(SceneManagerBase)
  nameWithType: SceneAction.DoAction(SceneManagerBase)
  fullName: AdvancedSceneManager.Core.Actions.SceneAction.DoAction(AdvancedSceneManager.Core.SceneManagerBase)
  spec.csharp:
  - uid: AdvancedSceneManager.Core.Actions.SceneAction.DoAction(AdvancedSceneManager.Core.SceneManagerBase)
    name: DoAction
    nameWithType: SceneAction.DoAction
    fullName: AdvancedSceneManager.Core.Actions.SceneAction.DoAction
  - name: (
    nameWithType: (
    fullName: (
  - uid: AdvancedSceneManager.Core.SceneManagerBase
    name: SceneManagerBase
    nameWithType: SceneManagerBase
    fullName: AdvancedSceneManager.Core.SceneManagerBase
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AdvancedSceneManager.Core.Actions.SceneAction.DoAction(AdvancedSceneManager.Core.SceneManagerBase)
    name: DoAction
    nameWithType: SceneAction.DoAction
    fullName: AdvancedSceneManager.Core.Actions.SceneAction.DoAction
  - name: (
    nameWithType: (
    fullName: (
  - uid: AdvancedSceneManager.Core.SceneManagerBase
    name: SceneManagerBase
    nameWithType: SceneManagerBase
    fullName: AdvancedSceneManager.Core.SceneManagerBase
  - name: )
    nameWithType: )
    fullName: )
- uid: AdvancedSceneManager.Core.Actions.OverridableAction`1.DoAction*
  commentId: Overload:AdvancedSceneManager.Core.Actions.OverridableAction`1.DoAction
  name: DoAction
  nameWithType: OverridableAction<T>.DoAction
  fullName: AdvancedSceneManager.Core.Actions.OverridableAction<T>.DoAction
  nameWithType.vb: OverridableAction(Of T).DoAction
  fullName.vb: AdvancedSceneManager.Core.Actions.OverridableAction(Of T).DoAction
- uid: AdvancedSceneManager.Core.SceneManagerBase
  commentId: T:AdvancedSceneManager.Core.SceneManagerBase
  parent: AdvancedSceneManager.Core
  name: SceneManagerBase
  nameWithType: SceneManagerBase
  fullName: AdvancedSceneManager.Core.SceneManagerBase
- uid: System.Collections.IEnumerator
  commentId: T:System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: AdvancedSceneManager.Core
  commentId: N:AdvancedSceneManager.Core
  name: AdvancedSceneManager.Core
  nameWithType: AdvancedSceneManager.Core
  fullName: AdvancedSceneManager.Core
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: AdvancedSceneManager.Core.Actions.OverridableAction`1.DoNonOverridenAction*
  commentId: Overload:AdvancedSceneManager.Core.Actions.OverridableAction`1.DoNonOverridenAction
  name: DoNonOverridenAction
  nameWithType: OverridableAction<T>.DoNonOverridenAction
  fullName: AdvancedSceneManager.Core.Actions.OverridableAction<T>.DoNonOverridenAction
  nameWithType.vb: OverridableAction(Of T).DoNonOverridenAction
  fullName.vb: AdvancedSceneManager.Core.Actions.OverridableAction(Of T).DoNonOverridenAction
- uid: AdvancedSceneManager.Core.Actions.OverridableAction`1.BeforeDoAction*
  commentId: Overload:AdvancedSceneManager.Core.Actions.OverridableAction`1.BeforeDoAction
  name: BeforeDoAction
  nameWithType: OverridableAction<T>.BeforeDoAction
  fullName: AdvancedSceneManager.Core.Actions.OverridableAction<T>.BeforeDoAction
  nameWithType.vb: OverridableAction(Of T).BeforeDoAction
  fullName.vb: AdvancedSceneManager.Core.Actions.OverridableAction(Of T).BeforeDoAction
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: AdvancedSceneManager.Core.Actions.OverridableAction`1.lazyScene*
  commentId: Overload:AdvancedSceneManager.Core.Actions.OverridableAction`1.lazyScene
  name: lazyScene
  nameWithType: OverridableAction<T>.lazyScene
  fullName: AdvancedSceneManager.Core.Actions.OverridableAction<T>.lazyScene
  nameWithType.vb: OverridableAction(Of T).lazyScene
  fullName.vb: AdvancedSceneManager.Core.Actions.OverridableAction(Of T).lazyScene
- uid: System.Func{AdvancedSceneManager.Core.OpenSceneInfo}
  commentId: T:System.Func{AdvancedSceneManager.Core.OpenSceneInfo}
  parent: System
  definition: System.Func`1
  name: Func<OpenSceneInfo>
  nameWithType: Func<OpenSceneInfo>
  fullName: System.Func<AdvancedSceneManager.Core.OpenSceneInfo>
  nameWithType.vb: Func(Of OpenSceneInfo)
  fullName.vb: System.Func(Of AdvancedSceneManager.Core.OpenSceneInfo)
  name.vb: Func(Of OpenSceneInfo)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: AdvancedSceneManager.Core.OpenSceneInfo
    name: OpenSceneInfo
    nameWithType: OpenSceneInfo
    fullName: AdvancedSceneManager.Core.OpenSceneInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: AdvancedSceneManager.Core.OpenSceneInfo
    name: OpenSceneInfo
    nameWithType: OpenSceneInfo
    fullName: AdvancedSceneManager.Core.OpenSceneInfo
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`1
  commentId: T:System.Func`1
  isExternal: true
  name: Func<TResult>
  nameWithType: Func<TResult>
  fullName: System.Func<TResult>
  nameWithType.vb: Func(Of TResult)
  fullName.vb: System.Func(Of TResult)
  name.vb: Func(Of TResult)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: AdvancedSceneManager.Core.Actions.SceneAction.ToString
  commentId: M:AdvancedSceneManager.Core.Actions.SceneAction.ToString
  parent: AdvancedSceneManager.Core.Actions.SceneAction
  name: ToString()
  nameWithType: SceneAction.ToString()
  fullName: AdvancedSceneManager.Core.Actions.SceneAction.ToString()
  spec.csharp:
  - uid: AdvancedSceneManager.Core.Actions.SceneAction.ToString
    name: ToString
    nameWithType: SceneAction.ToString
    fullName: AdvancedSceneManager.Core.Actions.SceneAction.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AdvancedSceneManager.Core.Actions.SceneAction.ToString
    name: ToString
    nameWithType: SceneAction.ToString
    fullName: AdvancedSceneManager.Core.Actions.SceneAction.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: AdvancedSceneManager.Core.Actions.OverridableAction`1.ToString*
  commentId: Overload:AdvancedSceneManager.Core.Actions.OverridableAction`1.ToString
  name: ToString
  nameWithType: OverridableAction<T>.ToString
  fullName: AdvancedSceneManager.Core.Actions.OverridableAction<T>.ToString
  nameWithType.vb: OverridableAction(Of T).ToString
  fullName.vb: AdvancedSceneManager.Core.Actions.OverridableAction(Of T).ToString
