### YamlMime:ManagedReference
items:
- uid: AdvancedSceneManager.Editor.SceneField
  commentId: T:AdvancedSceneManager.Editor.SceneField
  id: SceneField
  parent: AdvancedSceneManager.Editor
  children:
  - AdvancedSceneManager.Editor.SceneField.#ctor
  - AdvancedSceneManager.Editor.SceneField.Collection
  - AdvancedSceneManager.Editor.SceneField.defaultName
  - AdvancedSceneManager.Editor.SceneField.labelFilter
  - AdvancedSceneManager.Editor.SceneField.OnSceneOpen
  - AdvancedSceneManager.Editor.SceneField.OnSceneOpenAdditive
  - AdvancedSceneManager.Editor.SceneField.onValueChanged
  - AdvancedSceneManager.Editor.SceneField.OpenScene(AdvancedSceneManager.Models.Scene,System.Boolean,AdvancedSceneManager.Models.SceneCollection)
  - AdvancedSceneManager.Editor.SceneField.RegisterValueChangedCallback(UnityEngine.UIElements.EventCallback{UnityEngine.UIElements.ChangeEvent{AdvancedSceneManager.Models.Scene}})
  - AdvancedSceneManager.Editor.SceneField.SetValueWithoutNotify(AdvancedSceneManager.Models.Scene)
  - AdvancedSceneManager.Editor.SceneField.showOpenButtons
  - AdvancedSceneManager.Editor.SceneField.value
  langs:
  - csharp
  - vb
  name: SceneField
  nameWithType: SceneField
  fullName: AdvancedSceneManager.Editor.SceneField
  type: Class
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Editor/Custom elements/SceneField.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: SceneField
    path: ../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Editor/Custom elements/SceneField.cs
    startLine: 24
  assemblies:
  - AdvancedSceneManager.Editor
  namespace: AdvancedSceneManager.Editor
  summary: "\n<p>An <xref href=\"AdvancedSceneManager.Editor.ObjectField\" data-throw-if-not-resolved=\"false\"></xref> that only accepts <xref href=\"AdvancedSceneManager.Models.Scene\" data-throw-if-not-resolved=\"false\"></xref>, with support for <xref href=\"UnityEditor.SceneAsset\" data-throw-if-not-resolved=\"false\"></xref> drag drop.</p>\n<p>Has support for <xref href=\"AdvancedSceneManager.Editor.SceneField.labelFilter\" data-throw-if-not-resolved=\"false\"></xref>, which filters scenes based on label (i.e. to only show scenes from &apos;Collection1&apos;, for example, use &apos;ASM:Collection1&apos;).</p>\n<p><xref href=\"AdvancedSceneManager.Editor.SceneField.showOpenButtons\" data-throw-if-not-resolved=\"false\"></xref> can be used to toggle open buttons.</p>\n<p>When <xref href=\"AdvancedSceneManager.Editor.ObjectField.isReadOnly\" data-throw-if-not-resolved=\"false\"></xref> is true, <xref href=\"AdvancedSceneManager.Editor.SceneField.showOpenButtons\" data-throw-if-not-resolved=\"false\"></xref> will still be interactable, but value cannot be changed.</p>\n"
  example: []
  syntax:
    content: 'public class SceneField : ObjectField, IEventHandler, ITransform, ITransitionAnimations, IExperimentalFeatures, IVisualElementScheduler, IResolvedStyle, IBindable, INotifyValueChanged<Object>'
    content.vb: >-
      Public Class SceneField
          Inherits ObjectField
          Implements IEventHandler, ITransform, ITransitionAnimations, IExperimentalFeatures, IVisualElementScheduler, IResolvedStyle, IBindable, INotifyValueChanged(Of Object)
  inheritance:
  - System.Object
  - UnityEngine.UIElements.CallbackEventHandler
  - UnityEngine.UIElements.Focusable
  - UnityEngine.UIElements.VisualElement
  - UnityEngine.UIElements.BindableElement
  - UnityEngine.UIElements.BaseField{UnityEngine.Object}
  - UnityEditor.UIElements.ObjectField
  - AdvancedSceneManager.Editor.ObjectField
  inheritedMembers:
  - AdvancedSceneManager.Editor.ObjectField.isReadOnly
  extensionMethods:
  - AdvancedSceneManager.Editor.SceneField.AdvancedSceneManager.Editor.Utility.VisualElementExtensions.SetEnabledExt``1(System.Boolean)
  - AdvancedSceneManager.Editor.SceneField.AdvancedSceneManager.Editor.Utility.VisualElementExtensions.Setup``1(System.String,{T},System.String,System.Action,System.Boolean,System.String)
  - AdvancedSceneManager.Editor.SceneField.AdvancedSceneManager.Editor.Utility.VisualElementExtensions.Setup``2({T},System.String,System.Action,System.Boolean,System.String)
  - UnityEngine.UIElements.VisualElement.AdvancedSceneManager.Editor.Utility.VisualElementExtensions.FindAncestor(System.String,System.String,System.Action{UnityEngine.UIElements.VisualElement})
  - UnityEngine.UIElements.VisualElement.AdvancedSceneManager.Editor.Utility.VisualElementExtensions.GetRoot
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: AdvancedSceneManager.Editor.SceneField.#ctor
  commentId: M:AdvancedSceneManager.Editor.SceneField.#ctor
  id: '#ctor'
  parent: AdvancedSceneManager.Editor.SceneField
  langs:
  - csharp
  - vb
  name: SceneField()
  nameWithType: SceneField.SceneField()
  fullName: AdvancedSceneManager.Editor.SceneField.SceneField()
  type: Constructor
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Editor/Custom elements/SceneField.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: .ctor
    path: ../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Editor/Custom elements/SceneField.cs
    startLine: 33
  assemblies:
  - AdvancedSceneManager.Editor
  namespace: AdvancedSceneManager.Editor
  syntax:
    content: public SceneField()
    content.vb: Public Sub New
  overload: AdvancedSceneManager.Editor.SceneField.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AdvancedSceneManager.Editor.SceneField.labelFilter
  commentId: P:AdvancedSceneManager.Editor.SceneField.labelFilter
  id: labelFilter
  parent: AdvancedSceneManager.Editor.SceneField
  langs:
  - csharp
  - vb
  name: labelFilter
  nameWithType: SceneField.labelFilter
  fullName: AdvancedSceneManager.Editor.SceneField.labelFilter
  type: Property
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Editor/Custom elements/SceneField.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: labelFilter
    path: ../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Editor/Custom elements/SceneField.cs
    startLine: 64
  assemblies:
  - AdvancedSceneManager.Editor
  namespace: AdvancedSceneManager.Editor
  syntax:
    content: public string labelFilter { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property labelFilter As String
  overload: AdvancedSceneManager.Editor.SceneField.labelFilter*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: AdvancedSceneManager.Editor.SceneField.showOpenButtons
  commentId: P:AdvancedSceneManager.Editor.SceneField.showOpenButtons
  id: showOpenButtons
  parent: AdvancedSceneManager.Editor.SceneField
  langs:
  - csharp
  - vb
  name: showOpenButtons
  nameWithType: SceneField.showOpenButtons
  fullName: AdvancedSceneManager.Editor.SceneField.showOpenButtons
  type: Property
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Editor/Custom elements/SceneField.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: showOpenButtons
    path: ../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Editor/Custom elements/SceneField.cs
    startLine: 65
  assemblies:
  - AdvancedSceneManager.Editor
  namespace: AdvancedSceneManager.Editor
  syntax:
    content: public bool showOpenButtons { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property showOpenButtons As Boolean
  overload: AdvancedSceneManager.Editor.SceneField.showOpenButtons*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: AdvancedSceneManager.Editor.SceneField.defaultName
  commentId: P:AdvancedSceneManager.Editor.SceneField.defaultName
  id: defaultName
  parent: AdvancedSceneManager.Editor.SceneField
  langs:
  - csharp
  - vb
  name: defaultName
  nameWithType: SceneField.defaultName
  fullName: AdvancedSceneManager.Editor.SceneField.defaultName
  type: Property
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Editor/Custom elements/SceneField.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: defaultName
    path: ../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Editor/Custom elements/SceneField.cs
    startLine: 67
  assemblies:
  - AdvancedSceneManager.Editor
  namespace: AdvancedSceneManager.Editor
  syntax:
    content: public string defaultName { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property defaultName As String
  overload: AdvancedSceneManager.Editor.SceneField.defaultName*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: AdvancedSceneManager.Editor.SceneField.Collection
  commentId: P:AdvancedSceneManager.Editor.SceneField.Collection
  id: Collection
  parent: AdvancedSceneManager.Editor.SceneField
  langs:
  - csharp
  - vb
  name: Collection
  nameWithType: SceneField.Collection
  fullName: AdvancedSceneManager.Editor.SceneField.Collection
  type: Property
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Editor/Custom elements/SceneField.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: Collection
    path: ../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Editor/Custom elements/SceneField.cs
    startLine: 225
  assemblies:
  - AdvancedSceneManager.Editor
  namespace: AdvancedSceneManager.Editor
  summary: This will be passed to Scene.Open().
  example: []
  syntax:
    content: public SceneCollection Collection { get; set; }
    parameters: []
    return:
      type: AdvancedSceneManager.Models.SceneCollection
    content.vb: Public Property Collection As SceneCollection
  overload: AdvancedSceneManager.Editor.SceneField.Collection*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: AdvancedSceneManager.Editor.SceneField.OnSceneOpen
  commentId: E:AdvancedSceneManager.Editor.SceneField.OnSceneOpen
  id: OnSceneOpen
  parent: AdvancedSceneManager.Editor.SceneField
  langs:
  - csharp
  - vb
  name: OnSceneOpen
  nameWithType: SceneField.OnSceneOpen
  fullName: AdvancedSceneManager.Editor.SceneField.OnSceneOpen
  type: Event
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Editor/Custom elements/SceneField.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: OnSceneOpen
    path: ../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Editor/Custom elements/SceneField.cs
    startLine: 229
  assemblies:
  - AdvancedSceneManager.Editor
  namespace: AdvancedSceneManager.Editor
  syntax:
    content: public event Action OnSceneOpen
    return:
      type: System.Action
    content.vb: Public Event OnSceneOpen As Action
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AdvancedSceneManager.Editor.SceneField.OnSceneOpenAdditive
  commentId: E:AdvancedSceneManager.Editor.SceneField.OnSceneOpenAdditive
  id: OnSceneOpenAdditive
  parent: AdvancedSceneManager.Editor.SceneField
  langs:
  - csharp
  - vb
  name: OnSceneOpenAdditive
  nameWithType: SceneField.OnSceneOpenAdditive
  fullName: AdvancedSceneManager.Editor.SceneField.OnSceneOpenAdditive
  type: Event
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Editor/Custom elements/SceneField.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: OnSceneOpenAdditive
    path: ../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Editor/Custom elements/SceneField.cs
    startLine: 230
  assemblies:
  - AdvancedSceneManager.Editor
  namespace: AdvancedSceneManager.Editor
  syntax:
    content: public event Action OnSceneOpenAdditive
    return:
      type: System.Action
    content.vb: Public Event OnSceneOpenAdditive As Action
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AdvancedSceneManager.Editor.SceneField.OpenScene(AdvancedSceneManager.Models.Scene,System.Boolean,AdvancedSceneManager.Models.SceneCollection)
  commentId: M:AdvancedSceneManager.Editor.SceneField.OpenScene(AdvancedSceneManager.Models.Scene,System.Boolean,AdvancedSceneManager.Models.SceneCollection)
  id: OpenScene(AdvancedSceneManager.Models.Scene,System.Boolean,AdvancedSceneManager.Models.SceneCollection)
  parent: AdvancedSceneManager.Editor.SceneField
  langs:
  - csharp
  - vb
  name: OpenScene(Scene, Boolean, SceneCollection)
  nameWithType: SceneField.OpenScene(Scene, Boolean, SceneCollection)
  fullName: AdvancedSceneManager.Editor.SceneField.OpenScene(AdvancedSceneManager.Models.Scene, System.Boolean, AdvancedSceneManager.Models.SceneCollection)
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Editor/Custom elements/SceneField.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: OpenScene
    path: ../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Editor/Custom elements/SceneField.cs
    startLine: 306
  assemblies:
  - AdvancedSceneManager.Editor
  namespace: AdvancedSceneManager.Editor
  syntax:
    content: public static void OpenScene(Scene scene, bool additive, SceneCollection collection = null)
    parameters:
    - id: scene
      type: AdvancedSceneManager.Models.Scene
    - id: additive
      type: System.Boolean
    - id: collection
      type: AdvancedSceneManager.Models.SceneCollection
    content.vb: Public Shared Sub OpenScene(scene As Scene, additive As Boolean, collection As SceneCollection = Nothing)
  overload: AdvancedSceneManager.Editor.SceneField.OpenScene*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: AdvancedSceneManager.Editor.SceneField.onValueChanged
  commentId: F:AdvancedSceneManager.Editor.SceneField.onValueChanged
  id: onValueChanged
  parent: AdvancedSceneManager.Editor.SceneField
  langs:
  - csharp
  - vb
  name: onValueChanged
  nameWithType: SceneField.onValueChanged
  fullName: AdvancedSceneManager.Editor.SceneField.onValueChanged
  type: Field
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Editor/Custom elements/SceneField.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: onValueChanged
    path: ../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Editor/Custom elements/SceneField.cs
    startLine: 358
  assemblies:
  - AdvancedSceneManager.Editor
  namespace: AdvancedSceneManager.Editor
  syntax:
    content: public static EventHandler<(Scene prevScene, Scene newScene)> onValueChanged
    return:
      type: System.EventHandler{System.ValueTuple{AdvancedSceneManager.Models.Scene,AdvancedSceneManager.Models.Scene}}
    content.vb: Public Shared onValueChanged As EventHandler(Of(prevScene As Scene, newScene As Scene)(Of Scene , Scene))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: AdvancedSceneManager.Editor.SceneField.SetValueWithoutNotify(AdvancedSceneManager.Models.Scene)
  commentId: M:AdvancedSceneManager.Editor.SceneField.SetValueWithoutNotify(AdvancedSceneManager.Models.Scene)
  id: SetValueWithoutNotify(AdvancedSceneManager.Models.Scene)
  parent: AdvancedSceneManager.Editor.SceneField
  langs:
  - csharp
  - vb
  name: SetValueWithoutNotify(Scene)
  nameWithType: SceneField.SetValueWithoutNotify(Scene)
  fullName: AdvancedSceneManager.Editor.SceneField.SetValueWithoutNotify(AdvancedSceneManager.Models.Scene)
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Editor/Custom elements/SceneField.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: SetValueWithoutNotify
    path: ../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Editor/Custom elements/SceneField.cs
    startLine: 360
  assemblies:
  - AdvancedSceneManager.Editor
  namespace: AdvancedSceneManager.Editor
  syntax:
    content: public SceneField SetValueWithoutNotify(Scene scene)
    parameters:
    - id: scene
      type: AdvancedSceneManager.Models.Scene
    return:
      type: AdvancedSceneManager.Editor.SceneField
    content.vb: Public Function SetValueWithoutNotify(scene As Scene) As SceneField
  overload: AdvancedSceneManager.Editor.SceneField.SetValueWithoutNotify*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AdvancedSceneManager.Editor.SceneField.RegisterValueChangedCallback(UnityEngine.UIElements.EventCallback{UnityEngine.UIElements.ChangeEvent{AdvancedSceneManager.Models.Scene}})
  commentId: M:AdvancedSceneManager.Editor.SceneField.RegisterValueChangedCallback(UnityEngine.UIElements.EventCallback{UnityEngine.UIElements.ChangeEvent{AdvancedSceneManager.Models.Scene}})
  id: RegisterValueChangedCallback(UnityEngine.UIElements.EventCallback{UnityEngine.UIElements.ChangeEvent{AdvancedSceneManager.Models.Scene}})
  parent: AdvancedSceneManager.Editor.SceneField
  langs:
  - csharp
  - vb
  name: RegisterValueChangedCallback(EventCallback<ChangeEvent<Scene>>)
  nameWithType: SceneField.RegisterValueChangedCallback(EventCallback<ChangeEvent<Scene>>)
  fullName: AdvancedSceneManager.Editor.SceneField.RegisterValueChangedCallback(UnityEngine.UIElements.EventCallback<UnityEngine.UIElements.ChangeEvent<AdvancedSceneManager.Models.Scene>>)
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Editor/Custom elements/SceneField.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: RegisterValueChangedCallback
    path: ../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Editor/Custom elements/SceneField.cs
    startLine: 377
  assemblies:
  - AdvancedSceneManager.Editor
  namespace: AdvancedSceneManager.Editor
  syntax:
    content: public void RegisterValueChangedCallback(EventCallback<ChangeEvent<Scene>> callback)
    parameters:
    - id: callback
      type: UnityEngine.UIElements.EventCallback{UnityEngine.UIElements.ChangeEvent{AdvancedSceneManager.Models.Scene}}
    content.vb: Public Sub RegisterValueChangedCallback(callback As EventCallback(Of ChangeEvent(Of Scene)))
  overload: AdvancedSceneManager.Editor.SceneField.RegisterValueChangedCallback*
  nameWithType.vb: SceneField.RegisterValueChangedCallback(EventCallback(Of ChangeEvent(Of Scene)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: AdvancedSceneManager.Editor.SceneField.RegisterValueChangedCallback(UnityEngine.UIElements.EventCallback(Of UnityEngine.UIElements.ChangeEvent(Of AdvancedSceneManager.Models.Scene)))
  name.vb: RegisterValueChangedCallback(EventCallback(Of ChangeEvent(Of Scene)))
- uid: AdvancedSceneManager.Editor.SceneField.value
  commentId: P:AdvancedSceneManager.Editor.SceneField.value
  id: value
  parent: AdvancedSceneManager.Editor.SceneField
  langs:
  - csharp
  - vb
  name: value
  nameWithType: SceneField.value
  fullName: AdvancedSceneManager.Editor.SceneField.value
  type: Property
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Editor/Custom elements/SceneField.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: value
    path: ../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Editor/Custom elements/SceneField.cs
    startLine: 380
  assemblies:
  - AdvancedSceneManager.Editor
  namespace: AdvancedSceneManager.Editor
  syntax:
    content: public Scene value { get; set; }
    parameters: []
    return:
      type: AdvancedSceneManager.Models.Scene
    content.vb: Public Property value As Scene
  overload: AdvancedSceneManager.Editor.SceneField.value*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: AdvancedSceneManager.Editor.ObjectField
  commentId: T:AdvancedSceneManager.Editor.ObjectField
  parent: AdvancedSceneManager.Editor
  name: ObjectField
  nameWithType: ObjectField
  fullName: AdvancedSceneManager.Editor.ObjectField
- uid: AdvancedSceneManager.Models.Scene
  commentId: T:AdvancedSceneManager.Models.Scene
  parent: AdvancedSceneManager.Models
  name: Scene
  nameWithType: Scene
  fullName: AdvancedSceneManager.Models.Scene
- uid: UnityEditor.SceneAsset
  commentId: T:UnityEditor.SceneAsset
  parent: UnityEditor
  isExternal: true
  name: SceneAsset
  nameWithType: SceneAsset
  fullName: UnityEditor.SceneAsset
- uid: AdvancedSceneManager.Editor.SceneField.labelFilter
  commentId: P:AdvancedSceneManager.Editor.SceneField.labelFilter
  isExternal: true
- uid: AdvancedSceneManager.Editor.SceneField.showOpenButtons
  commentId: P:AdvancedSceneManager.Editor.SceneField.showOpenButtons
  isExternal: true
- uid: AdvancedSceneManager.Editor.ObjectField.isReadOnly
  commentId: P:AdvancedSceneManager.Editor.ObjectField.isReadOnly
  parent: AdvancedSceneManager.Editor.ObjectField
  name: isReadOnly
  nameWithType: ObjectField.isReadOnly
  fullName: AdvancedSceneManager.Editor.ObjectField.isReadOnly
- uid: AdvancedSceneManager.Editor
  commentId: N:AdvancedSceneManager.Editor
  name: AdvancedSceneManager.Editor
  nameWithType: AdvancedSceneManager.Editor
  fullName: AdvancedSceneManager.Editor
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: UnityEngine.UIElements.CallbackEventHandler
  commentId: T:UnityEngine.UIElements.CallbackEventHandler
  parent: UnityEngine.UIElements
  isExternal: true
  name: CallbackEventHandler
  nameWithType: CallbackEventHandler
  fullName: UnityEngine.UIElements.CallbackEventHandler
- uid: UnityEngine.UIElements.Focusable
  commentId: T:UnityEngine.UIElements.Focusable
  parent: UnityEngine.UIElements
  isExternal: true
  name: Focusable
  nameWithType: Focusable
  fullName: UnityEngine.UIElements.Focusable
- uid: UnityEngine.UIElements.VisualElement
  commentId: T:UnityEngine.UIElements.VisualElement
  parent: UnityEngine.UIElements
  isExternal: true
  name: VisualElement
  nameWithType: VisualElement
  fullName: UnityEngine.UIElements.VisualElement
- uid: UnityEngine.UIElements.BindableElement
  commentId: T:UnityEngine.UIElements.BindableElement
  parent: UnityEngine.UIElements
  isExternal: true
  name: BindableElement
  nameWithType: BindableElement
  fullName: UnityEngine.UIElements.BindableElement
- uid: UnityEngine.UIElements.BaseField{UnityEngine.Object}
  commentId: T:UnityEngine.UIElements.BaseField{UnityEngine.Object}
  parent: UnityEngine.UIElements
  definition: UnityEngine.UIElements.BaseField`1
  name: BaseField<Object>
  nameWithType: BaseField<Object>
  fullName: UnityEngine.UIElements.BaseField<UnityEngine.Object>
  nameWithType.vb: BaseField(Of Object)
  fullName.vb: UnityEngine.UIElements.BaseField(Of UnityEngine.Object)
  name.vb: BaseField(Of Object)
  spec.csharp:
  - uid: UnityEngine.UIElements.BaseField`1
    name: BaseField
    nameWithType: BaseField
    fullName: UnityEngine.UIElements.BaseField
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: UnityEngine.Object
    name: Object
    nameWithType: Object
    fullName: UnityEngine.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: UnityEngine.UIElements.BaseField`1
    name: BaseField
    nameWithType: BaseField
    fullName: UnityEngine.UIElements.BaseField
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: UnityEngine.Object
    name: Object
    nameWithType: Object
    fullName: UnityEngine.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: UnityEditor.UIElements.ObjectField
  commentId: T:UnityEditor.UIElements.ObjectField
  parent: UnityEditor.UIElements
  isExternal: true
  name: ObjectField
  nameWithType: ObjectField
  fullName: UnityEditor.UIElements.ObjectField
- uid: AdvancedSceneManager.Editor.SceneField.AdvancedSceneManager.Editor.Utility.VisualElementExtensions.SetEnabledExt``1(System.Boolean)
  commentId: M:AdvancedSceneManager.Editor.Utility.VisualElementExtensions.SetEnabledExt``1(``0,System.Boolean)
  parent: AdvancedSceneManager.Editor.Utility.VisualElementExtensions
  definition: AdvancedSceneManager.Editor.Utility.VisualElementExtensions.SetEnabledExt``1(``0,System.Boolean)
  name: SetEnabledExt<SceneField>(Boolean)
  nameWithType: VisualElementExtensions.SetEnabledExt<SceneField>(Boolean)
  fullName: AdvancedSceneManager.Editor.Utility.VisualElementExtensions.SetEnabledExt<AdvancedSceneManager.Editor.SceneField>(System.Boolean)
  nameWithType.vb: VisualElementExtensions.SetEnabledExt(Of SceneField)(Boolean)
  fullName.vb: AdvancedSceneManager.Editor.Utility.VisualElementExtensions.SetEnabledExt(Of AdvancedSceneManager.Editor.SceneField)(System.Boolean)
  name.vb: SetEnabledExt(Of SceneField)(Boolean)
  spec.csharp:
  - uid: AdvancedSceneManager.Editor.Utility.VisualElementExtensions.SetEnabledExt``1(System.Boolean)
    name: SetEnabledExt<SceneField>
    nameWithType: VisualElementExtensions.SetEnabledExt<SceneField>
    fullName: AdvancedSceneManager.Editor.Utility.VisualElementExtensions.SetEnabledExt<AdvancedSceneManager.Editor.SceneField>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AdvancedSceneManager.Editor.Utility.VisualElementExtensions.SetEnabledExt``1(System.Boolean)
    name: SetEnabledExt(Of SceneField)
    nameWithType: VisualElementExtensions.SetEnabledExt(Of SceneField)
    fullName: AdvancedSceneManager.Editor.Utility.VisualElementExtensions.SetEnabledExt(Of AdvancedSceneManager.Editor.SceneField)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: AdvancedSceneManager.Editor.SceneField.AdvancedSceneManager.Editor.Utility.VisualElementExtensions.Setup``1(System.String,{T},System.String,System.Action,System.Boolean,System.String)
  commentId: M:AdvancedSceneManager.Editor.Utility.VisualElementExtensions.Setup``1(AdvancedSceneManager.Editor.SceneField,System.String,``0,System.String,System.Action,System.Boolean,System.String)
  parent: AdvancedSceneManager.Editor.Utility.VisualElementExtensions
  definition: AdvancedSceneManager.Editor.Utility.VisualElementExtensions.Setup``1(AdvancedSceneManager.Editor.SceneField,System.String,``0,System.String,System.Action,System.Boolean,System.String)
  name: Setup<T>(String, T, String, Action, Boolean, String)
  nameWithType: VisualElementExtensions.Setup<T>(String, T, String, Action, Boolean, String)
  fullName: AdvancedSceneManager.Editor.Utility.VisualElementExtensions.Setup<T>(System.String, T, System.String, System.Action, System.Boolean, System.String)
  nameWithType.vb: VisualElementExtensions.Setup(Of T)(String, T, String, Action, Boolean, String)
  fullName.vb: AdvancedSceneManager.Editor.Utility.VisualElementExtensions.Setup(Of T)(System.String, T, System.String, System.Action, System.Boolean, System.String)
  name.vb: Setup(Of T)(String, T, String, Action, Boolean, String)
  spec.csharp:
  - uid: AdvancedSceneManager.Editor.Utility.VisualElementExtensions.Setup``1(System.String,``0,System.String,System.Action,System.Boolean,System.String)
    name: Setup<T>
    nameWithType: VisualElementExtensions.Setup<T>
    fullName: AdvancedSceneManager.Editor.Utility.VisualElementExtensions.Setup<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AdvancedSceneManager.Editor.Utility.VisualElementExtensions.Setup``1(System.String,``0,System.String,System.Action,System.Boolean,System.String)
    name: Setup(Of T)
    nameWithType: VisualElementExtensions.Setup(Of T)
    fullName: AdvancedSceneManager.Editor.Utility.VisualElementExtensions.Setup(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: AdvancedSceneManager.Editor.SceneField.AdvancedSceneManager.Editor.Utility.VisualElementExtensions.Setup``2({T},System.String,System.Action,System.Boolean,System.String)
  commentId: M:AdvancedSceneManager.Editor.Utility.VisualElementExtensions.Setup``2(``0,``1,System.String,System.Action,System.Boolean,System.String)
  parent: AdvancedSceneManager.Editor.Utility.VisualElementExtensions
  definition: AdvancedSceneManager.Editor.Utility.VisualElementExtensions.Setup``2(``0,``1,System.String,System.Action,System.Boolean,System.String)
  name: Setup<SceneField, T>(T, String, Action, Boolean, String)
  nameWithType: VisualElementExtensions.Setup<SceneField, T>(T, String, Action, Boolean, String)
  fullName: AdvancedSceneManager.Editor.Utility.VisualElementExtensions.Setup<AdvancedSceneManager.Editor.SceneField, T>(T, System.String, System.Action, System.Boolean, System.String)
  nameWithType.vb: VisualElementExtensions.Setup(Of SceneField, T)(T, String, Action, Boolean, String)
  fullName.vb: AdvancedSceneManager.Editor.Utility.VisualElementExtensions.Setup(Of AdvancedSceneManager.Editor.SceneField, T)(T, System.String, System.Action, System.Boolean, System.String)
  name.vb: Setup(Of SceneField, T)(T, String, Action, Boolean, String)
  spec.csharp:
  - uid: AdvancedSceneManager.Editor.Utility.VisualElementExtensions.Setup``2(``1,System.String,System.Action,System.Boolean,System.String)
    name: Setup<SceneField, T>
    nameWithType: VisualElementExtensions.Setup<SceneField, T>
    fullName: AdvancedSceneManager.Editor.Utility.VisualElementExtensions.Setup<AdvancedSceneManager.Editor.SceneField, T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AdvancedSceneManager.Editor.Utility.VisualElementExtensions.Setup``2(``1,System.String,System.Action,System.Boolean,System.String)
    name: Setup(Of SceneField, T)
    nameWithType: VisualElementExtensions.Setup(Of SceneField, T)
    fullName: AdvancedSceneManager.Editor.Utility.VisualElementExtensions.Setup(Of AdvancedSceneManager.Editor.SceneField, T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: UnityEngine.UIElements.VisualElement.AdvancedSceneManager.Editor.Utility.VisualElementExtensions.FindAncestor(System.String,System.String,System.Action{UnityEngine.UIElements.VisualElement})
  commentId: M:AdvancedSceneManager.Editor.Utility.VisualElementExtensions.FindAncestor(UnityEngine.UIElements.VisualElement,System.String,System.String,System.Action{UnityEngine.UIElements.VisualElement})
  parent: AdvancedSceneManager.Editor.Utility.VisualElementExtensions
  definition: AdvancedSceneManager.Editor.Utility.VisualElementExtensions.FindAncestor(UnityEngine.UIElements.VisualElement,System.String,System.String,System.Action{UnityEngine.UIElements.VisualElement})
  name: FindAncestor(String, String, Action<VisualElement>)
  nameWithType: VisualElementExtensions.FindAncestor(String, String, Action<VisualElement>)
  fullName: AdvancedSceneManager.Editor.Utility.VisualElementExtensions.FindAncestor(System.String, System.String, System.Action<UnityEngine.UIElements.VisualElement>)
  nameWithType.vb: VisualElementExtensions.FindAncestor(String, String, Action(Of VisualElement))
  fullName.vb: AdvancedSceneManager.Editor.Utility.VisualElementExtensions.FindAncestor(System.String, System.String, System.Action(Of UnityEngine.UIElements.VisualElement))
  name.vb: FindAncestor(String, String, Action(Of VisualElement))
  spec.csharp:
  - uid: AdvancedSceneManager.Editor.Utility.VisualElementExtensions.FindAncestor(System.String,System.String,System.Action{UnityEngine.UIElements.VisualElement})
    name: FindAncestor
    nameWithType: VisualElementExtensions.FindAncestor
    fullName: AdvancedSceneManager.Editor.Utility.VisualElementExtensions.FindAncestor
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: UnityEngine.UIElements.VisualElement
    name: VisualElement
    nameWithType: VisualElement
    fullName: UnityEngine.UIElements.VisualElement
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AdvancedSceneManager.Editor.Utility.VisualElementExtensions.FindAncestor(System.String,System.String,System.Action{UnityEngine.UIElements.VisualElement})
    name: FindAncestor
    nameWithType: VisualElementExtensions.FindAncestor
    fullName: AdvancedSceneManager.Editor.Utility.VisualElementExtensions.FindAncestor
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: UnityEngine.UIElements.VisualElement
    name: VisualElement
    nameWithType: VisualElement
    fullName: UnityEngine.UIElements.VisualElement
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: UnityEngine.UIElements.VisualElement.AdvancedSceneManager.Editor.Utility.VisualElementExtensions.GetRoot
  commentId: M:AdvancedSceneManager.Editor.Utility.VisualElementExtensions.GetRoot(UnityEngine.UIElements.VisualElement)
  parent: AdvancedSceneManager.Editor.Utility.VisualElementExtensions
  definition: AdvancedSceneManager.Editor.Utility.VisualElementExtensions.GetRoot(UnityEngine.UIElements.VisualElement)
  name: GetRoot()
  nameWithType: VisualElementExtensions.GetRoot()
  fullName: AdvancedSceneManager.Editor.Utility.VisualElementExtensions.GetRoot()
  spec.csharp:
  - uid: AdvancedSceneManager.Editor.Utility.VisualElementExtensions.GetRoot
    name: GetRoot
    nameWithType: VisualElementExtensions.GetRoot
    fullName: AdvancedSceneManager.Editor.Utility.VisualElementExtensions.GetRoot
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AdvancedSceneManager.Editor.Utility.VisualElementExtensions.GetRoot
    name: GetRoot
    nameWithType: VisualElementExtensions.GetRoot
    fullName: AdvancedSceneManager.Editor.Utility.VisualElementExtensions.GetRoot
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: AdvancedSceneManager.Models
  commentId: N:AdvancedSceneManager.Models
  name: AdvancedSceneManager.Models
  nameWithType: AdvancedSceneManager.Models
  fullName: AdvancedSceneManager.Models
- uid: UnityEditor
  commentId: N:UnityEditor
  isExternal: true
  name: UnityEditor
  nameWithType: UnityEditor
  fullName: UnityEditor
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: UnityEngine.UIElements
  commentId: N:UnityEngine.UIElements
  isExternal: true
  name: UnityEngine.UIElements
  nameWithType: UnityEngine.UIElements
  fullName: UnityEngine.UIElements
- uid: UnityEngine.UIElements.BaseField`1
  commentId: T:UnityEngine.UIElements.BaseField`1
  isExternal: true
  name: BaseField<TValueType>
  nameWithType: BaseField<TValueType>
  fullName: UnityEngine.UIElements.BaseField<TValueType>
  nameWithType.vb: BaseField(Of TValueType)
  fullName.vb: UnityEngine.UIElements.BaseField(Of TValueType)
  name.vb: BaseField(Of TValueType)
  spec.csharp:
  - uid: UnityEngine.UIElements.BaseField`1
    name: BaseField
    nameWithType: BaseField
    fullName: UnityEngine.UIElements.BaseField
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TValueType
    nameWithType: TValueType
    fullName: TValueType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: UnityEngine.UIElements.BaseField`1
    name: BaseField
    nameWithType: BaseField
    fullName: UnityEngine.UIElements.BaseField
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TValueType
    nameWithType: TValueType
    fullName: TValueType
  - name: )
    nameWithType: )
    fullName: )
- uid: UnityEditor.UIElements
  commentId: N:UnityEditor.UIElements
  isExternal: true
  name: UnityEditor.UIElements
  nameWithType: UnityEditor.UIElements
  fullName: UnityEditor.UIElements
- uid: AdvancedSceneManager.Editor.Utility.VisualElementExtensions.SetEnabledExt``1(``0,System.Boolean)
  commentId: M:AdvancedSceneManager.Editor.Utility.VisualElementExtensions.SetEnabledExt``1(``0,System.Boolean)
  isExternal: true
  name: SetEnabledExt<TElement>(TElement, Boolean)
  nameWithType: VisualElementExtensions.SetEnabledExt<TElement>(TElement, Boolean)
  fullName: AdvancedSceneManager.Editor.Utility.VisualElementExtensions.SetEnabledExt<TElement>(TElement, System.Boolean)
  nameWithType.vb: VisualElementExtensions.SetEnabledExt(Of TElement)(TElement, Boolean)
  fullName.vb: AdvancedSceneManager.Editor.Utility.VisualElementExtensions.SetEnabledExt(Of TElement)(TElement, System.Boolean)
  name.vb: SetEnabledExt(Of TElement)(TElement, Boolean)
  spec.csharp:
  - uid: AdvancedSceneManager.Editor.Utility.VisualElementExtensions.SetEnabledExt``1(``0,System.Boolean)
    name: SetEnabledExt<TElement>
    nameWithType: VisualElementExtensions.SetEnabledExt<TElement>
    fullName: AdvancedSceneManager.Editor.Utility.VisualElementExtensions.SetEnabledExt<TElement>
  - name: (
    nameWithType: (
    fullName: (
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AdvancedSceneManager.Editor.Utility.VisualElementExtensions.SetEnabledExt``1(``0,System.Boolean)
    name: SetEnabledExt(Of TElement)
    nameWithType: VisualElementExtensions.SetEnabledExt(Of TElement)
    fullName: AdvancedSceneManager.Editor.Utility.VisualElementExtensions.SetEnabledExt(Of TElement)
  - name: (
    nameWithType: (
    fullName: (
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: AdvancedSceneManager.Editor.Utility.VisualElementExtensions
  commentId: T:AdvancedSceneManager.Editor.Utility.VisualElementExtensions
  parent: AdvancedSceneManager.Editor.Utility
  name: VisualElementExtensions
  nameWithType: VisualElementExtensions
  fullName: AdvancedSceneManager.Editor.Utility.VisualElementExtensions
- uid: AdvancedSceneManager.Editor.Utility.VisualElementExtensions.Setup``1(AdvancedSceneManager.Editor.SceneField,System.String,``0,System.String,System.Action,System.Boolean,System.String)
  commentId: M:AdvancedSceneManager.Editor.Utility.VisualElementExtensions.Setup``1(AdvancedSceneManager.Editor.SceneField,System.String,``0,System.String,System.Action,System.Boolean,System.String)
  isExternal: true
  name: Setup<T>(SceneField, String, T, String, Action, Boolean, String)
  nameWithType: VisualElementExtensions.Setup<T>(SceneField, String, T, String, Action, Boolean, String)
  fullName: AdvancedSceneManager.Editor.Utility.VisualElementExtensions.Setup<T>(AdvancedSceneManager.Editor.SceneField, System.String, T, System.String, System.Action, System.Boolean, System.String)
  nameWithType.vb: VisualElementExtensions.Setup(Of T)(SceneField, String, T, String, Action, Boolean, String)
  fullName.vb: AdvancedSceneManager.Editor.Utility.VisualElementExtensions.Setup(Of T)(AdvancedSceneManager.Editor.SceneField, System.String, T, System.String, System.Action, System.Boolean, System.String)
  name.vb: Setup(Of T)(SceneField, String, T, String, Action, Boolean, String)
  spec.csharp:
  - uid: AdvancedSceneManager.Editor.Utility.VisualElementExtensions.Setup``1(AdvancedSceneManager.Editor.SceneField,System.String,``0,System.String,System.Action,System.Boolean,System.String)
    name: Setup<T>
    nameWithType: VisualElementExtensions.Setup<T>
    fullName: AdvancedSceneManager.Editor.Utility.VisualElementExtensions.Setup<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: AdvancedSceneManager.Editor.SceneField
    name: SceneField
    nameWithType: SceneField
    fullName: AdvancedSceneManager.Editor.SceneField
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AdvancedSceneManager.Editor.Utility.VisualElementExtensions.Setup``1(AdvancedSceneManager.Editor.SceneField,System.String,``0,System.String,System.Action,System.Boolean,System.String)
    name: Setup(Of T)
    nameWithType: VisualElementExtensions.Setup(Of T)
    fullName: AdvancedSceneManager.Editor.Utility.VisualElementExtensions.Setup(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: AdvancedSceneManager.Editor.SceneField
    name: SceneField
    nameWithType: SceneField
    fullName: AdvancedSceneManager.Editor.SceneField
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: AdvancedSceneManager.Editor.Utility.VisualElementExtensions.Setup``2(``0,``1,System.String,System.Action,System.Boolean,System.String)
  commentId: M:AdvancedSceneManager.Editor.Utility.VisualElementExtensions.Setup``2(``0,``1,System.String,System.Action,System.Boolean,System.String)
  isExternal: true
  name: Setup<TElement, T>(TElement, T, String, Action, Boolean, String)
  nameWithType: VisualElementExtensions.Setup<TElement, T>(TElement, T, String, Action, Boolean, String)
  fullName: AdvancedSceneManager.Editor.Utility.VisualElementExtensions.Setup<TElement, T>(TElement, T, System.String, System.Action, System.Boolean, System.String)
  nameWithType.vb: VisualElementExtensions.Setup(Of TElement, T)(TElement, T, String, Action, Boolean, String)
  fullName.vb: AdvancedSceneManager.Editor.Utility.VisualElementExtensions.Setup(Of TElement, T)(TElement, T, System.String, System.Action, System.Boolean, System.String)
  name.vb: Setup(Of TElement, T)(TElement, T, String, Action, Boolean, String)
  spec.csharp:
  - uid: AdvancedSceneManager.Editor.Utility.VisualElementExtensions.Setup``2(``0,``1,System.String,System.Action,System.Boolean,System.String)
    name: Setup<TElement, T>
    nameWithType: VisualElementExtensions.Setup<TElement, T>
    fullName: AdvancedSceneManager.Editor.Utility.VisualElementExtensions.Setup<TElement, T>
  - name: (
    nameWithType: (
    fullName: (
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AdvancedSceneManager.Editor.Utility.VisualElementExtensions.Setup``2(``0,``1,System.String,System.Action,System.Boolean,System.String)
    name: Setup(Of TElement, T)
    nameWithType: VisualElementExtensions.Setup(Of TElement, T)
    fullName: AdvancedSceneManager.Editor.Utility.VisualElementExtensions.Setup(Of TElement, T)
  - name: (
    nameWithType: (
    fullName: (
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: AdvancedSceneManager.Editor.Utility.VisualElementExtensions.FindAncestor(UnityEngine.UIElements.VisualElement,System.String,System.String,System.Action{UnityEngine.UIElements.VisualElement})
  commentId: M:AdvancedSceneManager.Editor.Utility.VisualElementExtensions.FindAncestor(UnityEngine.UIElements.VisualElement,System.String,System.String,System.Action{UnityEngine.UIElements.VisualElement})
  isExternal: true
  name: FindAncestor(VisualElement, String, String, Action<VisualElement>)
  nameWithType: VisualElementExtensions.FindAncestor(VisualElement, String, String, Action<VisualElement>)
  fullName: AdvancedSceneManager.Editor.Utility.VisualElementExtensions.FindAncestor(UnityEngine.UIElements.VisualElement, System.String, System.String, System.Action<UnityEngine.UIElements.VisualElement>)
  nameWithType.vb: VisualElementExtensions.FindAncestor(VisualElement, String, String, Action(Of VisualElement))
  fullName.vb: AdvancedSceneManager.Editor.Utility.VisualElementExtensions.FindAncestor(UnityEngine.UIElements.VisualElement, System.String, System.String, System.Action(Of UnityEngine.UIElements.VisualElement))
  name.vb: FindAncestor(VisualElement, String, String, Action(Of VisualElement))
  spec.csharp:
  - uid: AdvancedSceneManager.Editor.Utility.VisualElementExtensions.FindAncestor(UnityEngine.UIElements.VisualElement,System.String,System.String,System.Action{UnityEngine.UIElements.VisualElement})
    name: FindAncestor
    nameWithType: VisualElementExtensions.FindAncestor
    fullName: AdvancedSceneManager.Editor.Utility.VisualElementExtensions.FindAncestor
  - name: (
    nameWithType: (
    fullName: (
  - uid: UnityEngine.UIElements.VisualElement
    name: VisualElement
    nameWithType: VisualElement
    fullName: UnityEngine.UIElements.VisualElement
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: UnityEngine.UIElements.VisualElement
    name: VisualElement
    nameWithType: VisualElement
    fullName: UnityEngine.UIElements.VisualElement
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AdvancedSceneManager.Editor.Utility.VisualElementExtensions.FindAncestor(UnityEngine.UIElements.VisualElement,System.String,System.String,System.Action{UnityEngine.UIElements.VisualElement})
    name: FindAncestor
    nameWithType: VisualElementExtensions.FindAncestor
    fullName: AdvancedSceneManager.Editor.Utility.VisualElementExtensions.FindAncestor
  - name: (
    nameWithType: (
    fullName: (
  - uid: UnityEngine.UIElements.VisualElement
    name: VisualElement
    nameWithType: VisualElement
    fullName: UnityEngine.UIElements.VisualElement
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: UnityEngine.UIElements.VisualElement
    name: VisualElement
    nameWithType: VisualElement
    fullName: UnityEngine.UIElements.VisualElement
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: AdvancedSceneManager.Editor.Utility.VisualElementExtensions.GetRoot(UnityEngine.UIElements.VisualElement)
  commentId: M:AdvancedSceneManager.Editor.Utility.VisualElementExtensions.GetRoot(UnityEngine.UIElements.VisualElement)
  isExternal: true
  name: GetRoot(VisualElement)
  nameWithType: VisualElementExtensions.GetRoot(VisualElement)
  fullName: AdvancedSceneManager.Editor.Utility.VisualElementExtensions.GetRoot(UnityEngine.UIElements.VisualElement)
  spec.csharp:
  - uid: AdvancedSceneManager.Editor.Utility.VisualElementExtensions.GetRoot(UnityEngine.UIElements.VisualElement)
    name: GetRoot
    nameWithType: VisualElementExtensions.GetRoot
    fullName: AdvancedSceneManager.Editor.Utility.VisualElementExtensions.GetRoot
  - name: (
    nameWithType: (
    fullName: (
  - uid: UnityEngine.UIElements.VisualElement
    name: VisualElement
    nameWithType: VisualElement
    fullName: UnityEngine.UIElements.VisualElement
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AdvancedSceneManager.Editor.Utility.VisualElementExtensions.GetRoot(UnityEngine.UIElements.VisualElement)
    name: GetRoot
    nameWithType: VisualElementExtensions.GetRoot
    fullName: AdvancedSceneManager.Editor.Utility.VisualElementExtensions.GetRoot
  - name: (
    nameWithType: (
    fullName: (
  - uid: UnityEngine.UIElements.VisualElement
    name: VisualElement
    nameWithType: VisualElement
    fullName: UnityEngine.UIElements.VisualElement
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: AdvancedSceneManager.Editor.Utility
  commentId: N:AdvancedSceneManager.Editor.Utility
  name: AdvancedSceneManager.Editor.Utility
  nameWithType: AdvancedSceneManager.Editor.Utility
  fullName: AdvancedSceneManager.Editor.Utility
- uid: AdvancedSceneManager.Editor.SceneField.#ctor*
  commentId: Overload:AdvancedSceneManager.Editor.SceneField.#ctor
  name: SceneField
  nameWithType: SceneField.SceneField
  fullName: AdvancedSceneManager.Editor.SceneField.SceneField
- uid: AdvancedSceneManager.Editor.SceneField.labelFilter*
  commentId: Overload:AdvancedSceneManager.Editor.SceneField.labelFilter
  name: labelFilter
  nameWithType: SceneField.labelFilter
  fullName: AdvancedSceneManager.Editor.SceneField.labelFilter
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: AdvancedSceneManager.Editor.SceneField.showOpenButtons*
  commentId: Overload:AdvancedSceneManager.Editor.SceneField.showOpenButtons
  name: showOpenButtons
  nameWithType: SceneField.showOpenButtons
  fullName: AdvancedSceneManager.Editor.SceneField.showOpenButtons
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: AdvancedSceneManager.Editor.SceneField.defaultName*
  commentId: Overload:AdvancedSceneManager.Editor.SceneField.defaultName
  name: defaultName
  nameWithType: SceneField.defaultName
  fullName: AdvancedSceneManager.Editor.SceneField.defaultName
- uid: AdvancedSceneManager.Editor.SceneField.Collection*
  commentId: Overload:AdvancedSceneManager.Editor.SceneField.Collection
  name: Collection
  nameWithType: SceneField.Collection
  fullName: AdvancedSceneManager.Editor.SceneField.Collection
- uid: AdvancedSceneManager.Models.SceneCollection
  commentId: T:AdvancedSceneManager.Models.SceneCollection
  parent: AdvancedSceneManager.Models
  name: SceneCollection
  nameWithType: SceneCollection
  fullName: AdvancedSceneManager.Models.SceneCollection
- uid: System.Action
  commentId: T:System.Action
  parent: System
  isExternal: true
  name: Action
  nameWithType: Action
  fullName: System.Action
- uid: AdvancedSceneManager.Editor.SceneField.OpenScene*
  commentId: Overload:AdvancedSceneManager.Editor.SceneField.OpenScene
  name: OpenScene
  nameWithType: SceneField.OpenScene
  fullName: AdvancedSceneManager.Editor.SceneField.OpenScene
- uid: System.EventHandler{System.ValueTuple{AdvancedSceneManager.Models.Scene,AdvancedSceneManager.Models.Scene}}
  commentId: T:System.EventHandler{System.ValueTuple{AdvancedSceneManager.Models.Scene,AdvancedSceneManager.Models.Scene}}
  parent: System
  definition: System.EventHandler`1
  name: EventHandler<(T1, T2)<Scene, Scene>>
  nameWithType: EventHandler<(T1, T2)<Scene, Scene>>
  fullName: System.EventHandler<System.ValueTuple<AdvancedSceneManager.Models.Scene, AdvancedSceneManager.Models.Scene>>
  nameWithType.vb: EventHandler(Of (T1, T2)(Of Scene, Scene))
  fullName.vb: System.EventHandler(Of System.ValueTuple(Of AdvancedSceneManager.Models.Scene, AdvancedSceneManager.Models.Scene))
  name.vb: EventHandler(Of (T1, T2)(Of Scene, Scene))
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: AdvancedSceneManager.Models.Scene
    name: Scene
    nameWithType: Scene
    fullName: AdvancedSceneManager.Models.Scene
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: AdvancedSceneManager.Models.Scene
    name: Scene
    nameWithType: Scene
    fullName: AdvancedSceneManager.Models.Scene
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: AdvancedSceneManager.Models.Scene
    name: Scene
    nameWithType: Scene
    fullName: AdvancedSceneManager.Models.Scene
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: AdvancedSceneManager.Models.Scene
    name: Scene
    nameWithType: Scene
    fullName: AdvancedSceneManager.Models.Scene
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.EventHandler`1
  commentId: T:System.EventHandler`1
  isExternal: true
  name: EventHandler<TEventArgs>
  nameWithType: EventHandler<TEventArgs>
  fullName: System.EventHandler<TEventArgs>
  nameWithType.vb: EventHandler(Of TEventArgs)
  fullName.vb: System.EventHandler(Of TEventArgs)
  name.vb: EventHandler(Of TEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: AdvancedSceneManager.Editor.SceneField.SetValueWithoutNotify*
  commentId: Overload:AdvancedSceneManager.Editor.SceneField.SetValueWithoutNotify
  name: SetValueWithoutNotify
  nameWithType: SceneField.SetValueWithoutNotify
  fullName: AdvancedSceneManager.Editor.SceneField.SetValueWithoutNotify
- uid: AdvancedSceneManager.Editor.SceneField
  commentId: T:AdvancedSceneManager.Editor.SceneField
  parent: AdvancedSceneManager.Editor
  name: SceneField
  nameWithType: SceneField
  fullName: AdvancedSceneManager.Editor.SceneField
- uid: AdvancedSceneManager.Editor.SceneField.RegisterValueChangedCallback*
  commentId: Overload:AdvancedSceneManager.Editor.SceneField.RegisterValueChangedCallback
  name: RegisterValueChangedCallback
  nameWithType: SceneField.RegisterValueChangedCallback
  fullName: AdvancedSceneManager.Editor.SceneField.RegisterValueChangedCallback
- uid: UnityEngine.UIElements.EventCallback{UnityEngine.UIElements.ChangeEvent{AdvancedSceneManager.Models.Scene}}
  commentId: T:UnityEngine.UIElements.EventCallback{UnityEngine.UIElements.ChangeEvent{AdvancedSceneManager.Models.Scene}}
  parent: UnityEngine.UIElements
  definition: UnityEngine.UIElements.EventCallback`1
  name: EventCallback<ChangeEvent<Scene>>
  nameWithType: EventCallback<ChangeEvent<Scene>>
  fullName: UnityEngine.UIElements.EventCallback<UnityEngine.UIElements.ChangeEvent<AdvancedSceneManager.Models.Scene>>
  nameWithType.vb: EventCallback(Of ChangeEvent(Of Scene))
  fullName.vb: UnityEngine.UIElements.EventCallback(Of UnityEngine.UIElements.ChangeEvent(Of AdvancedSceneManager.Models.Scene))
  name.vb: EventCallback(Of ChangeEvent(Of Scene))
  spec.csharp:
  - uid: UnityEngine.UIElements.EventCallback`1
    name: EventCallback
    nameWithType: EventCallback
    fullName: UnityEngine.UIElements.EventCallback
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: UnityEngine.UIElements.ChangeEvent`1
    name: ChangeEvent
    nameWithType: ChangeEvent
    fullName: UnityEngine.UIElements.ChangeEvent
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: AdvancedSceneManager.Models.Scene
    name: Scene
    nameWithType: Scene
    fullName: AdvancedSceneManager.Models.Scene
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: UnityEngine.UIElements.EventCallback`1
    name: EventCallback
    nameWithType: EventCallback
    fullName: UnityEngine.UIElements.EventCallback
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: UnityEngine.UIElements.ChangeEvent`1
    name: ChangeEvent
    nameWithType: ChangeEvent
    fullName: UnityEngine.UIElements.ChangeEvent
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: AdvancedSceneManager.Models.Scene
    name: Scene
    nameWithType: Scene
    fullName: AdvancedSceneManager.Models.Scene
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: UnityEngine.UIElements.EventCallback`1
  commentId: T:UnityEngine.UIElements.EventCallback`1
  isExternal: true
  name: EventCallback<TEventType>
  nameWithType: EventCallback<TEventType>
  fullName: UnityEngine.UIElements.EventCallback<TEventType>
  nameWithType.vb: EventCallback(Of TEventType)
  fullName.vb: UnityEngine.UIElements.EventCallback(Of TEventType)
  name.vb: EventCallback(Of TEventType)
  spec.csharp:
  - uid: UnityEngine.UIElements.EventCallback`1
    name: EventCallback
    nameWithType: EventCallback
    fullName: UnityEngine.UIElements.EventCallback
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEventType
    nameWithType: TEventType
    fullName: TEventType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: UnityEngine.UIElements.EventCallback`1
    name: EventCallback
    nameWithType: EventCallback
    fullName: UnityEngine.UIElements.EventCallback
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEventType
    nameWithType: TEventType
    fullName: TEventType
  - name: )
    nameWithType: )
    fullName: )
- uid: AdvancedSceneManager.Editor.SceneField.value*
  commentId: Overload:AdvancedSceneManager.Editor.SceneField.value
  name: value
  nameWithType: SceneField.value
  fullName: AdvancedSceneManager.Editor.SceneField.value
