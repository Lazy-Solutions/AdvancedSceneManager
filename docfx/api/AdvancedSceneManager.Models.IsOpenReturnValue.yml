### YamlMime:ManagedReference
items:
- uid: AdvancedSceneManager.Models.IsOpenReturnValue
  commentId: T:AdvancedSceneManager.Models.IsOpenReturnValue
  id: IsOpenReturnValue
  parent: AdvancedSceneManager.Models
  children:
  - AdvancedSceneManager.Models.IsOpenReturnValue.asStandalone
  - AdvancedSceneManager.Models.IsOpenReturnValue.isPreloaded
  - AdvancedSceneManager.Models.IsOpenReturnValue.op_Implicit(AdvancedSceneManager.Models.IsOpenReturnValue)~System.Boolean
  - AdvancedSceneManager.Models.IsOpenReturnValue.op_Implicit(System.ValueTuple{System.Boolean,System.Boolean,System.Boolean})~AdvancedSceneManager.Models.IsOpenReturnValue
  - AdvancedSceneManager.Models.IsOpenReturnValue.op_Implicit(System.ValueTuple{System.Boolean,System.Boolean})~AdvancedSceneManager.Models.IsOpenReturnValue
  - AdvancedSceneManager.Models.IsOpenReturnValue.withCollection
  langs:
  - csharp
  - vb
  name: IsOpenReturnValue
  nameWithType: IsOpenReturnValue
  fullName: AdvancedSceneManager.Models.IsOpenReturnValue
  type: Struct
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/IsOpenReturnValue.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: IsOpenReturnValue
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/IsOpenReturnValue.cs
    startLine: 10
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Models
  summary: "\n<p>A struct to make working with the return value of the IsOpen() function a bit easier.</p>\n<p>Implicitly casts to bool, which can be used to check if scene is open in either.</p>\n"
  example: []
  syntax:
    content: public struct IsOpenReturnValue
    content.vb: Public Structure IsOpenReturnValue
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: AdvancedSceneManager.Models.IsOpenReturnValue.withCollection
  commentId: F:AdvancedSceneManager.Models.IsOpenReturnValue.withCollection
  id: withCollection
  parent: AdvancedSceneManager.Models.IsOpenReturnValue
  langs:
  - csharp
  - vb
  name: withCollection
  nameWithType: IsOpenReturnValue.withCollection
  fullName: AdvancedSceneManager.Models.IsOpenReturnValue.withCollection
  type: Field
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/IsOpenReturnValue.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: withCollection
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/IsOpenReturnValue.cs
    startLine: 14
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Models
  summary: The scene was opened as part of a collection.
  example: []
  syntax:
    content: public bool withCollection
    return:
      type: System.Boolean
    content.vb: Public withCollection As Boolean
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AdvancedSceneManager.Models.IsOpenReturnValue.asStandalone
  commentId: F:AdvancedSceneManager.Models.IsOpenReturnValue.asStandalone
  id: asStandalone
  parent: AdvancedSceneManager.Models.IsOpenReturnValue
  langs:
  - csharp
  - vb
  name: asStandalone
  nameWithType: IsOpenReturnValue.asStandalone
  fullName: AdvancedSceneManager.Models.IsOpenReturnValue.asStandalone
  type: Field
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/IsOpenReturnValue.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: asStandalone
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/IsOpenReturnValue.cs
    startLine: 16
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Models
  summary: The scene was opened as standalone.
  example: []
  syntax:
    content: public bool asStandalone
    return:
      type: System.Boolean
    content.vb: Public asStandalone As Boolean
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AdvancedSceneManager.Models.IsOpenReturnValue.isPreloaded
  commentId: F:AdvancedSceneManager.Models.IsOpenReturnValue.isPreloaded
  id: isPreloaded
  parent: AdvancedSceneManager.Models.IsOpenReturnValue
  langs:
  - csharp
  - vb
  name: isPreloaded
  nameWithType: IsOpenReturnValue.isPreloaded
  fullName: AdvancedSceneManager.Models.IsOpenReturnValue.isPreloaded
  type: Field
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/IsOpenReturnValue.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: isPreloaded
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/IsOpenReturnValue.cs
    startLine: 18
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Models
  summary: The scene is currently preloaded.
  example: []
  syntax:
    content: public bool isPreloaded
    return:
      type: System.Boolean
    content.vb: Public isPreloaded As Boolean
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AdvancedSceneManager.Models.IsOpenReturnValue.op_Implicit(AdvancedSceneManager.Models.IsOpenReturnValue)~System.Boolean
  commentId: M:AdvancedSceneManager.Models.IsOpenReturnValue.op_Implicit(AdvancedSceneManager.Models.IsOpenReturnValue)~System.Boolean
  id: op_Implicit(AdvancedSceneManager.Models.IsOpenReturnValue)~System.Boolean
  parent: AdvancedSceneManager.Models.IsOpenReturnValue
  langs:
  - csharp
  - vb
  name: Implicit(IsOpenReturnValue to Boolean)
  nameWithType: IsOpenReturnValue.Implicit(IsOpenReturnValue to Boolean)
  fullName: AdvancedSceneManager.Models.IsOpenReturnValue.Implicit(AdvancedSceneManager.Models.IsOpenReturnValue to System.Boolean)
  type: Operator
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/IsOpenReturnValue.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: op_Implicit
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/IsOpenReturnValue.cs
    startLine: 20
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Models
  syntax:
    content: public static implicit operator bool (IsOpenReturnValue value)
    parameters:
    - id: value
      type: AdvancedSceneManager.Models.IsOpenReturnValue
    return:
      type: System.Boolean
    content.vb: Public Shared Widening Operator CType(value As IsOpenReturnValue) As Boolean
  overload: AdvancedSceneManager.Models.IsOpenReturnValue.op_Implicit*
  nameWithType.vb: IsOpenReturnValue.Widening(IsOpenReturnValue to Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AdvancedSceneManager.Models.IsOpenReturnValue.Widening(AdvancedSceneManager.Models.IsOpenReturnValue to System.Boolean)
  name.vb: Widening(IsOpenReturnValue to Boolean)
- uid: AdvancedSceneManager.Models.IsOpenReturnValue.op_Implicit(System.ValueTuple{System.Boolean,System.Boolean})~AdvancedSceneManager.Models.IsOpenReturnValue
  commentId: M:AdvancedSceneManager.Models.IsOpenReturnValue.op_Implicit(System.ValueTuple{System.Boolean,System.Boolean})~AdvancedSceneManager.Models.IsOpenReturnValue
  id: op_Implicit(System.ValueTuple{System.Boolean,System.Boolean})~AdvancedSceneManager.Models.IsOpenReturnValue
  parent: AdvancedSceneManager.Models.IsOpenReturnValue
  langs:
  - csharp
  - vb
  name: Implicit((Boolean withCollection, Boolean asStandalone) to IsOpenReturnValue)
  nameWithType: IsOpenReturnValue.Implicit((Boolean withCollection, Boolean asStandalone) to IsOpenReturnValue)
  fullName: AdvancedSceneManager.Models.IsOpenReturnValue.Implicit(System.ValueTuple<System.Boolean, System.Boolean> to AdvancedSceneManager.Models.IsOpenReturnValue)
  type: Operator
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/IsOpenReturnValue.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: op_Implicit
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/IsOpenReturnValue.cs
    startLine: 23
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Models
  syntax:
    content: public static implicit operator IsOpenReturnValue((bool withCollection, bool asStandalone) value)
    parameters:
    - id: value
      type: System.ValueTuple{System.Boolean,System.Boolean}
    return:
      type: AdvancedSceneManager.Models.IsOpenReturnValue
    content.vb: Public Shared Widening Operator CType(value As(withCollection As Boolean, asStandalone As Boolean)(Of Boolean , Boolean)) As IsOpenReturnValue
  overload: AdvancedSceneManager.Models.IsOpenReturnValue.op_Implicit*
  nameWithType.vb: IsOpenReturnValue.Widening((withCollection As Boolean, asStandalone As Boolean)(Of Boolean, Boolean) to IsOpenReturnValue)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AdvancedSceneManager.Models.IsOpenReturnValue.Widening(System.ValueTuple(Of System.Boolean, System.Boolean) to AdvancedSceneManager.Models.IsOpenReturnValue)
  name.vb: Widening((withCollection As Boolean, asStandalone As Boolean)(Of Boolean, Boolean) to IsOpenReturnValue)
- uid: AdvancedSceneManager.Models.IsOpenReturnValue.op_Implicit(System.ValueTuple{System.Boolean,System.Boolean,System.Boolean})~AdvancedSceneManager.Models.IsOpenReturnValue
  commentId: M:AdvancedSceneManager.Models.IsOpenReturnValue.op_Implicit(System.ValueTuple{System.Boolean,System.Boolean,System.Boolean})~AdvancedSceneManager.Models.IsOpenReturnValue
  id: op_Implicit(System.ValueTuple{System.Boolean,System.Boolean,System.Boolean})~AdvancedSceneManager.Models.IsOpenReturnValue
  parent: AdvancedSceneManager.Models.IsOpenReturnValue
  langs:
  - csharp
  - vb
  name: Implicit((Boolean withCollection, Boolean asStandalone, Boolean isPreloaded) to IsOpenReturnValue)
  nameWithType: IsOpenReturnValue.Implicit((Boolean withCollection, Boolean asStandalone, Boolean isPreloaded) to IsOpenReturnValue)
  fullName: AdvancedSceneManager.Models.IsOpenReturnValue.Implicit(System.ValueTuple<System.Boolean, System.Boolean, System.Boolean> to AdvancedSceneManager.Models.IsOpenReturnValue)
  type: Operator
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/IsOpenReturnValue.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: op_Implicit
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/IsOpenReturnValue.cs
    startLine: 26
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Models
  syntax:
    content: public static implicit operator IsOpenReturnValue((bool withCollection, bool asStandalone, bool isPreloaded) value)
    parameters:
    - id: value
      type: System.ValueTuple{System.Boolean,System.Boolean,System.Boolean}
    return:
      type: AdvancedSceneManager.Models.IsOpenReturnValue
    content.vb: Public Shared Widening Operator CType(value As(withCollection As Boolean, asStandalone As Boolean, isPreloaded As Boolean)(Of Boolean , Boolean, Boolean)) As IsOpenReturnValue
  overload: AdvancedSceneManager.Models.IsOpenReturnValue.op_Implicit*
  nameWithType.vb: IsOpenReturnValue.Widening((withCollection As Boolean, asStandalone As Boolean, isPreloaded As Boolean)(Of Boolean, Boolean, Boolean) to IsOpenReturnValue)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AdvancedSceneManager.Models.IsOpenReturnValue.Widening(System.ValueTuple(Of System.Boolean, System.Boolean, System.Boolean) to AdvancedSceneManager.Models.IsOpenReturnValue)
  name.vb: Widening((withCollection As Boolean, asStandalone As Boolean, isPreloaded As Boolean)(Of Boolean, Boolean, Boolean) to IsOpenReturnValue)
references:
- uid: AdvancedSceneManager.Models
  commentId: N:AdvancedSceneManager.Models
  name: AdvancedSceneManager.Models
  nameWithType: AdvancedSceneManager.Models
  fullName: AdvancedSceneManager.Models
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: AdvancedSceneManager.Models.IsOpenReturnValue.op_Implicit*
  commentId: Overload:AdvancedSceneManager.Models.IsOpenReturnValue.op_Implicit
  name: Implicit
  nameWithType: IsOpenReturnValue.Implicit
  fullName: AdvancedSceneManager.Models.IsOpenReturnValue.Implicit
  nameWithType.vb: IsOpenReturnValue.Widening
  fullName.vb: AdvancedSceneManager.Models.IsOpenReturnValue.Widening
  name.vb: Widening
- uid: AdvancedSceneManager.Models.IsOpenReturnValue
  commentId: T:AdvancedSceneManager.Models.IsOpenReturnValue
  parent: AdvancedSceneManager.Models
  name: IsOpenReturnValue
  nameWithType: IsOpenReturnValue
  fullName: AdvancedSceneManager.Models.IsOpenReturnValue
- uid: System.ValueTuple{System.Boolean,System.Boolean}
  commentId: T:System.ValueTuple{System.Boolean,System.Boolean}
  parent: System
  definition: System.ValueTuple`2
  name: (T1, T2)<Boolean, Boolean>
  nameWithType: (T1, T2)<Boolean, Boolean>
  fullName: System.ValueTuple<System.Boolean, System.Boolean>
  nameWithType.vb: (T1, T2)(Of Boolean, Boolean)
  fullName.vb: System.ValueTuple(Of System.Boolean, System.Boolean)
  name.vb: (T1, T2)(Of Boolean, Boolean)
  spec.csharp:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueTuple`2
  commentId: T:System.ValueTuple`2
  isExternal: true
  name: (T1, T2)<T1, T2>
  nameWithType: (T1, T2)<T1, T2>
  fullName: System.ValueTuple<T1, T2>
  nameWithType.vb: (T1, T2)(Of T1, T2)
  fullName.vb: System.ValueTuple(Of T1, T2)
  name.vb: (T1, T2)(Of T1, T2)
  spec.csharp:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueTuple{System.Boolean,System.Boolean,System.Boolean}
  commentId: T:System.ValueTuple{System.Boolean,System.Boolean,System.Boolean}
  parent: System
  definition: System.ValueTuple`3
  name: (T1, T2, T3)<Boolean, Boolean, Boolean>
  nameWithType: (T1, T2, T3)<Boolean, Boolean, Boolean>
  fullName: System.ValueTuple<System.Boolean, System.Boolean, System.Boolean>
  nameWithType.vb: (T1, T2, T3)(Of Boolean, Boolean, Boolean)
  fullName.vb: System.ValueTuple(Of System.Boolean, System.Boolean, System.Boolean)
  name.vb: (T1, T2, T3)(Of Boolean, Boolean, Boolean)
  spec.csharp:
  - uid: System.ValueTuple`3
    name: (T1, T2, T3)
    nameWithType: (T1, T2, T3)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`3
    name: (T1, T2, T3)
    nameWithType: (T1, T2, T3)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueTuple`3
  commentId: T:System.ValueTuple`3
  isExternal: true
  name: (T1, T2, T3)<T1, T2, T3>
  nameWithType: (T1, T2, T3)<T1, T2, T3>
  fullName: System.ValueTuple<T1, T2, T3>
  nameWithType.vb: (T1, T2, T3)(Of T1, T2, T3)
  fullName.vb: System.ValueTuple(Of T1, T2, T3)
  name.vb: (T1, T2, T3)(Of T1, T2, T3)
  spec.csharp:
  - uid: System.ValueTuple`3
    name: (T1, T2, T3)
    nameWithType: (T1, T2, T3)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`3
    name: (T1, T2, T3)
    nameWithType: (T1, T2, T3)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: )
    nameWithType: )
    fullName: )
