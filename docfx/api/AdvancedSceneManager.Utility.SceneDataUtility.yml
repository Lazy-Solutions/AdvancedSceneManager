### YamlMime:ManagedReference
items:
- uid: AdvancedSceneManager.Utility.SceneDataUtility
  commentId: T:AdvancedSceneManager.Utility.SceneDataUtility
  id: SceneDataUtility
  parent: AdvancedSceneManager.Utility
  children:
  - AdvancedSceneManager.Utility.SceneDataUtility.Enumerate``1(System.String)
  - AdvancedSceneManager.Utility.SceneDataUtility.Get``1(AdvancedSceneManager.Models.Scene,System.String,``0)
  - AdvancedSceneManager.Utility.SceneDataUtility.Get``1(System.String,System.String,``0)
  - AdvancedSceneManager.Utility.SceneDataUtility.GetDirect(AdvancedSceneManager.Models.Scene,System.String)
  - AdvancedSceneManager.Utility.SceneDataUtility.GetDirect(System.String,System.String)
  - AdvancedSceneManager.Utility.SceneDataUtility.Set``1(AdvancedSceneManager.Models.Scene,System.String,``0)
  - AdvancedSceneManager.Utility.SceneDataUtility.Set``1(System.String,System.String,``0)
  - AdvancedSceneManager.Utility.SceneDataUtility.SetDirect(AdvancedSceneManager.Models.Scene,System.String,System.String)
  - AdvancedSceneManager.Utility.SceneDataUtility.SetDirect(System.String,System.String,System.String)
  - AdvancedSceneManager.Utility.SceneDataUtility.Unset(AdvancedSceneManager.Models.Scene,System.String)
  - AdvancedSceneManager.Utility.SceneDataUtility.Unset(System.String,System.String)
  langs:
  - csharp
  - vb
  name: SceneDataUtility
  nameWithType: SceneDataUtility
  fullName: AdvancedSceneManager.Utility.SceneDataUtility
  type: Class
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Utility/SceneDataUtility.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: SceneDataUtility
    path: ../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Utility/SceneDataUtility.cs
    startLine: 22
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Utility
  summary: A utility for storing scene related data. Data can only be saved to disk in editor.
  example: []
  syntax:
    content: public static class SceneDataUtility
    content.vb: Public Module SceneDataUtility
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: AdvancedSceneManager.Utility.SceneDataUtility.Enumerate``1(System.String)
  commentId: M:AdvancedSceneManager.Utility.SceneDataUtility.Enumerate``1(System.String)
  id: Enumerate``1(System.String)
  parent: AdvancedSceneManager.Utility.SceneDataUtility
  langs:
  - csharp
  - vb
  name: Enumerate<T>(String)
  nameWithType: SceneDataUtility.Enumerate<T>(String)
  fullName: AdvancedSceneManager.Utility.SceneDataUtility.Enumerate<T>(System.String)
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Utility/SceneDataUtility.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: Enumerate
    path: ../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Utility/SceneDataUtility.cs
    startLine: 89
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Utility
  summary: Enumerates all <code data-dev-comment-type="typeparamref" class="typeparamref">T</code> on all scenes.
  example: []
  syntax:
    content: public static IEnumerable<T> Enumerate<T>(string key)
    parameters:
    - id: key
      type: System.String
    typeParameters:
    - id: T
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
    content.vb: Public Shared Function Enumerate(Of T)(key As String) As IEnumerable(Of T)
  overload: AdvancedSceneManager.Utility.SceneDataUtility.Enumerate*
  nameWithType.vb: SceneDataUtility.Enumerate(Of T)(String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AdvancedSceneManager.Utility.SceneDataUtility.Enumerate(Of T)(System.String)
  name.vb: Enumerate(Of T)(String)
- uid: AdvancedSceneManager.Utility.SceneDataUtility.Get``1(AdvancedSceneManager.Models.Scene,System.String,``0)
  commentId: M:AdvancedSceneManager.Utility.SceneDataUtility.Get``1(AdvancedSceneManager.Models.Scene,System.String,``0)
  id: Get``1(AdvancedSceneManager.Models.Scene,System.String,``0)
  parent: AdvancedSceneManager.Utility.SceneDataUtility
  langs:
  - csharp
  - vb
  name: Get<T>(Scene, String, T)
  nameWithType: SceneDataUtility.Get<T>(Scene, String, T)
  fullName: AdvancedSceneManager.Utility.SceneDataUtility.Get<T>(AdvancedSceneManager.Models.Scene, System.String, T)
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Utility/SceneDataUtility.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: Get
    path: ../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Utility/SceneDataUtility.cs
    startLine: 101
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Utility
  summary: Gets the value with the specified key, for the specified scene.
  example: []
  syntax:
    content: public static T Get<T>(Scene scene, string key, T defaultValue = null)
    parameters:
    - id: scene
      type: AdvancedSceneManager.Models.Scene
    - id: key
      type: System.String
    - id: defaultValue
      type: '{T}'
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Public Shared Function Get(Of T)(scene As Scene, key As String, defaultValue As T = Nothing) As T
  overload: AdvancedSceneManager.Utility.SceneDataUtility.Get*
  nameWithType.vb: SceneDataUtility.Get(Of T)(Scene, String, T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AdvancedSceneManager.Utility.SceneDataUtility.Get(Of T)(AdvancedSceneManager.Models.Scene, System.String, T)
  name.vb: Get(Of T)(Scene, String, T)
- uid: AdvancedSceneManager.Utility.SceneDataUtility.GetDirect(AdvancedSceneManager.Models.Scene,System.String)
  commentId: M:AdvancedSceneManager.Utility.SceneDataUtility.GetDirect(AdvancedSceneManager.Models.Scene,System.String)
  id: GetDirect(AdvancedSceneManager.Models.Scene,System.String)
  parent: AdvancedSceneManager.Utility.SceneDataUtility
  langs:
  - csharp
  - vb
  name: GetDirect(Scene, String)
  nameWithType: SceneDataUtility.GetDirect(Scene, String)
  fullName: AdvancedSceneManager.Utility.SceneDataUtility.GetDirect(AdvancedSceneManager.Models.Scene, System.String)
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Utility/SceneDataUtility.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: GetDirect
    path: ../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Utility/SceneDataUtility.cs
    startLine: 105
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Utility
  summary: Gets the value with the specified key, for the specified scene. This is the direct version, all values are stores as string, which means <xref href="AdvancedSceneManager.Utility.SceneDataUtility.Get%60%601(System.String%2cSystem.String%2c%60%600)" data-throw-if-not-resolved="false"></xref> must convert value beforehand, this method doesn&apos;t.
  example: []
  syntax:
    content: public static string GetDirect(Scene scene, string key)
    parameters:
    - id: scene
      type: AdvancedSceneManager.Models.Scene
    - id: key
      type: System.String
    return:
      type: System.String
    content.vb: Public Shared Function GetDirect(scene As Scene, key As String) As String
  overload: AdvancedSceneManager.Utility.SceneDataUtility.GetDirect*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: AdvancedSceneManager.Utility.SceneDataUtility.Set``1(AdvancedSceneManager.Models.Scene,System.String,``0)
  commentId: M:AdvancedSceneManager.Utility.SceneDataUtility.Set``1(AdvancedSceneManager.Models.Scene,System.String,``0)
  id: Set``1(AdvancedSceneManager.Models.Scene,System.String,``0)
  parent: AdvancedSceneManager.Utility.SceneDataUtility
  langs:
  - csharp
  - vb
  name: Set<T>(Scene, String, T)
  nameWithType: SceneDataUtility.Set<T>(Scene, String, T)
  fullName: AdvancedSceneManager.Utility.SceneDataUtility.Set<T>(AdvancedSceneManager.Models.Scene, System.String, T)
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Utility/SceneDataUtility.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: Set
    path: ../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Utility/SceneDataUtility.cs
    startLine: 109
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Utility
  summary: Sets the value with the specified key, for the specified scene.
  example: []
  syntax:
    content: public static void Set<T>(Scene scene, string key, T value)
    parameters:
    - id: scene
      type: AdvancedSceneManager.Models.Scene
    - id: key
      type: System.String
    - id: value
      type: '{T}'
    typeParameters:
    - id: T
    content.vb: Public Shared Sub Set(Of T)(scene As Scene, key As String, value As T)
  overload: AdvancedSceneManager.Utility.SceneDataUtility.Set*
  nameWithType.vb: SceneDataUtility.Set(Of T)(Scene, String, T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AdvancedSceneManager.Utility.SceneDataUtility.Set(Of T)(AdvancedSceneManager.Models.Scene, System.String, T)
  name.vb: Set(Of T)(Scene, String, T)
- uid: AdvancedSceneManager.Utility.SceneDataUtility.SetDirect(AdvancedSceneManager.Models.Scene,System.String,System.String)
  commentId: M:AdvancedSceneManager.Utility.SceneDataUtility.SetDirect(AdvancedSceneManager.Models.Scene,System.String,System.String)
  id: SetDirect(AdvancedSceneManager.Models.Scene,System.String,System.String)
  parent: AdvancedSceneManager.Utility.SceneDataUtility
  langs:
  - csharp
  - vb
  name: SetDirect(Scene, String, String)
  nameWithType: SceneDataUtility.SetDirect(Scene, String, String)
  fullName: AdvancedSceneManager.Utility.SceneDataUtility.SetDirect(AdvancedSceneManager.Models.Scene, System.String, System.String)
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Utility/SceneDataUtility.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: SetDirect
    path: ../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Utility/SceneDataUtility.cs
    startLine: 113
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Utility
  summary: Sets the value with the specified key, for the specified scene. This is the direct version, all values are stores as string, which means <xref href="AdvancedSceneManager.Utility.SceneDataUtility.Get%60%601(System.String%2cSystem.String%2c%60%600)" data-throw-if-not-resolved="false"></xref> must convert value beforehand, this method doesn&apos;t.
  example: []
  syntax:
    content: public static void SetDirect(Scene scene, string key, string value)
    parameters:
    - id: scene
      type: AdvancedSceneManager.Models.Scene
    - id: key
      type: System.String
    - id: value
      type: System.String
    content.vb: Public Shared Sub SetDirect(scene As Scene, key As String, value As String)
  overload: AdvancedSceneManager.Utility.SceneDataUtility.SetDirect*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: AdvancedSceneManager.Utility.SceneDataUtility.Unset(AdvancedSceneManager.Models.Scene,System.String)
  commentId: M:AdvancedSceneManager.Utility.SceneDataUtility.Unset(AdvancedSceneManager.Models.Scene,System.String)
  id: Unset(AdvancedSceneManager.Models.Scene,System.String)
  parent: AdvancedSceneManager.Utility.SceneDataUtility
  langs:
  - csharp
  - vb
  name: Unset(Scene, String)
  nameWithType: SceneDataUtility.Unset(Scene, String)
  fullName: AdvancedSceneManager.Utility.SceneDataUtility.Unset(AdvancedSceneManager.Models.Scene, System.String)
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Utility/SceneDataUtility.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: Unset
    path: ../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Utility/SceneDataUtility.cs
    startLine: 117
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Utility
  summary: Unsets the value with the specified key, for the specified scene.
  example: []
  syntax:
    content: public static void Unset(Scene scene, string key)
    parameters:
    - id: scene
      type: AdvancedSceneManager.Models.Scene
    - id: key
      type: System.String
    content.vb: Public Shared Sub Unset(scene As Scene, key As String)
  overload: AdvancedSceneManager.Utility.SceneDataUtility.Unset*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: AdvancedSceneManager.Utility.SceneDataUtility.Get``1(System.String,System.String,``0)
  commentId: M:AdvancedSceneManager.Utility.SceneDataUtility.Get``1(System.String,System.String,``0)
  id: Get``1(System.String,System.String,``0)
  parent: AdvancedSceneManager.Utility.SceneDataUtility
  langs:
  - csharp
  - vb
  name: Get<T>(String, String, T)
  nameWithType: SceneDataUtility.Get<T>(String, String, T)
  fullName: AdvancedSceneManager.Utility.SceneDataUtility.Get<T>(System.String, System.String, T)
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Utility/SceneDataUtility.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: Get
    path: ../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Utility/SceneDataUtility.cs
    startLine: 121
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Utility
  summary: Gets the value with the specified key, for the specified scene.
  example: []
  syntax:
    content: public static T Get<T>(string scene, string key, T defaultValue = null)
    parameters:
    - id: scene
      type: System.String
    - id: key
      type: System.String
    - id: defaultValue
      type: '{T}'
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Public Shared Function Get(Of T)(scene As String, key As String, defaultValue As T = Nothing) As T
  overload: AdvancedSceneManager.Utility.SceneDataUtility.Get*
  nameWithType.vb: SceneDataUtility.Get(Of T)(String, String, T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AdvancedSceneManager.Utility.SceneDataUtility.Get(Of T)(System.String, System.String, T)
  name.vb: Get(Of T)(String, String, T)
- uid: AdvancedSceneManager.Utility.SceneDataUtility.GetDirect(System.String,System.String)
  commentId: M:AdvancedSceneManager.Utility.SceneDataUtility.GetDirect(System.String,System.String)
  id: GetDirect(System.String,System.String)
  parent: AdvancedSceneManager.Utility.SceneDataUtility
  langs:
  - csharp
  - vb
  name: GetDirect(String, String)
  nameWithType: SceneDataUtility.GetDirect(String, String)
  fullName: AdvancedSceneManager.Utility.SceneDataUtility.GetDirect(System.String, System.String)
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Utility/SceneDataUtility.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: GetDirect
    path: ../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Utility/SceneDataUtility.cs
    startLine: 168
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Utility
  summary: Gets the value with the specified key, for the specified scene. This is the direct version, all values are stores as string, which means <xref href="AdvancedSceneManager.Utility.SceneDataUtility.Get%60%601(System.String%2cSystem.String%2c%60%600)" data-throw-if-not-resolved="false"></xref> must convert value beforehand, this method doesn&apos;t.
  example: []
  syntax:
    content: public static string GetDirect(string scene, string key)
    parameters:
    - id: scene
      type: System.String
    - id: key
      type: System.String
    return:
      type: System.String
    content.vb: Public Shared Function GetDirect(scene As String, key As String) As String
  overload: AdvancedSceneManager.Utility.SceneDataUtility.GetDirect*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: AdvancedSceneManager.Utility.SceneDataUtility.Set``1(System.String,System.String,``0)
  commentId: M:AdvancedSceneManager.Utility.SceneDataUtility.Set``1(System.String,System.String,``0)
  id: Set``1(System.String,System.String,``0)
  parent: AdvancedSceneManager.Utility.SceneDataUtility
  langs:
  - csharp
  - vb
  name: Set<T>(String, String, T)
  nameWithType: SceneDataUtility.Set<T>(String, String, T)
  fullName: AdvancedSceneManager.Utility.SceneDataUtility.Set<T>(System.String, System.String, T)
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Utility/SceneDataUtility.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: Set
    path: ../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Utility/SceneDataUtility.cs
    startLine: 172
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Utility
  summary: Sets the value with the specified key, for the specified scene.
  example: []
  syntax:
    content: public static void Set<T>(string scene, string key, T value)
    parameters:
    - id: scene
      type: System.String
    - id: key
      type: System.String
    - id: value
      type: '{T}'
    typeParameters:
    - id: T
    content.vb: Public Shared Sub Set(Of T)(scene As String, key As String, value As T)
  overload: AdvancedSceneManager.Utility.SceneDataUtility.Set*
  nameWithType.vb: SceneDataUtility.Set(Of T)(String, String, T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AdvancedSceneManager.Utility.SceneDataUtility.Set(Of T)(System.String, System.String, T)
  name.vb: Set(Of T)(String, String, T)
- uid: AdvancedSceneManager.Utility.SceneDataUtility.SetDirect(System.String,System.String,System.String)
  commentId: M:AdvancedSceneManager.Utility.SceneDataUtility.SetDirect(System.String,System.String,System.String)
  id: SetDirect(System.String,System.String,System.String)
  parent: AdvancedSceneManager.Utility.SceneDataUtility
  langs:
  - csharp
  - vb
  name: SetDirect(String, String, String)
  nameWithType: SceneDataUtility.SetDirect(String, String, String)
  fullName: AdvancedSceneManager.Utility.SceneDataUtility.SetDirect(System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Utility/SceneDataUtility.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: SetDirect
    path: ../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Utility/SceneDataUtility.cs
    startLine: 181
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Utility
  summary: Sets the value with the specified key, for the specified scene. This is the direct version, all values are stores as string, which means <xref href="AdvancedSceneManager.Utility.SceneDataUtility.Get%60%601(System.String%2cSystem.String%2c%60%600)" data-throw-if-not-resolved="false"></xref> must convert value beforehand, this method doesn&apos;t.
  example: []
  syntax:
    content: public static void SetDirect(string scene, string key, string value)
    parameters:
    - id: scene
      type: System.String
    - id: key
      type: System.String
    - id: value
      type: System.String
    content.vb: Public Shared Sub SetDirect(scene As String, key As String, value As String)
  overload: AdvancedSceneManager.Utility.SceneDataUtility.SetDirect*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: AdvancedSceneManager.Utility.SceneDataUtility.Unset(System.String,System.String)
  commentId: M:AdvancedSceneManager.Utility.SceneDataUtility.Unset(System.String,System.String)
  id: Unset(System.String,System.String)
  parent: AdvancedSceneManager.Utility.SceneDataUtility
  langs:
  - csharp
  - vb
  name: Unset(String, String)
  nameWithType: SceneDataUtility.Unset(String, String)
  fullName: AdvancedSceneManager.Utility.SceneDataUtility.Unset(System.String, System.String)
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Utility/SceneDataUtility.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: Unset
    path: ../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Utility/SceneDataUtility.cs
    startLine: 189
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Utility
  summary: Unsets the value with the specified key, for the specified scene.
  example: []
  syntax:
    content: public static void Unset(string scene, string key)
    parameters:
    - id: scene
      type: System.String
    - id: key
      type: System.String
    content.vb: Public Shared Sub Unset(scene As String, key As String)
  overload: AdvancedSceneManager.Utility.SceneDataUtility.Unset*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: AdvancedSceneManager.Utility
  commentId: N:AdvancedSceneManager.Utility
  name: AdvancedSceneManager.Utility
  nameWithType: AdvancedSceneManager.Utility
  fullName: AdvancedSceneManager.Utility
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: AdvancedSceneManager.Utility.SceneDataUtility.Enumerate*
  commentId: Overload:AdvancedSceneManager.Utility.SceneDataUtility.Enumerate
  name: Enumerate
  nameWithType: SceneDataUtility.Enumerate
  fullName: AdvancedSceneManager.Utility.SceneDataUtility.Enumerate
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: AdvancedSceneManager.Utility.SceneDataUtility.Get*
  commentId: Overload:AdvancedSceneManager.Utility.SceneDataUtility.Get
  name: Get
  nameWithType: SceneDataUtility.Get
  fullName: AdvancedSceneManager.Utility.SceneDataUtility.Get
- uid: AdvancedSceneManager.Models.Scene
  commentId: T:AdvancedSceneManager.Models.Scene
  parent: AdvancedSceneManager.Models
  name: Scene
  nameWithType: Scene
  fullName: AdvancedSceneManager.Models.Scene
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: AdvancedSceneManager.Models
  commentId: N:AdvancedSceneManager.Models
  name: AdvancedSceneManager.Models
  nameWithType: AdvancedSceneManager.Models
  fullName: AdvancedSceneManager.Models
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: AdvancedSceneManager.Utility.SceneDataUtility.Get``1(System.String,System.String,``0)
  commentId: M:AdvancedSceneManager.Utility.SceneDataUtility.Get``1(System.String,System.String,``0)
  isExternal: true
- uid: AdvancedSceneManager.Utility.SceneDataUtility.GetDirect*
  commentId: Overload:AdvancedSceneManager.Utility.SceneDataUtility.GetDirect
  name: GetDirect
  nameWithType: SceneDataUtility.GetDirect
  fullName: AdvancedSceneManager.Utility.SceneDataUtility.GetDirect
- uid: AdvancedSceneManager.Utility.SceneDataUtility.Set*
  commentId: Overload:AdvancedSceneManager.Utility.SceneDataUtility.Set
  name: Set
  nameWithType: SceneDataUtility.Set
  fullName: AdvancedSceneManager.Utility.SceneDataUtility.Set
- uid: AdvancedSceneManager.Utility.SceneDataUtility.SetDirect*
  commentId: Overload:AdvancedSceneManager.Utility.SceneDataUtility.SetDirect
  name: SetDirect
  nameWithType: SceneDataUtility.SetDirect
  fullName: AdvancedSceneManager.Utility.SceneDataUtility.SetDirect
- uid: AdvancedSceneManager.Utility.SceneDataUtility.Unset*
  commentId: Overload:AdvancedSceneManager.Utility.SceneDataUtility.Unset
  name: Unset
  nameWithType: SceneDataUtility.Unset
  fullName: AdvancedSceneManager.Utility.SceneDataUtility.Unset
