{
  "api/AdvancedSceneManager.Callbacks.CallbackUtility.FluentInvokeAPI-1.html": {
    "href": "api/AdvancedSceneManager.Callbacks.CallbackUtility.FluentInvokeAPI-1.html",
    "title": "CallbackUtility.FluentInvokeAPI<T> | Advanced Scene Manager",
    "keywords": "CallbackUtility.FluentInvokeAPI<T> An helper class to facilitate a fluent api. Usage: Invoke<T>() . Inheritance Object CallbackUtility.FluentInvokeAPI<T> Properties hasDefaultCallback Gets whatever T has a default callback. All callbacks inheriting from ISceneManagerCallbackBase should have one. public bool hasDefaultCallback { get; } Methods On(OpenSceneInfo[]) Specify the scenes to run this callback on and start execution. public IEnumerator On(params OpenSceneInfo[] scenes) On(Scene[]) Specify the open scenes to run this callback on and start execution.. public IEnumerator On(params Scene[] scenes) On(SceneCollection, Scene[]) Specify the collection scenes to run this callback on and start execution. public IEnumerator On(SceneCollection collection, params Scene[] additionalScenes) OnAllOpenScenes() Specify the collection scenes to run this callback on and start execution.. public IEnumerator OnAllOpenScenes() WithCallback(Func<T, IEnumerator>) Specify a callback, this should point to the interface method which provides a IEnumerator . This is not needed for callback interfaces inheriting from ISceneManagerCallbackBase . public CallbackUtility.FluentInvokeAPI<T> WithCallback(Func<T, IEnumerator> callback) WithParam(Object) Specify a parameter to use when invoking the callback. public CallbackUtility.FluentInvokeAPI<T> WithParam(object param)"
  },
  "api/AdvancedSceneManager.Callbacks.CallbackUtility.html": {
    "href": "api/AdvancedSceneManager.Callbacks.CallbackUtility.html",
    "title": "CallbackUtility | Advanced Scene Manager",
    "keywords": "CallbackUtility An utility class that invokes callbacks (defined in interfaces based on ISceneManagerCallbackBase ), and tracks performance and provides tools for optimizing and diagnosing bottlenecks in these callbacks. Inheritance Object UnityEngine.Object UnityEngine.ScriptableObject UnityEditor.EditorWindow CallbackUtility Fields customYieldInstructions public static readonly Type[] customYieldInstructions delayInstructions public static readonly Type[] delayInstructions yieldInstructions public static readonly Type[] yieldInstructions Methods Invoke<T>() public static CallbackUtility.FluentInvokeAPI<T> Invoke<T>() Open() public static void Open() Extension Methods ScriptableObjectUtility.Save(ScriptableObject)"
  },
  "api/AdvancedSceneManager.Callbacks.CallbackUtility.ShowMode.html": {
    "href": "api/AdvancedSceneManager.Callbacks.CallbackUtility.ShowMode.html",
    "title": "CallbackUtility.ShowMode | Advanced Scene Manager",
    "keywords": "CallbackUtility.ShowMode Fields Name Description Frames Time"
  },
  "api/AdvancedSceneManager.Callbacks.CombineNull.html": {
    "href": "api/AdvancedSceneManager.Callbacks.CombineNull.html",
    "title": "CombineNull | Advanced Scene Manager",
    "keywords": "CombineNull Inheritance Object CombineNull Fields value public static readonly CombineNull value Methods IsCombineNull(CoroutineDiagHelper.SubroutineDetails) public static bool IsCombineNull(CoroutineDiagHelper.SubroutineDetails coroutine)"
  },
  "api/AdvancedSceneManager.Callbacks.CoroutineDiagHelper.CallerDetails.html": {
    "href": "api/AdvancedSceneManager.Callbacks.CoroutineDiagHelper.CallerDetails.html",
    "title": "CoroutineDiagHelper.CallerDetails | Advanced Scene Manager",
    "keywords": "CoroutineDiagHelper.CallerDetails Inheritance Object CoroutineDiagHelper.CallerDetails Fields className public string className file public string file line public int line method public string method methodParameters public string[] methodParameters Methods ToString() public override string ToString() Overrides Object.ToString()"
  },
  "api/AdvancedSceneManager.Callbacks.CoroutineDiagHelper.html": {
    "href": "api/AdvancedSceneManager.Callbacks.CoroutineDiagHelper.html",
    "title": "CoroutineDiagHelper | Advanced Scene Manager",
    "keywords": "CoroutineDiagHelper Inheritance Object CoroutineDiagHelper Constructors CoroutineDiagHelper() public CoroutineDiagHelper() CoroutineDiagHelper((MethodBase method, String file, Int32 line), String) public CoroutineDiagHelper((MethodBase method, string file, int line) caller, string description) Fields caller public CoroutineDiagHelper.CallerDetails caller description public string description details public List<CoroutineDiagHelper.SubroutineDetails> details duration public SerializableTimeSpan duration durationFrames public int durationFrames isComplete public bool isComplete isParallel public bool isParallel isPaused public bool isPaused startFrame public int startFrame startTime public SerializableDateTime startTime wasCancelled public bool wasCancelled Properties diagOffset public TimeSpan diagOffset { get; } Methods SetParallel(Boolean) Sets this coroutine as parallel, does nothing beyond provide info for later use, through property isParallel . public void SetParallel(bool isParallel) ToString() public override string ToString() Overrides Object.ToString() ViewCallerInCodeEditor() View caller in code editor. public void ViewCallerInCodeEditor()"
  },
  "api/AdvancedSceneManager.Callbacks.CoroutineDiagHelper.SubroutineDetails.html": {
    "href": "api/AdvancedSceneManager.Callbacks.CoroutineDiagHelper.SubroutineDetails.html",
    "title": "CoroutineDiagHelper.SubroutineDetails | Advanced Scene Manager",
    "keywords": "CoroutineDiagHelper.SubroutineDetails Inheritance Object CoroutineDiagHelper.SubroutineDetails Constructors SubroutineDetails(Object, Int32, CoroutineDiagHelper, CoroutineDiagHelper.SubroutineDetails) public SubroutineDetails(object subroutine, int level, CoroutineDiagHelper helper, CoroutineDiagHelper.SubroutineDetails parent) Fields endFrame public int endFrame endTime public SerializableTimeSpan endTime isDefaultYieldInstruction public bool isDefaultYieldInstruction isDefaultYieldInstructionComponent public bool isDefaultYieldInstructionComponent isMethod public bool isMethod isValueType public bool isValueType level public int level startFrame public int startFrame startTime public SerializableTimeSpan startTime subroutine public string subroutine type public string type Properties helper public CoroutineDiagHelper helper { get; } isNull public bool isNull { get; } Methods End() public void End() ToString() public override string ToString() Overrides Object.ToString()"
  },
  "api/AdvancedSceneManager.Callbacks.html": {
    "href": "api/AdvancedSceneManager.Callbacks.html",
    "title": "AdvancedSceneManager.Callbacks | Advanced Scene Manager",
    "keywords": "AdvancedSceneManager.Callbacks Classes CallbackUtility An utility class that invokes callbacks (defined in interfaces based on ISceneManagerCallbackBase ), and tracks performance and provides tools for optimizing and diagnosing bottlenecks in these callbacks. CallbackUtility.FluentInvokeAPI<T> An helper class to facilitate a fluent api. Usage: Invoke<T>() . CombineNull CoroutineDiagHelper CoroutineDiagHelper.CallerDetails CoroutineDiagHelper.SubroutineDetails LoadingScreen A class that contains callbacks for loading screens. One instance must exist in a scene that specified as a loading screen. ParallelASMCallbacks Specifies whatever the ASM callbacks should be run in parallel for any callbacks defined in this script. Serializable<T, TValue> SerializableDateTime SerializableTimeSpan SplashScreen A class that contains callbacks for splash screens. SplashScreen and LoadingScreen cannot coexist within the same scene. Interfaces ICollectionClose Callback for when a scene in a collection that a UnityEngine.MonoBehaviour is contained within is closed. Called after loading screen has opened, if one is defined, or else just before collection is closed. ICollectionExtraData Callbacks for a UnityEngine.ScriptableObject that has been set as extra data for a collection. ICollectionOpen Callback for when a scene in a collection that a UnityEngine.MonoBehaviour is contained within is opened. Called before loading screen is hidden, if one is defined, or else just when collection has opened. ISceneClose Callback for when the scene that a UnityEngine.MonoBehaviour is contained within is closed. ISceneManagerCallbackBase Base interface for ISceneOpen , ISceneClose , ICollectionOpen , ICollectionClose . Does nothing on its own, used by CallbackUtility . ISceneOpen Callback for when the scene that a UnityEngine.MonoBehaviour is contained within is opened. Enums CallbackUtility.ShowMode"
  },
  "api/AdvancedSceneManager.Callbacks.ICollectionClose.html": {
    "href": "api/AdvancedSceneManager.Callbacks.ICollectionClose.html",
    "title": "ICollectionClose | Advanced Scene Manager",
    "keywords": "ICollectionClose Callback for when a scene in a collection that a UnityEngine.MonoBehaviour is contained within is closed. Called after loading screen has opened, if one is defined, or else just before collection is closed. Methods OnCollectionClose(SceneCollection) Callback for when a scene in a collection that a UnityEngine.MonoBehaviour is contained within is closed. Called after loading screen has opened, if one is defined, or else just before collection is closed. IEnumerator OnCollectionClose(SceneCollection collection)"
  },
  "api/AdvancedSceneManager.Callbacks.ICollectionExtraData.html": {
    "href": "api/AdvancedSceneManager.Callbacks.ICollectionExtraData.html",
    "title": "ICollectionExtraData | Advanced Scene Manager",
    "keywords": "ICollectionExtraData Callbacks for a UnityEngine.ScriptableObject that has been set as extra data for a collection."
  },
  "api/AdvancedSceneManager.Callbacks.ICollectionOpen.html": {
    "href": "api/AdvancedSceneManager.Callbacks.ICollectionOpen.html",
    "title": "ICollectionOpen | Advanced Scene Manager",
    "keywords": "ICollectionOpen Callback for when a scene in a collection that a UnityEngine.MonoBehaviour is contained within is opened. Called before loading screen is hidden, if one is defined, or else just when collection has opened. Methods OnCollectionOpen(SceneCollection) Callback for when a scene in a collection that a UnityEngine.MonoBehaviour is contained within is opened. Called before loading screen is hidden, if one is defined, or else just when collection has opened. IEnumerator OnCollectionOpen(SceneCollection collection)"
  },
  "api/AdvancedSceneManager.Callbacks.ISceneClose.html": {
    "href": "api/AdvancedSceneManager.Callbacks.ISceneClose.html",
    "title": "ISceneClose | Advanced Scene Manager",
    "keywords": "ISceneClose Callback for when the scene that a UnityEngine.MonoBehaviour is contained within is closed. Methods OnSceneClose() Callback for when the scene that a UnityEngine.MonoBehaviour is contained within is closed. IEnumerator OnSceneClose()"
  },
  "api/AdvancedSceneManager.Callbacks.ISceneManagerCallbackBase.html": {
    "href": "api/AdvancedSceneManager.Callbacks.ISceneManagerCallbackBase.html",
    "title": "ISceneManagerCallbackBase | Advanced Scene Manager",
    "keywords": "ISceneManagerCallbackBase Base interface for ISceneOpen , ISceneClose , ICollectionOpen , ICollectionClose . Does nothing on its own, used by CallbackUtility ."
  },
  "api/AdvancedSceneManager.Callbacks.ISceneOpen.html": {
    "href": "api/AdvancedSceneManager.Callbacks.ISceneOpen.html",
    "title": "ISceneOpen | Advanced Scene Manager",
    "keywords": "ISceneOpen Callback for when the scene that a UnityEngine.MonoBehaviour is contained within is opened. Methods OnSceneOpen() Callback for when the scene that a UnityEngine.MonoBehaviour is contained within is opened. IEnumerator OnSceneOpen()"
  },
  "api/AdvancedSceneManager.Callbacks.LoadingScreen.html": {
    "href": "api/AdvancedSceneManager.Callbacks.LoadingScreen.html",
    "title": "LoadingScreen | Advanced Scene Manager",
    "keywords": "LoadingScreen A class that contains callbacks for loading screens. One instance must exist in a scene that specified as a loading screen. Inheritance Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour LoadingScreen SplashScreen DefaultLoadingScreen IconBounceLoadingScreen PressAnyButtonLoadingScreen QuoteLoadingScreen VideoLoadingScreen Fields canvas The canvas that this loading screen uses. This will automatically register canvas with CanvasSortOrderUtility , to automatically manage canvas sort order. You probably want to set this through the inspector. [Tooltip(\"The canvas to automatically manage sort order for, optional.\")] public Canvas canvas onDestroy Occurs when loading screen is destroyed. public Action<LoadingScreen> onDestroy Properties operation The current scene operation that this loading screen is associated with. May be null for the first few frames, before loading has actually begun. public SceneOperation operation { get; } Methods OnCancel(SceneOperation) Called when the associated SceneOperation is cancelled. Note that OnClose(SceneOperation) is not called. public virtual void OnCancel(SceneOperation operation) OnClose(SceneOperation) Called when the associated SceneOperation has ended. Use this callback to hide your loading screen. public abstract IEnumerator OnClose(SceneOperation operation) OnDestroy() protected virtual void OnDestroy() OnOpen(SceneOperation) Called when the associated SceneOperation is about to start. Use this callback to show your loading screen, the scene manager will wait until its done. public abstract IEnumerator OnOpen(SceneOperation operation) OnScenePhaseChanged(SceneOperation, Phase, Phase) Called when the associated SceneOperation is moving to a different phase. public virtual void OnScenePhaseChanged(SceneOperation operation, Phase previousPhase, Phase nextPhase) Extension Methods SceneUtility.Scene(Component)"
  },
  "api/AdvancedSceneManager.Callbacks.ParallelASMCallbacks.html": {
    "href": "api/AdvancedSceneManager.Callbacks.ParallelASMCallbacks.html",
    "title": "ParallelASMCallbacks | Advanced Scene Manager",
    "keywords": "ParallelASMCallbacks Specifies whatever the ASM callbacks should be run in parallel for any callbacks defined in this script. Inheritance Object Attribute ParallelASMCallbacks"
  },
  "api/AdvancedSceneManager.Callbacks.Serializable-2.html": {
    "href": "api/AdvancedSceneManager.Callbacks.Serializable-2.html",
    "title": "Serializable<T, TValue> | Advanced Scene Manager",
    "keywords": "Serializable<T, TValue> Inheritance Object Serializable<T, TValue> SerializableDateTime SerializableTimeSpan Properties value public T value { get; set; } Methods Convert(T) public abstract TValue Convert(T value) ConvertBack(TValue) public abstract T ConvertBack(TValue value) OnAfterDeserialize() public void OnAfterDeserialize() OnBeforeSerialize() public void OnBeforeSerialize()"
  },
  "api/AdvancedSceneManager.Callbacks.SerializableDateTime.html": {
    "href": "api/AdvancedSceneManager.Callbacks.SerializableDateTime.html",
    "title": "SerializableDateTime | Advanced Scene Manager",
    "keywords": "SerializableDateTime Inheritance Object Serializable < DateTime , Int64 > SerializableDateTime Methods Convert(DateTime) public override long Convert(DateTime value) Overrides AdvancedSceneManager.Callbacks.Serializable<System.DateTime, System.Int64>.Convert(System.DateTime) ConvertBack(Int64) public override DateTime ConvertBack(long value) Overrides AdvancedSceneManager.Callbacks.Serializable<System.DateTime, System.Int64>.ConvertBack(System.Int64) ToString(String) public string ToString(string format) Operators Implicit(SerializableDateTime to DateTime) public static implicit operator DateTime(SerializableDateTime serializable) Implicit(DateTime to SerializableDateTime) public static implicit operator SerializableDateTime(DateTime time)"
  },
  "api/AdvancedSceneManager.Callbacks.SerializableTimeSpan.html": {
    "href": "api/AdvancedSceneManager.Callbacks.SerializableTimeSpan.html",
    "title": "SerializableTimeSpan | Advanced Scene Manager",
    "keywords": "SerializableTimeSpan Inheritance Object Serializable < TimeSpan , Int64 > SerializableTimeSpan Methods Convert(TimeSpan) public override long Convert(TimeSpan value) Overrides AdvancedSceneManager.Callbacks.Serializable<System.TimeSpan, System.Int64>.Convert(System.TimeSpan) ConvertBack(Int64) public override TimeSpan ConvertBack(long value) Overrides AdvancedSceneManager.Callbacks.Serializable<System.TimeSpan, System.Int64>.ConvertBack(System.Int64) ToString(String) public string ToString(string format) Operators Implicit(SerializableTimeSpan to TimeSpan) public static implicit operator TimeSpan(SerializableTimeSpan serializable) Implicit(TimeSpan to SerializableTimeSpan) public static implicit operator SerializableTimeSpan(TimeSpan time)"
  },
  "api/AdvancedSceneManager.Callbacks.SplashScreen.html": {
    "href": "api/AdvancedSceneManager.Callbacks.SplashScreen.html",
    "title": "SplashScreen | Advanced Scene Manager",
    "keywords": "SplashScreen A class that contains callbacks for splash screens. SplashScreen and LoadingScreen cannot coexist within the same scene. Inheritance Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour LoadingScreen SplashScreen DefaultSplashScreen Methods DisplaySplashScreen() Called when scene manager is ready to display the splash screen. Example: yielding new WaitForSeconds(5) will show the splash screen for 5 seconds. public abstract IEnumerator DisplaySplashScreen() OnClose(SceneOperation) public override IEnumerator OnClose(SceneOperation operation) Overrides LoadingScreen.OnClose(SceneOperation) OnOpen(SceneOperation) public override IEnumerator OnOpen(SceneOperation operation) Overrides LoadingScreen.OnOpen(SceneOperation) Extension Methods SceneUtility.Scene(Component)"
  },
  "api/AdvancedSceneManager.Core.Actions.AggregateAction.html": {
    "href": "api/AdvancedSceneManager.Core.Actions.AggregateAction.html",
    "title": "AggregateAction | Advanced Scene Manager",
    "keywords": "AggregateAction Runs one ore more actions. Inheritance Object SceneAction AggregateAction SceneCloseAction SceneOpenAction StartupAction Constructors AggregateAction(SceneAction[]) public AggregateAction(params SceneAction[] actions) AggregateAction(Action, SceneAction[]) public AggregateAction(Action onDone, params SceneAction[] actions) Properties actions public SceneAction[] actions { get; } reportsProgress public override bool reportsProgress { get; } Overrides SceneAction.reportsProgress Methods DoAction(SceneManagerBase) public override IEnumerator DoAction(SceneManagerBase _sceneManager) Overrides SceneAction.DoAction(SceneManagerBase) OnDone() protected virtual void OnDone()"
  },
  "api/AdvancedSceneManager.Core.Actions.CallbackAction.html": {
    "href": "api/AdvancedSceneManager.Core.Actions.CallbackAction.html",
    "title": "CallbackAction | Advanced Scene Manager",
    "keywords": "CallbackAction Runs a coroutine. Inheritance Object SceneAction CallbackAction Constructors CallbackAction(Action) public CallbackAction(Action action) CallbackAction(Func<IEnumerator>) public CallbackAction(Func<IEnumerator> callback) Properties reportsProgress public override bool reportsProgress { get; } Overrides SceneAction.reportsProgress Methods DoAction(SceneManagerBase) public override IEnumerator DoAction(SceneManagerBase _sceneManager) Overrides SceneAction.DoAction(SceneManagerBase) Operators Implicit(Action to CallbackAction) public static implicit operator CallbackAction(Action action) Implicit(Func<IEnumerator> to CallbackAction) public static implicit operator CallbackAction(Func<IEnumerator> callback)"
  },
  "api/AdvancedSceneManager.Core.Actions.CloseAllUnityScenesAction.html": {
    "href": "api/AdvancedSceneManager.Core.Actions.CloseAllUnityScenesAction.html",
    "title": "CloseAllUnityScenesAction | Advanced Scene Manager",
    "keywords": "CloseAllUnityScenesAction Closes all scenes, except DefaultSceneUtility , regardless of whatever they are tracked or not. This is used in StartupAction , where we cannot be sure scenes are tracked yet. Inheritance Object SceneAction CloseAllUnityScenesAction Constructors CloseAllUnityScenesAction() public CloseAllUnityScenesAction() CloseAllUnityScenesAction(Func<Scene>) public CloseAllUnityScenesAction(Func<Scene> ignore) Properties reportsProgress public override bool reportsProgress { get; } Overrides SceneAction.reportsProgress Methods DoAction(SceneManagerBase) public override IEnumerator DoAction(SceneManagerBase _sceneManager) Overrides SceneAction.DoAction(SceneManagerBase)"
  },
  "api/AdvancedSceneManager.Core.Actions.html": {
    "href": "api/AdvancedSceneManager.Core.Actions.html",
    "title": "AdvancedSceneManager.Core.Actions | Advanced Scene Manager",
    "keywords": "AdvancedSceneManager.Core.Actions Classes AggregateAction Runs one ore more actions. CallbackAction Runs a coroutine. CloseAllUnityScenesAction Closes all scenes, except DefaultSceneUtility , regardless of whatever they are tracked or not. This is used in StartupAction , where we cannot be sure scenes are tracked yet. OpenAndRunCallbackAction<T> Opens a scene and finds a script of the specified type, and runs a callback, scene is closed if not found. OpenStartupCollections Opens all collections and scenes that are set to open at startup. OverridableAction<T> An action that can have its functionality overriden, this is needed to provide addressables support. When overriding default ASM actions, use caution since this will obviously lead to undocumented behavior. PlaySplashScreenAction Plays splash screen. QuickStartupAction Performs startup sequence, but without splash screen and loading screens. CloseAllUnityScenesAction . OpenStartupCollections . QuitAction RunCallbackAndCloseAction<T> Runs a callback and closes the scene. SceneAction The base class of all scene actions. The scene actions perform an specific action on a Scene when contained within a SceneOperation . SceneCloseAction Closes a scene. This is a proxy for running the following actions in order: SceneCloseCallbackAction , call callbacks. SceneUnloadAction , unload scenes. SceneCloseCallbackAction Calls all OnSceneClose() callbacks in scene. SceneFinishLoadAction Finish load of a scene that was loaded, but not activated. See SceneLoadAction . SceneLoadAction Loads a scene, but does not activate it. This is the same as preloading. See SceneFinishLoadAction . SceneOpenAction Opens a scene. This is a proxy for running the following actions in order: SceneLoadAction , preload scene. SceneFinishLoadAction , activate scene. SceneOpenCallbackAction , call callbacks. SceneOpenCallbackAction Calls all OnSceneOpen() callbacks in scene. SceneUnloadAction Finish load of a scene that was loaded, but not activated. See SceneLoadAction . StartupAction Performs startup sequence, see Start(SceneCollection, Boolean, Boolean) : AdvancedSceneManager.Core.Actions.StartupAction.FadeOut(System.Single,System.Nullable{UnityEngine.Color}) . CloseAllUnityScenesAction . PlaySplashScreenAction (+ fade in). AdvancedSceneManager.Core.Actions.StartupAction.ShowStartupLoadingScreen . OpenStartupCollections . AdvancedSceneManager.Core.Actions.StartupAction.HideStartupLoadingScreen ."
  },
  "api/AdvancedSceneManager.Core.Actions.OpenAndRunCallbackAction-1.html": {
    "href": "api/AdvancedSceneManager.Core.Actions.OpenAndRunCallbackAction-1.html",
    "title": "OpenAndRunCallbackAction<T> | Advanced Scene Manager",
    "keywords": "OpenAndRunCallbackAction<T> Opens a scene and finds a script of the specified type, and runs a callback, scene is closed if not found. Inheritance Object SceneAction OpenAndRunCallbackAction<T> Constructors OpenAndRunCallbackAction(Scene, Func<T, IEnumerator>, Nullable<Single>, Boolean, Action) public OpenAndRunCallbackAction(Scene scene, Func<T, IEnumerator> runCallback, float? timeout = null, bool isLoadingScreen = false, Action onMissingCallback = null) Fields defaultTimeout public const float defaultTimeout = 1F Properties callback public T callback { get; } isLoadingScreen public bool isLoadingScreen { get; } onMissingCallback public Action onMissingCallback { get; } reportsProgress public override bool reportsProgress { get; } Overrides SceneAction.reportsProgress runCallback public Func<T, IEnumerator> runCallback { get; } Methods DoAction(SceneManagerBase) public override IEnumerator DoAction(SceneManagerBase _sceneManager) Overrides SceneAction.DoAction(SceneManagerBase)"
  },
  "api/AdvancedSceneManager.Core.Actions.OpenStartupCollections.html": {
    "href": "api/AdvancedSceneManager.Core.Actions.OpenStartupCollections.html",
    "title": "OpenStartupCollections | Advanced Scene Manager",
    "keywords": "OpenStartupCollections Opens all collections and scenes that are set to open at startup. Inheritance Object SceneAction OpenStartupCollections Constructors OpenStartupCollections(SceneCollection, Boolean) public OpenStartupCollections(SceneCollection collection = null, bool forceOpenAllScenes = false) Properties pointlessCollectionWarning Enables warnings during startup when a collection is opened, then immedietly closed, because another collection was opened, and did not contain any persistent scenes. public static bool pointlessCollectionWarning { get; set; } Remarks Only available in editor. reportsProgress public override bool reportsProgress { get; } Overrides SceneAction.reportsProgress Methods DoAction(SceneManagerBase) public override IEnumerator DoAction(SceneManagerBase _sceneManager) Overrides SceneAction.DoAction(SceneManagerBase)"
  },
  "api/AdvancedSceneManager.Core.Actions.OverridableAction-1.html": {
    "href": "api/AdvancedSceneManager.Core.Actions.OverridableAction-1.html",
    "title": "OverridableAction<T> | Advanced Scene Manager",
    "keywords": "OverridableAction<T> An action that can have its functionality overriden, this is needed to provide addressables support. When overriding default ASM actions, use caution since this will obviously lead to undocumented behavior. Inheritance Object SceneAction OverridableAction<T> SceneCloseCallbackAction SceneFinishLoadAction SceneLoadAction SceneOpenCallbackAction SceneUnloadAction Properties lazyScene protected Func<OpenSceneInfo> lazyScene { get; set; } overrides All overriden scenes. public static ReadOnlyDictionary<string, Func<SceneManagerBase, T, IEnumerator>> overrides { get; } Methods BeforeDoAction(out Boolean) protected virtual void BeforeDoAction(out bool exitOutEarly) ClearOverride(String) Clears overrides for the specified scene. public static void ClearOverride(string scene) ClearOverrides() Clears all overrides. public static void ClearOverrides() DoAction(SceneManagerBase) This must not be overriden since OverridableAction<T> does not work otherwise Override DoNonOverridenAction(SceneManagerBase) instead. public override IEnumerator DoAction(SceneManagerBase _sceneManager) Overrides SceneAction.DoAction(SceneManagerBase) DoNonOverridenAction(SceneManagerBase) public abstract IEnumerator DoNonOverridenAction(SceneManagerBase _sceneManager) Override(String, Func<SceneManagerBase, T, IEnumerator>) Overrides behavior for the specified scene. public static void Override(string scene, Func<SceneManagerBase, T, IEnumerator> coroutine) ToString() public override string ToString() Overrides SceneAction.ToString()"
  },
  "api/AdvancedSceneManager.Core.Actions.PlaySplashScreenAction.html": {
    "href": "api/AdvancedSceneManager.Core.Actions.PlaySplashScreenAction.html",
    "title": "PlaySplashScreenAction | Advanced Scene Manager",
    "keywords": "PlaySplashScreenAction Plays splash screen. Inheritance Object SceneAction PlaySplashScreenAction Constructors PlaySplashScreenAction(Func<IEnumerator>) public PlaySplashScreenAction(Func<IEnumerator> hideInitialLoadingScreen) Properties reportsProgress public override bool reportsProgress { get; } Overrides SceneAction.reportsProgress Methods DoAction(SceneManagerBase) public override IEnumerator DoAction(SceneManagerBase _sceneManager) Overrides SceneAction.DoAction(SceneManagerBase)"
  },
  "api/AdvancedSceneManager.Core.Actions.QuickStartupAction.html": {
    "href": "api/AdvancedSceneManager.Core.Actions.QuickStartupAction.html",
    "title": "QuickStartupAction | Advanced Scene Manager",
    "keywords": "QuickStartupAction Performs startup sequence, but without splash screen and loading screens. CloseAllUnityScenesAction . OpenStartupCollections . Inheritance Object SceneAction AggregateAction StartupAction QuickStartupAction Constructors QuickStartupAction() public QuickStartupAction()"
  },
  "api/AdvancedSceneManager.Core.Actions.QuitAction.html": {
    "href": "api/AdvancedSceneManager.Core.Actions.QuitAction.html",
    "title": "QuitAction | Advanced Scene Manager",
    "keywords": "QuitAction Inheritance Object SceneAction QuitAction Constructors QuitAction(Boolean, Nullable<Color>, Single, Boolean, Boolean) public QuitAction(bool fade, Color? fadeColor = null, float fadeDuration = 1F, bool callSceneCloseCallbacks = true, bool callCollectionCloseCallbacks = true) Properties isQuitting Gets whatever ASM is currently in the process of quitting. public static bool isQuitting { get; } reportsProgress public override bool reportsProgress { get; } Overrides SceneAction.reportsProgress Methods CancelQuit() Cancels a quit in progress. Only usable during a RegisterQuitCallback() or while isQuitting is true. public static void CancelQuit() DoAction(SceneManagerBase) public override IEnumerator DoAction(SceneManagerBase _sceneManager) Overrides SceneAction.DoAction(SceneManagerBase)"
  },
  "api/AdvancedSceneManager.Core.Actions.RunCallbackAndCloseAction-1.html": {
    "href": "api/AdvancedSceneManager.Core.Actions.RunCallbackAndCloseAction-1.html",
    "title": "RunCallbackAndCloseAction<T> | Advanced Scene Manager",
    "keywords": "RunCallbackAndCloseAction<T> Runs a callback and closes the scene. Inheritance Object SceneAction RunCallbackAndCloseAction<T> Constructors RunCallbackAndCloseAction(T, Func<T, IEnumerator>, Boolean, Boolean) public RunCallbackAndCloseAction(T callback, Func<T, IEnumerator> runCallback, bool closeScene = true, bool isLoadingScreen = false) Properties callback public T callback { get; } closeScene public bool closeScene { get; } isLoadingScreen public bool isLoadingScreen { get; } reportsProgress public override bool reportsProgress { get; } Overrides SceneAction.reportsProgress runCallback public Func<T, IEnumerator> runCallback { get; } Methods DoAction(SceneManagerBase) public override IEnumerator DoAction(SceneManagerBase _sceneManager) Overrides SceneAction.DoAction(SceneManagerBase)"
  },
  "api/AdvancedSceneManager.Core.Actions.SceneAction.html": {
    "href": "api/AdvancedSceneManager.Core.Actions.SceneAction.html",
    "title": "SceneAction | Advanced Scene Manager",
    "keywords": "SceneAction The base class of all scene actions. The scene actions perform an specific action on a Scene when contained within a SceneOperation . Inheritance Object SceneAction AggregateAction CallbackAction CloseAllUnityScenesAction OpenAndRunCallbackAction<T> OpenStartupCollections OverridableAction<T> PlaySplashScreenAction QuitAction RunCallbackAndCloseAction<T> Properties collection The collection that is being opened. null if stand-alone. public SceneCollection collection { get; protected set; } isDone Is this scene action done? public bool isDone { get; protected set; } openScene public OpenSceneInfo openScene { get; set; } progress The progress of this scene action. public float progress { get; } reportsProgress Gets whatever this action reports progress. public virtual bool reportsProgress { get; } scene The scene this SceneAction is performing its action on. public Scene scene { get; protected set; } Methods DoAction(SceneManagerBase) public abstract IEnumerator DoAction(SceneManagerBase _sceneManager) Done() protected virtual void Done() Done(OpenSceneInfo) protected virtual void Done(OpenSceneInfo openScene) OnProgress(Single) protected void OnProgress(float progress) OnProgressCallback(Action<Single>) public void OnProgressCallback(Action<float> callback) RegisterCallback(Action) Register a callback when scene action is done. public void RegisterCallback(Action action) ToString() public override string ToString() Overrides Object.ToString() UnregisterCallback(Action) Remove an registered callback when scene action is done. public void UnregisterCallback(Action action)"
  },
  "api/AdvancedSceneManager.Core.Actions.SceneCloseAction.html": {
    "href": "api/AdvancedSceneManager.Core.Actions.SceneCloseAction.html",
    "title": "SceneCloseAction | Advanced Scene Manager",
    "keywords": "SceneCloseAction Closes a scene. This is a proxy for running the following actions in order: SceneCloseCallbackAction , call callbacks. SceneUnloadAction , unload scenes. Inheritance Object SceneAction AggregateAction SceneCloseAction Constructors SceneCloseAction(OpenSceneInfo, SceneCollection) public SceneCloseAction(OpenSceneInfo scene, SceneCollection collection = null) Methods OnDone() protected override void OnDone() Overrides AggregateAction.OnDone()"
  },
  "api/AdvancedSceneManager.Core.Actions.SceneCloseCallbackAction.html": {
    "href": "api/AdvancedSceneManager.Core.Actions.SceneCloseCallbackAction.html",
    "title": "SceneCloseCallbackAction | Advanced Scene Manager",
    "keywords": "SceneCloseCallbackAction Calls all OnSceneClose() callbacks in scene. Inheritance Object SceneAction OverridableAction < SceneCloseCallbackAction > SceneCloseCallbackAction Constructors SceneCloseCallbackAction(OpenSceneInfo, SceneCollection) public SceneCloseCallbackAction(OpenSceneInfo scene, SceneCollection collection = null) SceneCloseCallbackAction(Func<OpenSceneInfo>, SceneCollection) public SceneCloseCallbackAction(Func<OpenSceneInfo> scene, SceneCollection collection = null) Methods BeforeDoAction(out Boolean) protected override void BeforeDoAction(out bool exitOutEarly) Overrides AdvancedSceneManager.Core.Actions.OverridableAction<AdvancedSceneManager.Core.Actions.SceneCloseCallbackAction>.BeforeDoAction(System.Boolean) DoNonOverridenAction(SceneManagerBase) public override IEnumerator DoNonOverridenAction(SceneManagerBase _sceneManager) Overrides AdvancedSceneManager.Core.Actions.OverridableAction<AdvancedSceneManager.Core.Actions.SceneCloseCallbackAction>.DoNonOverridenAction(AdvancedSceneManager.Core.SceneManagerBase)"
  },
  "api/AdvancedSceneManager.Core.Actions.SceneFinishLoadAction.html": {
    "href": "api/AdvancedSceneManager.Core.Actions.SceneFinishLoadAction.html",
    "title": "SceneFinishLoadAction | Advanced Scene Manager",
    "keywords": "SceneFinishLoadAction Finish load of a scene that was loaded, but not activated. See SceneLoadAction . Inheritance Object SceneAction OverridableAction < SceneFinishLoadAction > SceneFinishLoadAction Constructors SceneFinishLoadAction(OpenSceneInfo, SceneCollection) public SceneFinishLoadAction(OpenSceneInfo scene, SceneCollection collection = null) SceneFinishLoadAction(Func<OpenSceneInfo>, SceneCollection) public SceneFinishLoadAction(Func<OpenSceneInfo> scene, SceneCollection collection = null) Methods BeforeDoAction(out Boolean) protected override void BeforeDoAction(out bool exitOutEarly) Overrides AdvancedSceneManager.Core.Actions.OverridableAction<AdvancedSceneManager.Core.Actions.SceneFinishLoadAction>.BeforeDoAction(System.Boolean) DoNonOverridenAction(SceneManagerBase) public override IEnumerator DoNonOverridenAction(SceneManagerBase _sceneManager) Overrides AdvancedSceneManager.Core.Actions.OverridableAction<AdvancedSceneManager.Core.Actions.SceneFinishLoadAction>.DoNonOverridenAction(AdvancedSceneManager.Core.SceneManagerBase)"
  },
  "api/AdvancedSceneManager.Core.Actions.SceneLoadAction.html": {
    "href": "api/AdvancedSceneManager.Core.Actions.SceneLoadAction.html",
    "title": "SceneLoadAction | Advanced Scene Manager",
    "keywords": "SceneLoadAction Loads a scene, but does not activate it. This is the same as preloading. See SceneFinishLoadAction . Inheritance Object SceneAction OverridableAction < SceneLoadAction > SceneLoadAction Constructors SceneLoadAction(Scene, SceneCollection) public SceneLoadAction(Scene scene, SceneCollection collection = null) Methods AddScene(OpenSceneInfo, SceneManagerBase) public void AddScene(OpenSceneInfo scene, SceneManagerBase sceneManager) BeforeDoAction(out Boolean) protected override void BeforeDoAction(out bool exitOutEarly) Overrides AdvancedSceneManager.Core.Actions.OverridableAction<AdvancedSceneManager.Core.Actions.SceneLoadAction>.BeforeDoAction(System.Boolean) DoNonOverridenAction(SceneManagerBase) public override IEnumerator DoNonOverridenAction(SceneManagerBase _sceneManager) Overrides AdvancedSceneManager.Core.Actions.OverridableAction<AdvancedSceneManager.Core.Actions.SceneLoadAction>.DoNonOverridenAction(AdvancedSceneManager.Core.SceneManagerBase) GetOpenSceneInfo(SceneManagerBase, AsyncOperation) protected OpenSceneInfo GetOpenSceneInfo(SceneManagerBase _sceneManager, AsyncOperation asyncOperation) SetPersistentFlag(OpenSceneInfo) public void SetPersistentFlag(OpenSceneInfo scene)"
  },
  "api/AdvancedSceneManager.Core.Actions.SceneOpenAction.html": {
    "href": "api/AdvancedSceneManager.Core.Actions.SceneOpenAction.html",
    "title": "SceneOpenAction | Advanced Scene Manager",
    "keywords": "SceneOpenAction Opens a scene. This is a proxy for running the following actions in order: SceneLoadAction , preload scene. SceneFinishLoadAction , activate scene. SceneOpenCallbackAction , call callbacks. Inheritance Object SceneAction AggregateAction SceneOpenAction Constructors SceneOpenAction(Scene, SceneCollection) public SceneOpenAction(Scene scene, SceneCollection collection = null) Methods OnDone() protected override void OnDone() Overrides AggregateAction.OnDone()"
  },
  "api/AdvancedSceneManager.Core.Actions.SceneOpenCallbackAction.html": {
    "href": "api/AdvancedSceneManager.Core.Actions.SceneOpenCallbackAction.html",
    "title": "SceneOpenCallbackAction | Advanced Scene Manager",
    "keywords": "SceneOpenCallbackAction Calls all OnSceneOpen() callbacks in scene. Inheritance Object SceneAction OverridableAction < SceneOpenCallbackAction > SceneOpenCallbackAction Constructors SceneOpenCallbackAction(OpenSceneInfo, SceneCollection) public SceneOpenCallbackAction(OpenSceneInfo scene, SceneCollection collection = null) SceneOpenCallbackAction(Func<OpenSceneInfo>, SceneCollection) public SceneOpenCallbackAction(Func<OpenSceneInfo> scene, SceneCollection collection = null) Methods BeforeDoAction(out Boolean) protected override void BeforeDoAction(out bool exitOutEarly) Overrides AdvancedSceneManager.Core.Actions.OverridableAction<AdvancedSceneManager.Core.Actions.SceneOpenCallbackAction>.BeforeDoAction(System.Boolean) DoNonOverridenAction(SceneManagerBase) public override IEnumerator DoNonOverridenAction(SceneManagerBase _sceneManager) Overrides AdvancedSceneManager.Core.Actions.OverridableAction<AdvancedSceneManager.Core.Actions.SceneOpenCallbackAction>.DoNonOverridenAction(AdvancedSceneManager.Core.SceneManagerBase)"
  },
  "api/AdvancedSceneManager.Core.Actions.SceneUnloadAction.html": {
    "href": "api/AdvancedSceneManager.Core.Actions.SceneUnloadAction.html",
    "title": "SceneUnloadAction | Advanced Scene Manager",
    "keywords": "SceneUnloadAction Finish load of a scene that was loaded, but not activated. See SceneLoadAction . Inheritance Object SceneAction OverridableAction < SceneUnloadAction > SceneUnloadAction Constructors SceneUnloadAction(OpenSceneInfo, SceneCollection) public SceneUnloadAction(OpenSceneInfo scene, SceneCollection collection = null) SceneUnloadAction(Func<OpenSceneInfo>, SceneCollection) public SceneUnloadAction(Func<OpenSceneInfo> scene, SceneCollection collection = null) Methods BeforeDoAction(out Boolean) protected override void BeforeDoAction(out bool exitOutEarly) Overrides AdvancedSceneManager.Core.Actions.OverridableAction<AdvancedSceneManager.Core.Actions.SceneUnloadAction>.BeforeDoAction(System.Boolean) DoNonOverridenAction(SceneManagerBase) public override IEnumerator DoNonOverridenAction(SceneManagerBase _sceneManager) Overrides AdvancedSceneManager.Core.Actions.OverridableAction<AdvancedSceneManager.Core.Actions.SceneUnloadAction>.DoNonOverridenAction(AdvancedSceneManager.Core.SceneManagerBase) Remove(OpenSceneInfo, SceneManagerBase) public void Remove(OpenSceneInfo scene, SceneManagerBase sceneManager) UnsetPersistentFlag(OpenSceneInfo) public void UnsetPersistentFlag(OpenSceneInfo scene)"
  },
  "api/AdvancedSceneManager.Core.Actions.StartupAction.html": {
    "href": "api/AdvancedSceneManager.Core.Actions.StartupAction.html",
    "title": "StartupAction | Advanced Scene Manager",
    "keywords": "StartupAction Performs startup sequence, see Start(SceneCollection, Boolean, Boolean) : AdvancedSceneManager.Core.Actions.StartupAction.FadeOut(System.Single,System.Nullable{UnityEngine.Color}) . CloseAllUnityScenesAction . PlaySplashScreenAction (+ fade in). AdvancedSceneManager.Core.Actions.StartupAction.ShowStartupLoadingScreen . OpenStartupCollections . AdvancedSceneManager.Core.Actions.StartupAction.HideStartupLoadingScreen . Inheritance Object SceneAction AggregateAction StartupAction QuickStartupAction Constructors StartupAction(Boolean, Nullable<Color>, Single, Single, SceneCollection, Boolean) public StartupAction(bool skipSplashScreen = false, Color? fadeColor = null, float initialFadeDuration = 0F, float beforeSplashScreenFadeDuration = 0.5F, SceneCollection collection = null, bool forceOpenAllScenes = false)"
  },
  "api/AdvancedSceneManager.Core.AssetManagement.html": {
    "href": "api/AdvancedSceneManager.Core.AssetManagement.html",
    "title": "AssetManagement | Advanced Scene Manager",
    "keywords": "AssetManagement Manages assets related to ASM. Inheritance Object AssetManagement Properties allowAutoRefresh If false , then assets will not be refreshed, this will mean that no Scene ScriptableObject will be created when a SceneAsset added, and a Scene will also not be removed when its associated SceneAsset is removed. public bool allowAutoRefresh { get; set; } collections The collections in this project. public ReadOnlyCollection<SceneCollection> collections { get; } profiles The scenes in this project. public ReadOnlyCollection<Profile> profiles { get; } scenes The scenes in this project. public ReadOnlyCollection<Scene> scenes { get; } Methods Add(SceneAsset, Boolean) Adds the UnityEditor.SceneAsset to asm. Returns existing Scene if already exist. public Scene Add(SceneAsset asset, bool ignoreBlacklist = false) Remarks Returns null if scene has been added to Ignore(String) . Add<T>(T, Profile, Boolean, Boolean) Adds the asset. public void Add<T>(T obj, Profile profile = null, bool import = true, bool ignoreBlacklist = false) where T : ScriptableObject, ISceneObject AddCollectionToProfile(SceneCollection, Profile) Adds the collection to the profile. public void AddCollectionToProfile(SceneCollection collection, Profile profile) Remarks This removes collection from profile, if already associated with one. Clear() Clear assets. public void Clear() Create<T>(String, Profile, Action<T>, Boolean) Create and add an asset. public T Create<T>(string name, Profile profile = null, Action<T> initializeBeforeSave = null, bool ignoreBlacklist = false) where T : ScriptableObject, ISceneObject Create<T>(String, Action<T>, Boolean) public T Create<T>(string name, Action<T> initializeBeforeSave = null, bool ignoreBlacklist = false) where T : ScriptableObject, ISceneObject CreateProfile(String, Boolean) Create a new profile. public Profile CreateProfile(string name = null, bool promptBlacklist = true) CreateProfileAndAssign(Boolean) Creates a new profile and assigns it as active. public void CreateProfileAndAssign(bool promptBlacklist = true) DuplicateProfile() Duplicates the active profile. public Profile DuplicateProfile() DuplicateProfileAndAssign() Duplicates active profile and assigns it as active. public void DuplicateProfileAndAssign() FindAssetByID<T>(String) Find the T with the associated asset ID. public T FindAssetByID<T>(string assetID) where T : Object FindAssetByPath<T>(String) Find the T with the specified path. public T FindAssetByPath<T>(string path) where T : Object FindSceneByPath(String) Find the Scene with the associated path (this is the path to the UnityEditor.SceneAsset ). public Scene FindSceneByPath(string path) Ignore(String) Ignores the scene at the specified path. public void Ignore(string path) Remarks Only available in editor. IsIgnored(String) Gets if the scene should be ignored. public bool IsIgnored(string path) Remarks Only available in editor. Remove<T>(T) Removes the asset. public void Remove<T>(T obj) where T : ScriptableObject, ISceneObject Rename<T>(T, String) Renames the Scene or SceneCollection . public void Rename<T>(T obj, string newName) where T : ScriptableObject, ISceneObject Events AssetsChanged Called when assets changed. public event Action AssetsChanged AssetsCleared Called when assets are cleared, by either Clear() or from ui. public event Action AssetsCleared"
  },
  "api/AdvancedSceneManager.Core.Callback.html": {
    "href": "api/AdvancedSceneManager.Core.Callback.html",
    "title": "Callback | Advanced Scene Manager",
    "keywords": "Callback Represents a callback that can be run on Phase change, or right before loading screen hide (or when it would, if it was enabled). Inheritance Object Callback Properties action public Action action { get; } action2 public Action<SceneOperation> action2 { get; } coroutine public GlobalCoroutine coroutine { get; } enumerator public Func<IEnumerator> enumerator { get; } phase public Phase? phase { get; } scene public Scene scene { get; } when public Callback.When when { get; } Methods After(Phase) Runs a callback after the specified phase. public static Callback After(Phase phase) After(Phase, Scene) Runs a callback after the specified phase. public static Callback After(Phase phase, Scene on) AfterLoadingScreenOpen() Runs a callback after loading screen has opened. public static Callback AfterLoadingScreenOpen() Before(Phase) Runs a callback before the specified phase, when processing the specified scene. public static Callback Before(Phase phase) Remarks Phase will still have changed to the next though, but scene actions won't run until after callback. Before(Phase, Scene) Runs a callback before the specified phase, when processing the specified scene. public static Callback Before(Phase phase, Scene on) Remarks Phase will still have changed to the next though, but scene actions won't run until after callback. BeforeLoadingScreenClose() Runs a callback before loading screen closes. public static Callback BeforeLoadingScreenClose() Do(GlobalCoroutine) Performs the specified callback. public Callback Do(GlobalCoroutine coroutine) Do(Action) Performs the specified callback. public Callback Do(Action action) Do(Action<SceneOperation>) Performs the specified callback. public Callback Do(Action<SceneOperation> action) Do(Func<IEnumerator>) Performs the specified callback. public Callback Do(Func<IEnumerator> enumerator) Do(Single) Performs the specified callback. public Callback Do(float delay) Operators Implicit(GlobalCoroutine to Callback) public static implicit operator Callback(GlobalCoroutine coroutine) Implicit(Action to Callback) public static implicit operator Callback(Action action) Implicit(Action<SceneOperation> to Callback) public static implicit operator Callback(Action<SceneOperation> action) Implicit(Func<IEnumerator> to Callback) public static implicit operator Callback(Func<IEnumerator> enumerator)"
  },
  "api/AdvancedSceneManager.Core.Callback.When.html": {
    "href": "api/AdvancedSceneManager.Core.Callback.When.html",
    "title": "Callback.When | Advanced Scene Manager",
    "keywords": "Callback.When Fields Name Description After Before"
  },
  "api/AdvancedSceneManager.Core.CollectionManager.html": {
    "href": "api/AdvancedSceneManager.Core.CollectionManager.html",
    "title": "CollectionManager | Advanced Scene Manager",
    "keywords": "CollectionManager The manager for collection scenes. Inheritance Object UnityEngine.Object UnityEngine.ScriptableObject AdvancedSceneManager.Core.SceneManagerBase CollectionManager Remarks Usage: collection . Properties current The currently open collection. public SceneCollection current { get; } previous The previously open collection. public SceneCollection previous { get; } Methods CanOpen(Scene) Gets whatever the scene can be opened by the current collection. public override bool CanOpen(Scene scene) Overrides AdvancedSceneManager.Core.SceneManagerBase.CanOpen(AdvancedSceneManager.Models.Scene) Close() Closes the current collection. public SceneOperation Close() Close(OpenSceneInfo) Closes a scene. public override SceneOperation Close(OpenSceneInfo scene) Overrides AdvancedSceneManager.Core.SceneManagerBase.Close(AdvancedSceneManager.Core.OpenSceneInfo) Remarks Throws a CloseSceneException if the scene is not a part of the current collection. CloseMultiple(OpenSceneInfo[]) Closes the scenes. public override SceneOperation CloseMultiple(params OpenSceneInfo[] scenes) Overrides AdvancedSceneManager.Core.SceneManagerBase.CloseMultiple(AdvancedSceneManager.Core.OpenSceneInfo[]) Remarks Throws a CloseSceneException if a scene is not a part of the current collection. IsOpen(SceneCollection) Gets whatever the collection is currently open. public bool IsOpen(SceneCollection collection) OnAfterDeserialize2() public override void OnAfterDeserialize2() Overrides AdvancedSceneManager.Core.SceneManagerBase.OnAfterDeserialize2() Open(Scene) Opens a scene. public override SceneOperation<OpenSceneInfo> Open(Scene scene) Overrides AdvancedSceneManager.Core.SceneManagerBase.Open(AdvancedSceneManager.Models.Scene) Remarks Throws a OpenSceneException if the scene cannot be opened by the current collection. Open(SceneCollection, Boolean, Boolean) Opens the collection. public SceneOperation Open(SceneCollection collection, bool ignoreLoadingScreen = false, bool force = false) OpenMultiple(Scene[]) Opens the scenes. public override SceneOperation<OpenSceneInfo[]> OpenMultiple(params Scene[] scenes) Overrides AdvancedSceneManager.Core.SceneManagerBase.OpenMultiple(AdvancedSceneManager.Models.Scene[]) Remarks Throws a OpenSceneException if a scene cannot be opened by the current collection. Reopen(Boolean) Reopens the current collection. public SceneOperation Reopen(bool reopenPersistent = false) Toggle(SceneCollection, Nullable<Boolean>) Toggles the collection. public SceneOperation Toggle(SceneCollection collection, bool? enabled = null) Events closed Called when a collection is closed. public event Action<SceneCollection> closed opened Called when a collection is opened. public event Action<SceneCollection> opened Operators Implicit(CollectionManager to SceneCollection) public static implicit operator SceneCollection(CollectionManager manager) Implicit(CollectionManager to Boolean) public static implicit operator bool (CollectionManager manager) Extension Methods ScriptableObjectUtility.Save(ScriptableObject)"
  },
  "api/AdvancedSceneManager.Core.Editor.html": {
    "href": "api/AdvancedSceneManager.Core.Editor.html",
    "title": "Editor | Advanced Scene Manager",
    "keywords": "Editor A simplified scene manager for managing scenes in editor. Inheritance Object Editor Remarks Only available in editor. Methods CanClose(SceneCollection) public bool CanClose(SceneCollection collection) Close(Scene, Boolean) public void Close(Scene scene, bool promptSave = true) Close(SceneCollection, Boolean) public void Close(SceneCollection collection, bool promptSave = true) Close(Scene, Boolean) public void Close(Scene scene, bool promptSave = true) CloseAll(Boolean) public void CloseAll(bool promptSave = true) IsOpen(Scene) public bool IsOpen(Scene scene) IsOpen(SceneCollection) public bool IsOpen(SceneCollection collection) Open(Scene, Boolean) public Scene? Open(Scene scene, bool promptSave = true) Open(SceneCollection, Boolean, Boolean, Boolean) public void Open(SceneCollection collection, bool additive = false, bool promptSave = true, bool forceOpenAllScenes = false) OpenSingle(Scene, Boolean) public void OpenSingle(Scene scene, bool promptSave = true) OpenSingle(SceneAsset, Boolean) public void OpenSingle(SceneAsset scene, bool promptSave = true) Events scenesUpdated public event Action scenesUpdated"
  },
  "api/AdvancedSceneManager.Core.html": {
    "href": "api/AdvancedSceneManager.Core.html",
    "title": "AdvancedSceneManager.Core | Advanced Scene Manager",
    "keywords": "AdvancedSceneManager.Core Classes AssetManagement Manages assets related to ASM. Callback Represents a callback that can be run on Phase change, or right before loading screen hide (or when it would, if it was enabled). CollectionManager The manager for collection scenes. Editor A simplified scene manager for managing scenes in editor. OpenSceneInfo Runtime Manages the start and quit processes of the game. SceneOperation A scene operation is a queueable operation that can open or close scenes. See also: SceneAction . SceneOperation<ReturnValue> A scene operation is a queueable operation that can open or close scenes. See also: SceneAction . StandaloneManager The manager for stand-alone scenes. UtilitySceneManager An utility scene manager that helps with actions that might relate to either collection or standalone managers. Structs Runtime.StartProps Enums Callback.When Phase The phase that a SceneOperation is currently in. Delegates UtilitySceneManager.ActiveSceneChangedHandler"
  },
  "api/AdvancedSceneManager.Core.OpenSceneInfo.html": {
    "href": "api/AdvancedSceneManager.Core.OpenSceneInfo.html",
    "title": "OpenSceneInfo | Advanced Scene Manager",
    "keywords": "OpenSceneInfo Inheritance Object OpenSceneInfo Properties isActive Gets whatever this scene is the active scene. public bool isActive { get; } isCollection Gets whatever this scene is a collection scene. public bool isCollection { get; } isOpen Gets whatever this scene is currently open. public bool isOpen { get; } isPersistent Gets whatever this scene is persistent. See PersistentUtility for more details. public bool isPersistent { get; } isPreloaded Gets whatever this scene is preloaded. public bool isPreloaded { get; } isSpecial Gets whatever this scene is a special scene, i.e. splash screen / loading screen. public bool isSpecial { get; } isStandalone Gets whatever this scene is a collection scene. public bool isStandalone { get; } scene The Scene that this OpenSceneInfo is associated with. public Scene scene { get; } sceneManager The scene manager associated with this OpenSceneInfo . public SceneManagerBase sceneManager { get; } unityScene The UnityEngine.SceneManagement.Scene that this OpenSceneInfo is associated with. public Scene? unityScene { get; } Methods Equals(OpenSceneInfo) public bool Equals(OpenSceneInfo osi) Equals(Scene) public bool Equals(Scene scene) Equals(Nullable<Scene>) public bool Equals(Scene? scene) Equals(Object) public override bool Equals(object other) Overrides Object.Equals(Object) Equals(SceneAsset) public bool Equals(SceneAsset asset) Equals(Scene) public bool Equals(Scene scene) GetHashCode() public override int GetHashCode() Overrides Object.GetHashCode() ToString() public override string ToString() Overrides Object.ToString()"
  },
  "api/AdvancedSceneManager.Core.Phase.html": {
    "href": "api/AdvancedSceneManager.Core.Phase.html",
    "title": "Phase | Advanced Scene Manager",
    "keywords": "Phase The phase that a SceneOperation is currently in. Fields Name Description CloseCallbacks The scene operation is currently executing close callbacks on the scenes that are being closed, if any. CustomActions The scene operation is currently executing custom actions, added through WithAction(SceneAction[]) or similar methods, if any. FinishLoad The scene operation is currently finishing loading / activating the scenes, if any. LoadScenes The scene operation is currently loading the scenes, if any. OpenCallbacks The scene operation is currently executing open callbacks on the scenes that are being opened, if any. UnloadScenes The scene operation is currently unloading the scenes, if any."
  },
  "api/AdvancedSceneManager.Core.Runtime.html": {
    "href": "api/AdvancedSceneManager.Core.Runtime.html",
    "title": "Runtime | Advanced Scene Manager",
    "keywords": "Runtime Manages the start and quit processes of the game. Inheritance Object Runtime Properties isBuildMode Gets whatever we're currently in build mode. public bool isBuildMode { get; } Remarks This is true when in build or when play button in scene manager window is pressed. isInitialized Gets whatever ASM is done with startup process. public bool isInitialized { get; } isQuitting Gets whatever ASM is currently in the process of quitting. public bool isQuitting { get; } wasStartedAsBuild Gets if game was started as a build. public bool wasStartedAsBuild { get; } Methods CancelQuit() Cancels a quit in progress. Only usable during a RegisterQuitCallback() or while isQuitting is true. public void CancelQuit() Quit(Boolean, Nullable<Color>, Single) Quits the game, and calls quitCallbacks, optionally with a fade animation. public void Quit(bool fade = true, Color? fadeColor = null, float fadeDuration = 1F) RegisterQuitCallback(IEnumerator) Register a callback to be called before quit. public void RegisterQuitCallback(IEnumerator courutine) Restart(Boolean) Restarts game and plays startup sequence again. public void Restart(bool playSplashScreen = false) Remarks Enters playmode if in editor. Start(SceneCollection, Boolean, Boolean) Starts startup sequence. public void Start(SceneCollection collection = null, bool ignoreDoNotOpen = false, bool playSplashScreen = true) Remarks Enters playmode if in editor. UnregisterQuitCallback(IEnumerator) Unregister a callback that was to be called before quit. public void UnregisterQuitCallback(IEnumerator courutine) Events afterStart Occurs after startup process is done, or when Restart(Boolean) is called. public event Action afterStart beforeStart Occurs before startup process is started, or when Restart(Boolean) is called. public event Action beforeStart"
  },
  "api/AdvancedSceneManager.Core.Runtime.StartProps.html": {
    "href": "api/AdvancedSceneManager.Core.Runtime.StartProps.html",
    "title": "Runtime.StartProps | Advanced Scene Manager",
    "keywords": "Runtime.StartProps Fields beforeSplashScreenFadeDuration public float beforeSplashScreenFadeDuration fadeColor public Color fadeColor ignoreDoNotOpen public bool ignoreDoNotOpen initialFadeDuration public float initialFadeDuration skipSplashScreen public bool skipSplashScreen Properties overrideOpenCollection public SceneCollection overrideOpenCollection { get; set; } Methods GetDefault() Gets the default Runtime.StartProps . public static Runtime.StartProps GetDefault() Remarks Cannot be called during UnityEngine.Object constructor."
  },
  "api/AdvancedSceneManager.Core.SceneOperation.html": {
    "href": "api/AdvancedSceneManager.Core.SceneOperation.html",
    "title": "SceneOperation | Advanced Scene Manager",
    "keywords": "SceneOperation A scene operation is a queueable operation that can open or close scenes. See also: SceneAction . Inheritance Object UnityEngine.CustomYieldInstruction SceneOperation SceneOperation <ReturnValue> Implements IQueueable Remarks See also: SceneOperation<ReturnValue> . Fields _extCallbacks protected static readonly List<Callback> _extCallbacks isDone protected bool isDone Properties actions public ReadOnlyCollection<SceneAction> actions { get; } callbacks public ReadOnlyCollection<Callback> callbacks { get; } cancelled Gets if this scene operation is cancelled. public bool cancelled { get; } clearUnusedAssets public bool? clearUnusedAssets { get; } close public ReadOnlyCollection<(OpenSceneInfo scene, bool force)> close { get; } closeBehavior public SceneCloseBehavior? closeBehavior { get; } collection public SceneCollection collection { get; } current The current action that is executing. public SceneAction current { get; } customActions public ReadOnlyCollection<SceneAction> customActions { get; } doCollectionCallbacks public bool doCollectionCallbacks { get; } done Gets a SceneOperation that has already completed. public static SceneOperation done { get; } friendlyText public string friendlyText { get; protected set; } keepWaiting Inherited from UnityEngine.CustomYieldInstruction . Tells unity whatever the operation is done or not. public override bool keepWaiting { get; } Overrides UnityEngine.CustomYieldInstruction.keepWaiting loadingPriority public ThreadPriority? loadingPriority { get; } loadingScreen public Scene loadingScreen { get; } loadingScreenCallback public Action<LoadingScreen> loadingScreenCallback { get; } open public ReadOnlyCollection<(Scene scene, bool force)> open { get; } openedLoadingScreen Gets the loading screen that was opened. public SceneOperation<LoadingScreen> openedLoadingScreen { get; } openedScenes Gets the scenes that was opened in this operation. public IEnumerable<OpenSceneInfo> openedScenes { get; } phase The phase the this scene operation is currently in. public Phase phase { get; } reopen public ReadOnlyCollection<OpenSceneInfo> reopen { get; } sceneManager The scene manager that requested this scene operation. public SceneManagerBase sceneManager { get; } totalProgress The total progress made by this operation. public float totalProgress { get; } useLoadingScreen public bool useLoadingScreen { get; } Methods Add(SceneManagerBase, Boolean) Adds a new scene operation to the queue. public static SceneOperation Add(SceneManagerBase sceneManager, bool ignoreQueue = false) Add<ReturnValue>(SceneManagerBase, Boolean) Adds a new scene operation to the queue. public static SceneOperation<ReturnValue> Add<ReturnValue>(SceneManagerBase sceneManager, bool ignoreQueue = false) Add<ReturnValue>(SceneManagerBase, Func<SceneOperation, ReturnValue>, Boolean) Adds a new scene operation to the queue. public static SceneOperation<ReturnValue> Add<ReturnValue>(SceneManagerBase sceneManager, Func<SceneOperation, ReturnValue> return, bool ignoreQueue = false) AddCallback(Callback) Adds the callback to every scene operation. public static void AddCallback(Callback callback) AsPersistent(SceneCloseBehavior) public SceneOperation AsPersistent(SceneCloseBehavior closeBehavior) Cancel(Action) Cancel this operation. Note that the operation might not be cancelled immediately, if user defined callbacks are currently running (WithAction(), WithCallback()) they will run to completion before operation is cancelled. 'cancelled' property can be used in callbacks to check whatever a operation is cancelled. public void Cancel(Action callbackWhenFullyCancelled = null) Close(OpenSceneInfo[]) public SceneOperation Close(params OpenSceneInfo[] scenes) Close(Boolean, OpenSceneInfo[]) public SceneOperation Close(bool force, params OpenSceneInfo[] scenes) Close(IEnumerable<OpenSceneInfo>, Boolean) public SceneOperation Close(IEnumerable<OpenSceneInfo> scenes, bool force = true) FindActions<T>() Finds the actions of a specified type that was used in this operation. public IEnumerable<SceneAction> FindActions<T>() where T : SceneAction FindLastAction<T>() Finds the last action of a specified type that was used in this operation. public SceneAction FindLastAction<T>() where T : SceneAction Open(Scene[]) public SceneOperation Open(params Scene[] scene) Open(IEnumerable<Scene>, Boolean) public SceneOperation Open(IEnumerable<Scene> scene, bool force = true) RemoveCallback(Callback) Removes a callback that was added to every scene operation. public static void RemoveCallback(Callback callback) Reopen(OpenSceneInfo[]) public SceneOperation Reopen(params OpenSceneInfo[] scene) Reopen(Scene[]) public SceneOperation Reopen(params Scene[] scene) Reopen(IEnumerable<OpenSceneInfo>) public SceneOperation Reopen(IEnumerable<OpenSceneInfo> scene) Reopen(IEnumerable<Scene>) public SceneOperation Reopen(IEnumerable<Scene> scene) WithAction(SceneAction[]) public SceneOperation WithAction(params SceneAction[] actions) WithCallback(Callback) public SceneOperation WithCallback(Callback actions) WithClearUnusedAssets(Boolean) public SceneOperation WithClearUnusedAssets(bool enable = true) WithCollection(SceneCollection, Boolean) public SceneOperation WithCollection(SceneCollection collection, bool withCallbacks = true) WithFriendlyText(String) public SceneOperation WithFriendlyText(string text) WithLoadingPriority(ThreadPriority) public SceneOperation WithLoadingPriority(ThreadPriority priority) WithLoadingScreen(Scene) public SceneOperation WithLoadingScreen(Scene scene) WithLoadingScreen(Boolean) public SceneOperation WithLoadingScreen(bool use) WithLoadingScreenCallback(Action<LoadingScreen>) public SceneOperation WithLoadingScreenCallback(Action<LoadingScreen> callback) Explicit Interface Implementations IQueueable.OnCancel() void IQueueable.OnCancel() IQueueable.OnTurn(Action) void IQueueable.OnTurn(Action onComplete) Implements IQueueable"
  },
  "api/AdvancedSceneManager.Core.SceneOperation-1.html": {
    "href": "api/AdvancedSceneManager.Core.SceneOperation-1.html",
    "title": "SceneOperation<ReturnValue> | Advanced Scene Manager",
    "keywords": "SceneOperation<ReturnValue> A scene operation is a queueable operation that can open or close scenes. See also: SceneAction . Inheritance Object UnityEngine.CustomYieldInstruction SceneOperation SceneOperation<ReturnValue> Implements IQueueable Remarks See also: SceneOperation . Properties done Gets a SceneOperation that has already completed. public static SceneOperation<ReturnValue> done { get; } value The return value of this SceneOperation<ReturnValue> . public ReturnValue value { get; } Methods AsPersistent(SceneCloseBehavior) public SceneOperation<ReturnValue> AsPersistent(SceneCloseBehavior closeBehavior = SceneCloseBehavior.KeepOpenAlways) Close(OpenSceneInfo[]) public SceneOperation<ReturnValue> Close(params OpenSceneInfo[] scenes) Close(Boolean, OpenSceneInfo[]) public SceneOperation<ReturnValue> Close(bool force, params OpenSceneInfo[] scenes) Close(IEnumerable<OpenSceneInfo>, Boolean) public SceneOperation<ReturnValue> Close(IEnumerable<OpenSceneInfo> scenes, bool force = true) Open(Scene[]) public SceneOperation<ReturnValue> Open(params Scene[] scene) Open(IEnumerable<Scene>, Boolean) public SceneOperation<ReturnValue> Open(IEnumerable<Scene> scene, bool force = true) Reopen(OpenSceneInfo[]) public SceneOperation<ReturnValue> Reopen(params OpenSceneInfo[] scene) Reopen(Scene[]) public SceneOperation<ReturnValue> Reopen(params Scene[] scene) Reopen(IEnumerable<OpenSceneInfo>) public SceneOperation<ReturnValue> Reopen(IEnumerable<OpenSceneInfo> scene) Reopen(IEnumerable<Scene>) public SceneOperation<ReturnValue> Reopen(IEnumerable<Scene> scene) Return(Func<SceneOperation<ReturnValue>, ReturnValue>) Callback that is called when SceneOperation is done, that is meant to retrieve the return value of this operation. public SceneOperation<ReturnValue> Return(Func<SceneOperation<ReturnValue>, ReturnValue> action) WithAction(SceneAction[]) public SceneOperation<ReturnValue> WithAction(params SceneAction[] actions) WithCallback(Callback) public SceneOperation<ReturnValue> WithCallback(Callback actions) WithClearUnusedAssets(Boolean) public SceneOperation<ReturnValue> WithClearUnusedAssets(bool enable = true) WithCollection(SceneCollection, Boolean) public SceneOperation<ReturnValue> WithCollection(SceneCollection collection, bool withCallbacks = true) WithFriendlyText(String) public SceneOperation<ReturnValue> WithFriendlyText(string text) WithLoadingPriority(ThreadPriority) public SceneOperation<ReturnValue> WithLoadingPriority(ThreadPriority priority) WithLoadingScreen(Scene) public SceneOperation<ReturnValue> WithLoadingScreen(Scene scene) WithLoadingScreen(Boolean) public SceneOperation<ReturnValue> WithLoadingScreen(bool use) WithLoadingScreenCallback(Action<LoadingScreen>) public SceneOperation<ReturnValue> WithLoadingScreenCallback(Action<LoadingScreen> callback) Implements IQueueable"
  },
  "api/AdvancedSceneManager.Core.StandaloneManager.html": {
    "href": "api/AdvancedSceneManager.Core.StandaloneManager.html",
    "title": "StandaloneManager | Advanced Scene Manager",
    "keywords": "StandaloneManager The manager for stand-alone scenes. Inheritance Object UnityEngine.Object UnityEngine.ScriptableObject AdvancedSceneManager.Core.SceneManagerBase StandaloneManager Remarks Usage: standalone . Properties preloadedScene public PreloadedSceneHelper preloadedScene { get; } Methods OpenSingle(Scene) Close existing scenes and open the specified one. public SceneOperation<OpenSceneInfo> OpenSingle(Scene scene) Remarks This will close the current collection. Preload(Scene, Boolean) Preloads the scene. public SceneOperation<PreloadedSceneHelper> Preload(Scene scene, bool doCallbacks = false) Remarks Use FinishLoading() or AdvancedSceneManager.Core.SceneManagerBase.Open(AdvancedSceneManager.Models.Scene) to finish loading scene. Extension Methods ScriptableObjectUtility.Save(ScriptableObject)"
  },
  "api/AdvancedSceneManager.Core.UtilitySceneManager.ActiveSceneChangedHandler.html": {
    "href": "api/AdvancedSceneManager.Core.UtilitySceneManager.ActiveSceneChangedHandler.html",
    "title": "UtilitySceneManager.ActiveSceneChangedHandler | Advanced Scene Manager",
    "keywords": "UtilitySceneManager.ActiveSceneChangedHandler"
  },
  "api/AdvancedSceneManager.Core.UtilitySceneManager.html": {
    "href": "api/AdvancedSceneManager.Core.UtilitySceneManager.html",
    "title": "UtilitySceneManager | Advanced Scene Manager",
    "keywords": "UtilitySceneManager An utility scene manager that helps with actions that might relate to either collection or standalone managers. Inheritance Object UtilitySceneManager Remarks Usage: utility . Properties activeScene Gets the currently open scene. public OpenSceneInfo activeScene { get; } currentOperation Gets the current active operation in the queue. public SceneOperation currentOperation { get; } dontDestroyOnLoad Represents 'DontDestroyOnLoad' scene. public OpenSceneInfo dontDestroyOnLoad { get; } isBusy public bool isBusy { get; } openScenes Gets all currently open scenes. public IEnumerable<OpenSceneInfo> openScenes { get; } queuedOperations Gets the current scene operation queue. public IEnumerable<SceneOperation> queuedOperations { get; } runningOperations The currently running scene operations. public IEnumerable<SceneOperation> runningOperations { get; } Methods Close(OpenSceneInfo) Closes a scene regardless of whatever it is associated with a collection, or is was opened as stand-alone. public SceneOperation Close(OpenSceneInfo scene) CloseAll(Boolean) Closes all scenes. public SceneOperation CloseAll(bool closeLoadingScreens = false) DoSceneCallback<T>(Func<T, IEnumerator>) Performs a callback on the scripts on all open scenes. public IEnumerator DoSceneCallback<T>(Func<T, IEnumerator> action) FindOpenScene(Scene) Finds the first open instance of this Scene , if it is open. public OpenSceneInfo FindOpenScene(Scene scene) FindOpenScene(Scene) Finds the OpenSceneInfo of this UnityEngine.SceneManagement.Scene . public OpenSceneInfo FindOpenScene(Scene scene) FindPreloadedScene(Scene) Find first preloaded instance this scene. public OpenSceneInfo FindPreloadedScene(Scene scene) FindPreloadedScene(Scene) Find first preloaded instance this scene. public OpenSceneInfo FindPreloadedScene(Scene scene) FindPreloadedScenes() Finds all current preloaded scenes. public IEnumerable<(OpenSceneInfo scene, SceneManagerBase sceneManager)> FindPreloadedScenes() IsOpen(Scene) Gets whatever the scene is open, either as part of a collection, or as stand-alone. public IsOpenReturnValue IsOpen(Scene scene) IsOpen(Scene) Gets whatever the scene is open, either as part of a collection, or as stand-alone. public IsOpenReturnValue IsOpen(Scene scene) OpenOrReopen(Scene, SceneCollection) Opens the scene if not open, otherwise it will be reopened. public SceneOperation<OpenSceneInfo> OpenOrReopen(Scene scene, SceneCollection collection = null) RegisterOpenCallback<T>(T, Action, Action, Boolean) Registers a callback for when a scene or collection has opened, or closed, the callback is removed once it has been called, unless persistent is true. public void RegisterOpenCallback<T>(T scene, Action onOpen = null, Action onClose = null, bool persistent = false) where T : Object, ISceneObject Reopen(OpenSceneInfo) Reopen a scene regardless of whatever it is associated with a collection, or is was opened as stand-alone. public SceneOperation<OpenSceneInfo> Reopen(OpenSceneInfo scene) SetActive(Scene) Sets a scene as the activate scene. public void SetActive(Scene scene) SetActive(Scene) Sets a scene as the activate scene. public void SetActive(Scene scene) Toggle(Scene, Nullable<Boolean>) Toggles the scene open or closed, if the scene is part of the current collection, then the scene will be toggled within the collection, otherwise, it will be toggled as a stand-alone scene. public SceneOperation Toggle(Scene scene, bool? enabled = null) Toggle(Scene, Nullable<Boolean>) Toggles the scene open or closed, if the scene is part of the current collection, then the scene will be toggled within the collection, otherwise, it will be toggled as a stand-alone scene. public SceneOperation Toggle(Scene scene, bool? enabled = null) UnregisterCallback<T>(T, Action, Action) Unregisters a callback. public void UnregisterCallback<T>(T scene, Action onOpen = null, Action onClose = null) where T : Object, ISceneObject Events ActiveSceneChanged Occurs when the active scene changes. public event UtilitySceneManager.ActiveSceneChangedHandler ActiveSceneChanged LoadingScreenClosed Occurs when a loading screen has closed. public event Action<LoadingScreen> LoadingScreenClosed LoadingScreenClosing Occurs when a loading screen is about to close. public event Action<LoadingScreen> LoadingScreenClosing LoadingScreenOpened Occurs when a loading screen has opened. public event Action<LoadingScreen> LoadingScreenOpened LoadingScreenOpening Occurs when a loading screen is about to be opened. public event Action<LoadingScreen> LoadingScreenOpening queueEmpty public event Action queueEmpty SceneClosed Occurs when a scene is closed. public event Action<OpenSceneInfo, SceneManagerBase> SceneClosed SceneOpened Occurs when a scene is opened. public event Action<OpenSceneInfo, SceneManagerBase> SceneOpened"
  },
  "api/AdvancedSceneManager.Defaults.DefaultLoadingScreen.html": {
    "href": "api/AdvancedSceneManager.Defaults.DefaultLoadingScreen.html",
    "title": "DefaultLoadingScreen | Advanced Scene Manager",
    "keywords": "DefaultLoadingScreen A default loading screen script. Fades the screen out and in. Provides progress if slider is set. Inheritance Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour LoadingScreen DefaultLoadingScreen Fields color public Color color duration public float duration group public CanvasGroup group image public Image image slider public Slider slider Methods OnClose(SceneOperation) public override IEnumerator OnClose(SceneOperation operation) Overrides LoadingScreen.OnClose(SceneOperation) OnOpen(SceneOperation) public override IEnumerator OnOpen(SceneOperation operation) Overrides LoadingScreen.OnOpen(SceneOperation) Extension Methods SceneUtility.Scene(Component)"
  },
  "api/AdvancedSceneManager.Defaults.DefaultSplashScreen.html": {
    "href": "api/AdvancedSceneManager.Defaults.DefaultSplashScreen.html",
    "title": "DefaultSplashScreen | Advanced Scene Manager",
    "keywords": "DefaultSplashScreen A default splash screen script. Fades splash screen in and out. Inheritance Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour LoadingScreen SplashScreen DefaultSplashScreen Fields fadeDuration public float fadeDuration group public CanvasGroup group image public Image image waitDuration public float waitDuration Methods DisplaySplashScreen() public override IEnumerator DisplaySplashScreen() Overrides SplashScreen.DisplaySplashScreen() Extension Methods SceneUtility.Scene(Component)"
  },
  "api/AdvancedSceneManager.Defaults.html": {
    "href": "api/AdvancedSceneManager.Defaults.html",
    "title": "AdvancedSceneManager.Defaults | Advanced Scene Manager",
    "keywords": "AdvancedSceneManager.Defaults Classes DefaultLoadingScreen A default loading screen script. Fades the screen out and in. Provides progress if slider is set. DefaultSplashScreen A default splash screen script. Fades splash screen in and out. IconBounceLoadingScreen A default loading screen script. Displays progress with a bouncing icon. PressAnyButtonLoadingScreen A default loading screen script. Requires the user to press any key before loading screen closes. QuoteLoadingScreen A default loading screen script. Displays quotes. Quotes A list of quotes for QuoteLoadingScreen . Quotes.Quote A quote. VideoLoadingScreen A default loading screen script. Displays a video."
  },
  "api/AdvancedSceneManager.Defaults.IconBounceLoadingScreen.html": {
    "href": "api/AdvancedSceneManager.Defaults.IconBounceLoadingScreen.html",
    "title": "IconBounceLoadingScreen | Advanced Scene Manager",
    "keywords": "IconBounceLoadingScreen A default loading screen script. Displays progress with a bouncing icon. Inheritance Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour LoadingScreen IconBounceLoadingScreen Fields BackgroundTransform public RectTransform BackgroundTransform duration public float duration IconStartRotationZ public float IconStartRotationZ IconStartSize public Vector2 IconStartSize IconTransform public RectTransform IconTransform Methods OnClose(SceneOperation) public override IEnumerator OnClose(SceneOperation operation) Overrides LoadingScreen.OnClose(SceneOperation) OnOpen(SceneOperation) public override IEnumerator OnOpen(SceneOperation operation) Overrides LoadingScreen.OnOpen(SceneOperation) Extension Methods SceneUtility.Scene(Component)"
  },
  "api/AdvancedSceneManager.Defaults.PressAnyButtonLoadingScreen.html": {
    "href": "api/AdvancedSceneManager.Defaults.PressAnyButtonLoadingScreen.html",
    "title": "PressAnyButtonLoadingScreen | Advanced Scene Manager",
    "keywords": "PressAnyButtonLoadingScreen A default loading screen script. Requires the user to press any key before loading screen closes. Inheritance Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour LoadingScreen PressAnyButtonLoadingScreen Methods OnClose(SceneOperation) public override IEnumerator OnClose(SceneOperation operation) Overrides LoadingScreen.OnClose(SceneOperation) OnOpen(SceneOperation) public override IEnumerator OnOpen(SceneOperation operation) Overrides LoadingScreen.OnOpen(SceneOperation) Extension Methods SceneUtility.Scene(Component)"
  },
  "api/AdvancedSceneManager.Defaults.QuoteLoadingScreen.html": {
    "href": "api/AdvancedSceneManager.Defaults.QuoteLoadingScreen.html",
    "title": "QuoteLoadingScreen | Advanced Scene Manager",
    "keywords": "QuoteLoadingScreen A default loading screen script. Displays quotes. Inheritance Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour LoadingScreen QuoteLoadingScreen Fields Background public Image Background fade public Image fade fadeDuration public float fadeDuration Name public Text Name Quote public Text Quote quotes public Quotes quotes Methods OnClose(SceneOperation) public override IEnumerator OnClose(SceneOperation operation) Overrides LoadingScreen.OnClose(SceneOperation) OnOpen(SceneOperation) public override IEnumerator OnOpen(SceneOperation operation) Overrides LoadingScreen.OnOpen(SceneOperation) Extension Methods SceneUtility.Scene(Component)"
  },
  "api/AdvancedSceneManager.Defaults.Quotes.html": {
    "href": "api/AdvancedSceneManager.Defaults.Quotes.html",
    "title": "Quotes | Advanced Scene Manager",
    "keywords": "Quotes A list of quotes for QuoteLoadingScreen . Inheritance Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour Quotes Fields quoteList The list of quotes. public List<Quotes.Quote> quoteList Extension Methods SceneUtility.Scene(Component)"
  },
  "api/AdvancedSceneManager.Defaults.Quotes.Quote.html": {
    "href": "api/AdvancedSceneManager.Defaults.Quotes.Quote.html",
    "title": "Quotes.Quote | Advanced Scene Manager",
    "keywords": "Quotes.Quote A quote. Inheritance Object Quotes.Quote Fields name The name of this quote. public string name quote The quote text itself. public string quote"
  },
  "api/AdvancedSceneManager.Defaults.VideoLoadingScreen.html": {
    "href": "api/AdvancedSceneManager.Defaults.VideoLoadingScreen.html",
    "title": "VideoLoadingScreen | Advanced Scene Manager",
    "keywords": "VideoLoadingScreen A default loading screen script. Displays a video. Inheritance Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour LoadingScreen VideoLoadingScreen Fields defaultVideoClip public VideoClip defaultVideoClip fadeDuration public float fadeDuration group public CanvasGroup group videoClip public static VideoClip videoClip videoPlayer [Header(\"VideoClip is static, Apply it before loading\")] public VideoPlayer videoPlayer VideoRenderer public RawImage VideoRenderer Methods OnClose(SceneOperation) public override IEnumerator OnClose(SceneOperation operation) Overrides LoadingScreen.OnClose(SceneOperation) OnOpen(SceneOperation) public override IEnumerator OnOpen(SceneOperation operation) Overrides LoadingScreen.OnOpen(SceneOperation) Extension Methods SceneUtility.Scene(Component)"
  },
  "api/AdvancedSceneManager.Editor.EditCollectionPopup.html": {
    "href": "api/AdvancedSceneManager.Editor.EditCollectionPopup.html",
    "title": "EditCollectionPopup | Advanced Scene Manager",
    "keywords": "EditCollectionPopup Inheritance Object Popup Popup < EditCollectionPopup > EditCollectionPopup Properties path public override string path { get; } Overrides AdvancedSceneManager.Editor.Popup<AdvancedSceneManager.Editor.EditCollectionPopup>.path Methods OnReopen(EditCollectionPopup) protected override void OnReopen(EditCollectionPopup newPopup) Overrides AdvancedSceneManager.Editor.Popup<AdvancedSceneManager.Editor.EditCollectionPopup>.OnReopen(AdvancedSceneManager.Editor.EditCollectionPopup) Refresh(SceneCollection, Action<String>, Action) public void Refresh(SceneCollection collection, Action<string> onTitlePreview = null, Action onStartChanged = null)"
  },
  "api/AdvancedSceneManager.Editor.EditorWindow_UIElements-1.html": {
    "href": "api/AdvancedSceneManager.Editor.EditorWindow_UIElements-1.html",
    "title": "EditorWindow_UIElements<T> | Advanced Scene Manager",
    "keywords": "EditorWindow_UIElements<T> Inheritance Object UnityEngine.Object UnityEngine.ScriptableObject UnityEditor.EditorWindow EditorWindow_UIElements<T> SceneManagerWindow SceneOverviewWindow Properties autoReloadOnWindowFocus public virtual bool autoReloadOnWindowFocus { get; } isMainContentLoaded public bool isMainContentLoaded { get; } path public abstract string path { get; } title public GUIContent title { get; set; } window public static T window { get; } Methods Close() public static void Close() DoShow() Override this to change the way this window should be opened, by default UnityEditor.EditorWindow.Show() is used. protected virtual void DoShow() LoadContent(String, VisualElement) Loads the UnityEngine.UIElements.VisualTreeAsset and its associated UnityEngine.UIElements.StyleSheet at the same path. public void LoadContent(string path, VisualElement element) LoadContent(String, VisualElement, Boolean, Boolean, Boolean) Loads the UnityEngine.UIElements.VisualTreeAsset and its associated UnityEngine.UIElements.StyleSheet at the same path. public void LoadContent(string path, VisualElement element, bool loadTree = false, bool loadStyle = false, bool clearChildren = false) OnClose() public virtual void OnClose() OnEnable() public virtual void OnEnable() OnFocus() public virtual void OnFocus() OnShow() protected virtual void OnShow() Open() public static void Open() ReloadContent() public void ReloadContent() Reopen() public static void Reopen() ShowSuspendMessage() protected void ShowSuspendMessage() Extension Methods ScriptableObjectUtility.Save(ScriptableObject)"
  },
  "api/AdvancedSceneManager.Editor.GenericPopup.html": {
    "href": "api/AdvancedSceneManager.Editor.GenericPopup.html",
    "title": "GenericPopup | Advanced Scene Manager",
    "keywords": "GenericPopup Inheritance Object Popup Popup < GenericPopup > GenericPopup Properties path public override string path { get; } Overrides AdvancedSceneManager.Editor.Popup<AdvancedSceneManager.Editor.GenericPopup>.path Separator Represents an GenericPopup.Item separator. default keyword can also be used. public static GenericPopup.Item Separator { get; } Methods OnReopen(GenericPopup) protected override void OnReopen(GenericPopup newPopup) Overrides AdvancedSceneManager.Editor.Popup<AdvancedSceneManager.Editor.GenericPopup>.OnReopen(AdvancedSceneManager.Editor.GenericPopup) Refresh(GenericPopup.Item[]) public void Refresh(params GenericPopup.Item[] items)"
  },
  "api/AdvancedSceneManager.Editor.GenericPopup.Item.html": {
    "href": "api/AdvancedSceneManager.Editor.GenericPopup.Item.html",
    "title": "GenericPopup.Item | Advanced Scene Manager",
    "keywords": "GenericPopup.Item Inheritance Object GenericPopup.Item Properties isBold public bool isBold { get; set; } isCheckable public bool isCheckable { get; set; } isChecked public bool isChecked { get; set; } isEnabled public bool isEnabled { get; set; } isSeparator public bool isSeparator { get; } isVisible public bool isVisible { get; set; } name public string name { get; set; } onClick public Action<bool> onClick { get; set; } Separator public static GenericPopup.Item Separator { get; } Methods AsCheckable() public GenericPopup.Item AsCheckable() AsCheckable(Action<Boolean>) public GenericPopup.Item AsCheckable(Action<bool> onCheckedChanged) Create(String) public static GenericPopup.Item Create(string name) Create(String, Action) public static GenericPopup.Item Create(string name, Action onClick) WhenClicked(Action) public GenericPopup.Item WhenClicked(Action action) WithBoldState(Boolean) public GenericPopup.Item WithBoldState(bool isBold) WithCheckedStatus(Boolean) public GenericPopup.Item WithCheckedStatus(bool isChecked) WithEnabledState(Boolean) public GenericPopup.Item WithEnabledState(bool isEnabled) WithVisibleState(Boolean) public GenericPopup.Item WithVisibleState(bool isVisible)"
  },
  "api/AdvancedSceneManager.Editor.html": {
    "href": "api/AdvancedSceneManager.Editor.html",
    "title": "AdvancedSceneManager.Editor | Advanced Scene Manager",
    "keywords": "AdvancedSceneManager.Editor Classes EditCollectionPopup EditorWindow_UIElements<T> GenericPopup GenericPopup.Item ObjectField Object field with type property that can be set from uxml. Also has isReadOnly property to allow selecting or opening value, but not allow changing value. ObjectField.UxmlFactory ObjectField.UxmlTraits OpenInEditorPopup PickTagPopup Popup Popup<T> SceneAssetEditor SceneField An ObjectField that only accepts Scene , with support for UnityEditor.SceneAsset drag drop. Has support for labelFilter , which filters scenes based on label (i.e. to only show scenes from 'Collection1', for example, use 'ASM:Collection1'). showOpenButtons can be used to toggle open buttons. When isReadOnly is true, showOpenButtons will still be interactable, but value cannot be changed. SceneField.SceneChangedEvent SceneField.UxmlFactory SceneField.UxmlTraits SceneManagerWindow SceneManagerWindow.DragAndDropReorder An class that manages drag and drop reorder. SceneManagerWindow.DragAndDropReorder.DragElement SceneManagerWindow.FooterItem SceneManagerWindow.PostProcess SceneOverviewWindow ScenePropertyDrawer ScenesTab SettingsTab TagsTab Interfaces IUIToolkitEditor An interface used by Popup<T> to allow it to get rootVisualElement and position of the editor it is attached to. Enums SceneManagerWindow.Tab"
  },
  "api/AdvancedSceneManager.Editor.IUIToolkitEditor.html": {
    "href": "api/AdvancedSceneManager.Editor.IUIToolkitEditor.html",
    "title": "IUIToolkitEditor | Advanced Scene Manager",
    "keywords": "IUIToolkitEditor An interface used by Popup<T> to allow it to get rootVisualElement and position of the editor it is attached to. Properties position Rect position { get; set; } rootVisualElement VisualElement rootVisualElement { get; }"
  },
  "api/AdvancedSceneManager.Editor.ObjectField.html": {
    "href": "api/AdvancedSceneManager.Editor.ObjectField.html",
    "title": "ObjectField | Advanced Scene Manager",
    "keywords": "ObjectField Object field with type property that can be set from uxml. Also has isReadOnly property to allow selecting or opening value, but not allow changing value. Inheritance Object UnityEngine.UIElements.CallbackEventHandler UnityEngine.UIElements.Focusable UnityEngine.UIElements.VisualElement UnityEngine.UIElements.BindableElement UnityEngine.UIElements.BaseField < UnityEngine.Object > UnityEditor.UIElements.ObjectField ObjectField SceneField Constructors ObjectField() public ObjectField() Properties isReadOnly public bool isReadOnly { get; set; } Extension Methods VisualElementExtensions.SetEnabledExt<TElement>(TElement, Boolean) VisualElementExtensions.Setup<TElement, T>(TElement, T, String, Action, Boolean, String) VisualElementExtensions.FindAncestor(VisualElement, String, String, Action<VisualElement>) VisualElementExtensions.GetRoot(VisualElement)"
  },
  "api/AdvancedSceneManager.Editor.ObjectField.UxmlFactory.html": {
    "href": "api/AdvancedSceneManager.Editor.ObjectField.UxmlFactory.html",
    "title": "ObjectField.UxmlFactory | Advanced Scene Manager",
    "keywords": "ObjectField.UxmlFactory Inheritance Object UnityEngine.UIElements.UxmlFactory < ObjectField , ObjectField.UxmlTraits > ObjectField.UxmlFactory"
  },
  "api/AdvancedSceneManager.Editor.ObjectField.UxmlTraits.html": {
    "href": "api/AdvancedSceneManager.Editor.ObjectField.UxmlTraits.html",
    "title": "ObjectField.UxmlTraits | Advanced Scene Manager",
    "keywords": "ObjectField.UxmlTraits Inheritance Object UnityEngine.UIElements.UxmlTraits UnityEngine.UIElements.VisualElement.UxmlTraits ObjectField.UxmlTraits Properties uxmlChildElementsDescription public override IEnumerable<UxmlChildElementDescription> uxmlChildElementsDescription { get; } Overrides UnityEngine.UIElements.VisualElement.UxmlTraits.uxmlChildElementsDescription Methods Init(VisualElement, IUxmlAttributes, CreationContext) public override void Init(VisualElement ve, IUxmlAttributes bag, CreationContext cc) Overrides UnityEngine.UIElements.VisualElement.UxmlTraits.Init(UnityEngine.UIElements.VisualElement, UnityEngine.UIElements.IUxmlAttributes, UnityEngine.UIElements.CreationContext)"
  },
  "api/AdvancedSceneManager.Editor.OpenInEditorPopup.html": {
    "href": "api/AdvancedSceneManager.Editor.OpenInEditorPopup.html",
    "title": "OpenInEditorPopup | Advanced Scene Manager",
    "keywords": "OpenInEditorPopup Inheritance Object Popup Popup < OpenInEditorPopup > OpenInEditorPopup Properties height public static float height { get; } path public override string path { get; } Overrides AdvancedSceneManager.Editor.Popup<AdvancedSceneManager.Editor.OpenInEditorPopup>.path Methods OnReopen(OpenInEditorPopup) protected override void OnReopen(OpenInEditorPopup newPopup) Overrides AdvancedSceneManager.Editor.Popup<AdvancedSceneManager.Editor.OpenInEditorPopup>.OnReopen(AdvancedSceneManager.Editor.OpenInEditorPopup) Refresh(Scene) public OpenInEditorPopup Refresh(Scene scene)"
  },
  "api/AdvancedSceneManager.Editor.PickTagPopup.html": {
    "href": "api/AdvancedSceneManager.Editor.PickTagPopup.html",
    "title": "PickTagPopup | Advanced Scene Manager",
    "keywords": "PickTagPopup Inheritance Object Popup Popup < PickTagPopup > PickTagPopup Properties enableBorder protected override bool enableBorder { get; } Overrides AdvancedSceneManager.Editor.Popup<AdvancedSceneManager.Editor.PickTagPopup>.enableBorder path public override string path { get; } Overrides AdvancedSceneManager.Editor.Popup<AdvancedSceneManager.Editor.PickTagPopup>.path Methods OnReopen(PickTagPopup) protected override void OnReopen(PickTagPopup newPopup) Overrides AdvancedSceneManager.Editor.Popup<AdvancedSceneManager.Editor.PickTagPopup>.OnReopen(AdvancedSceneManager.Editor.PickTagPopup) Refresh(SceneTag, Action<SceneTag>) public void Refresh(SceneTag selected, Action<SceneTag> onSelected)"
  },
  "api/AdvancedSceneManager.Editor.Popup.html": {
    "href": "api/AdvancedSceneManager.Editor.Popup.html",
    "title": "Popup | Advanced Scene Manager",
    "keywords": "Popup Inheritance Object Popup Popup<T> Methods RaiseOnClosed() protected void RaiseOnClosed() Reopen() public abstract void Reopen() Events OnClosed public static event Action OnClosed"
  },
  "api/AdvancedSceneManager.Editor.Popup-1.html": {
    "href": "api/AdvancedSceneManager.Editor.Popup-1.html",
    "title": "Popup<T> | Advanced Scene Manager",
    "keywords": "Popup<T> Inheritance Object Popup Popup<T> EditCollectionPopup GenericPopup OpenInEditorPopup PickTagPopup Fields overlay public VisualElement overlay rootVisualElement public VisualElement rootVisualElement Properties alignRight public bool alignRight { get; } enableBorder protected virtual bool enableBorder { get; } hasBorder public bool hasBorder { get; set; } isMainContentLoaded public bool isMainContentLoaded { get; } offset public Vector2 offset { get; } parent public IUIToolkitEditor parent { get; } path public abstract string path { get; } placementTarget public VisualElement placementTarget { get; } Methods Close() public void Close() Close(Action) public void Close(Action onAnimationComplete = null) CloseWithoutAnimation(Boolean) public void CloseWithoutAnimation(bool raiseOnClosed = true) LoadContent(String, VisualElement) Loads the UnityEngine.UIElements.VisualTreeAsset and its associated UnityEngine.UIElements.StyleSheet at the same path. public void LoadContent(string path, VisualElement element) LoadContent(String, VisualElement, Boolean, Boolean, Boolean) Loads the UnityEngine.UIElements.VisualTreeAsset and its associated UnityEngine.UIElements.StyleSheet at the same path. public void LoadContent(string path, VisualElement element, bool loadTree = false, bool loadStyle = false, bool clearChildren = false) OnClose() protected virtual void OnClose() OnReopen(T) protected abstract void OnReopen(T newPopup) Open(VisualElement, IUIToolkitEditor, Boolean, Vector2, Boolean, Boolean) public static T Open(VisualElement placementTarget, IUIToolkitEditor parent, bool alignRight = false, Vector2 offset = default(Vector2), bool stretchToPlacementTargetWidth = false, bool ignoreAnimation = false) ReloadContent() public void ReloadContent() Reopen() public override void Reopen() Overrides Popup.Reopen() SetPosition() protected void SetPosition()"
  },
  "api/AdvancedSceneManager.Editor.SceneAssetEditor.html": {
    "href": "api/AdvancedSceneManager.Editor.SceneAssetEditor.html",
    "title": "SceneAssetEditor | Advanced Scene Manager",
    "keywords": "SceneAssetEditor Inheritance Object UnityEngine.Object UnityEngine.ScriptableObject UnityEditor.Editor SceneAssetEditor Implements IUIToolkitEditor Properties position public Rect position { get; set; } rootVisualElement public VisualElement rootVisualElement { get; } Methods CreateInspectorGUI() public override VisualElement CreateInspectorGUI() Overrides UnityEditor.Editor.CreateInspectorGUI() OnHeaderGUI() protected override void OnHeaderGUI() Overrides UnityEditor.Editor.OnHeaderGUI() Implements IUIToolkitEditor Extension Methods ScriptableObjectUtility.Save(ScriptableObject)"
  },
  "api/AdvancedSceneManager.Editor.SceneField.html": {
    "href": "api/AdvancedSceneManager.Editor.SceneField.html",
    "title": "SceneField | Advanced Scene Manager",
    "keywords": "SceneField An ObjectField that only accepts Scene , with support for UnityEditor.SceneAsset drag drop. Has support for labelFilter , which filters scenes based on label (i.e. to only show scenes from 'Collection1', for example, use 'ASM:Collection1'). showOpenButtons can be used to toggle open buttons. When isReadOnly is true, showOpenButtons will still be interactable, but value cannot be changed. Inheritance Object UnityEngine.UIElements.CallbackEventHandler UnityEngine.UIElements.Focusable UnityEngine.UIElements.VisualElement UnityEngine.UIElements.BindableElement UnityEngine.UIElements.BaseField < UnityEngine.Object > UnityEditor.UIElements.ObjectField ObjectField SceneField Constructors SceneField() public SceneField() Fields onValueChanged public static EventHandler<(Scene prevScene, Scene newScene)> onValueChanged Properties Collection This will be passed to Scene.Open(). public SceneCollection Collection { get; set; } defaultName public string defaultName { get; set; } labelFilter public string labelFilter { get; set; } showOpenButtons public bool showOpenButtons { get; set; } value public Scene value { get; set; } Methods OpenScene(Scene, Boolean, SceneCollection) public static void OpenScene(Scene scene, bool additive, SceneCollection collection = null) RegisterValueChangedCallback(EventCallback<ChangeEvent<Scene>>) public void RegisterValueChangedCallback(EventCallback<ChangeEvent<Scene>> callback) SetValueWithoutNotify(Scene) public SceneField SetValueWithoutNotify(Scene scene) Events OnSceneOpen public event Action OnSceneOpen OnSceneOpenAdditive public event Action OnSceneOpenAdditive Extension Methods VisualElementExtensions.SetEnabledExt<TElement>(TElement, Boolean) VisualElementExtensions.Setup<T>(SceneField, String, T, String, Action, Boolean, String) VisualElementExtensions.Setup<TElement, T>(TElement, T, String, Action, Boolean, String) VisualElementExtensions.FindAncestor(VisualElement, String, String, Action<VisualElement>) VisualElementExtensions.GetRoot(VisualElement)"
  },
  "api/AdvancedSceneManager.Editor.SceneField.SceneChangedEvent.html": {
    "href": "api/AdvancedSceneManager.Editor.SceneField.SceneChangedEvent.html",
    "title": "SceneField.SceneChangedEvent | Advanced Scene Manager",
    "keywords": "SceneField.SceneChangedEvent Inheritance Object UnityEngine.UIElements.EventBase UnityEngine.UIElements.EventBase < UnityEngine.UIElements.ChangeEvent < Scene >> UnityEngine.UIElements.ChangeEvent < Scene > SceneField.SceneChangedEvent Constructors SceneChangedEvent(Scene, Scene) public SceneChangedEvent(Scene newValue, Scene oldValue)"
  },
  "api/AdvancedSceneManager.Editor.SceneField.UxmlFactory.html": {
    "href": "api/AdvancedSceneManager.Editor.SceneField.UxmlFactory.html",
    "title": "SceneField.UxmlFactory | Advanced Scene Manager",
    "keywords": "SceneField.UxmlFactory Inheritance Object UnityEngine.UIElements.UxmlFactory < SceneField , SceneField.UxmlTraits > SceneField.UxmlFactory"
  },
  "api/AdvancedSceneManager.Editor.SceneField.UxmlTraits.html": {
    "href": "api/AdvancedSceneManager.Editor.SceneField.UxmlTraits.html",
    "title": "SceneField.UxmlTraits | Advanced Scene Manager",
    "keywords": "SceneField.UxmlTraits Inheritance Object UnityEngine.UIElements.UxmlTraits UnityEngine.UIElements.VisualElement.UxmlTraits SceneField.UxmlTraits Properties uxmlChildElementsDescription public override IEnumerable<UxmlChildElementDescription> uxmlChildElementsDescription { get; } Overrides UnityEngine.UIElements.VisualElement.UxmlTraits.uxmlChildElementsDescription Methods Init(VisualElement, IUxmlAttributes, CreationContext) public override void Init(VisualElement ve, IUxmlAttributes bag, CreationContext cc) Overrides UnityEngine.UIElements.VisualElement.UxmlTraits.Init(UnityEngine.UIElements.VisualElement, UnityEngine.UIElements.IUxmlAttributes, UnityEngine.UIElements.CreationContext)"
  },
  "api/AdvancedSceneManager.Editor.SceneManagerWindow.DragAndDropReorder.DragElement.html": {
    "href": "api/AdvancedSceneManager.Editor.SceneManagerWindow.DragAndDropReorder.DragElement.html",
    "title": "SceneManagerWindow.DragAndDropReorder.DragElement | Advanced Scene Manager",
    "keywords": "SceneManagerWindow.DragAndDropReorder.DragElement Inheritance Object SceneManagerWindow.DragAndDropReorder.DragElement Fields button public VisualElement button index public int index item public VisualElement item itemRootClass public string itemRootClass itemRootName public string itemRootName list public VisualElement list mouseDown public EventCallback<MouseDownEvent> mouseDown mouseMove public EventCallback<MouseMoveEvent> mouseMove mouseUp public EventCallback<MouseUpEvent> mouseUp"
  },
  "api/AdvancedSceneManager.Editor.SceneManagerWindow.DragAndDropReorder.html": {
    "href": "api/AdvancedSceneManager.Editor.SceneManagerWindow.DragAndDropReorder.html",
    "title": "SceneManagerWindow.DragAndDropReorder | Advanced Scene Manager",
    "keywords": "SceneManagerWindow.DragAndDropReorder An class that manages drag and drop reorder. Inheritance Object SceneManagerWindow.DragAndDropReorder Properties currentDragElement public static SceneManagerWindow.DragAndDropReorder.DragElement currentDragElement { get; } newIndex public static int newIndex { get; } offset public static float offset { get; } rootVisualElement public static VisualElement rootVisualElement { get; set; } Methods RegisterList(VisualElement, String, String, String, String) public static void RegisterList(VisualElement list, string dragButtonName = null, string dragButtonClass = null, string itemRootName = null, string itemRootClass = null) UnregisterList(VisualElement) public static void UnregisterList(VisualElement list) UnregisterListAll() public static void UnregisterListAll() Events OnDragCancel public static event Action<SceneManagerWindow.DragAndDropReorder.DragElement> OnDragCancel OnDragEnded public static event Action<SceneManagerWindow.DragAndDropReorder.DragElement, int> OnDragEnded OnDragStarted public static event Action<SceneManagerWindow.DragAndDropReorder.DragElement> OnDragStarted"
  },
  "api/AdvancedSceneManager.Editor.SceneManagerWindow.FooterItem.html": {
    "href": "api/AdvancedSceneManager.Editor.SceneManagerWindow.FooterItem.html",
    "title": "SceneManagerWindow.FooterItem | Advanced Scene Manager",
    "keywords": "SceneManagerWindow.FooterItem Inheritance Object SceneManagerWindow.FooterItem Properties element public VisualElement element { get; } left public bool left { get; } Methods Button(String, Action, String, Action<Button>) public SceneManagerWindow.FooterItem Button(string text, Action click, string tooltip = \"\", Action<Button> setup = null) Create() public static SceneManagerWindow.FooterItem Create() Element<T>(String, Action<T>, String) public SceneManagerWindow.FooterItem Element<T>(string text = \"\", Action<T> setup = null, string tooltip = \"\") where T : VisualElement, new() Hidden() public SceneManagerWindow.FooterItem Hidden() OnLeft() public SceneManagerWindow.FooterItem OnLeft() OnRight() public SceneManagerWindow.FooterItem OnRight() Visible(Boolean) public SceneManagerWindow.FooterItem Visible(bool visible = true)"
  },
  "api/AdvancedSceneManager.Editor.SceneManagerWindow.html": {
    "href": "api/AdvancedSceneManager.Editor.SceneManagerWindow.html",
    "title": "SceneManagerWindow | Advanced Scene Manager",
    "keywords": "SceneManagerWindow Inheritance Object UnityEngine.Object UnityEngine.ScriptableObject UnityEditor.EditorWindow EditorWindow_UIElements < SceneManagerWindow > SceneManagerWindow Implements IUIToolkitEditor Fields position public static Rect position Properties autoReloadOnWindowFocus public override bool autoReloadOnWindowFocus { get; } Overrides AdvancedSceneManager.Editor.EditorWindow_UIElements<AdvancedSceneManager.Editor.SceneManagerWindow>.autoReloadOnWindowFocus deleteTempBuildMessage Enables message when temp build is deleted. public static bool deleteTempBuildMessage { get; set; } IsDarkMode public static bool IsDarkMode { get; } path public override string path { get; } Overrides AdvancedSceneManager.Editor.EditorWindow_UIElements<AdvancedSceneManager.Editor.SceneManagerWindow>.path Methods IgnoreProfileChanged() public static void IgnoreProfileChanged() OnEnable() public override void OnEnable() Overrides AdvancedSceneManager.Editor.EditorWindow_UIElements<AdvancedSceneManager.Editor.SceneManagerWindow>.OnEnable() OnFocus() public override void OnFocus() Overrides AdvancedSceneManager.Editor.EditorWindow_UIElements<AdvancedSceneManager.Editor.SceneManagerWindow>.OnFocus() ReopenTab() public static void ReopenTab() Save(ScriptableObject, Boolean) public static void Save(ScriptableObject so = null, bool updateBuildSettings = true) Events MouseUp public static event Action MouseUp OnGUIEvent public static event Action OnGUIEvent Implements IUIToolkitEditor Extension Methods ScriptableObjectUtility.Save(ScriptableObject)"
  },
  "api/AdvancedSceneManager.Editor.SceneManagerWindow.PostProcess.html": {
    "href": "api/AdvancedSceneManager.Editor.SceneManagerWindow.PostProcess.html",
    "title": "SceneManagerWindow.PostProcess | Advanced Scene Manager",
    "keywords": "SceneManagerWindow.PostProcess Inheritance Object UnityEditor.AssetPostprocessor SceneManagerWindow.PostProcess"
  },
  "api/AdvancedSceneManager.Editor.SceneManagerWindow.Tab.html": {
    "href": "api/AdvancedSceneManager.Editor.SceneManagerWindow.Tab.html",
    "title": "SceneManagerWindow.Tab | Advanced Scene Manager",
    "keywords": "SceneManagerWindow.Tab Fields Name Description Scenes Settings Tags"
  },
  "api/AdvancedSceneManager.Editor.SceneOverviewWindow.html": {
    "href": "api/AdvancedSceneManager.Editor.SceneOverviewWindow.html",
    "title": "SceneOverviewWindow | Advanced Scene Manager",
    "keywords": "SceneOverviewWindow Inheritance Object UnityEngine.Object UnityEngine.ScriptableObject UnityEditor.EditorWindow EditorWindow_UIElements < SceneOverviewWindow > SceneOverviewWindow Implements IUIToolkitEditor Properties autoReloadOnWindowFocus public override bool autoReloadOnWindowFocus { get; } Overrides AdvancedSceneManager.Editor.EditorWindow_UIElements<AdvancedSceneManager.Editor.SceneOverviewWindow>.autoReloadOnWindowFocus path public override string path { get; } Overrides AdvancedSceneManager.Editor.EditorWindow_UIElements<AdvancedSceneManager.Editor.SceneOverviewWindow>.path Methods OnEnable() public override void OnEnable() Overrides AdvancedSceneManager.Editor.EditorWindow_UIElements<AdvancedSceneManager.Editor.SceneOverviewWindow>.OnEnable() Implements IUIToolkitEditor Extension Methods ScriptableObjectUtility.Save(ScriptableObject)"
  },
  "api/AdvancedSceneManager.Editor.ScenePropertyDrawer.html": {
    "href": "api/AdvancedSceneManager.Editor.ScenePropertyDrawer.html",
    "title": "ScenePropertyDrawer | Advanced Scene Manager",
    "keywords": "ScenePropertyDrawer Inheritance Object UnityEditor.GUIDrawer UnityEditor.PropertyDrawer ScenePropertyDrawer Methods ObjectField<T>(Rect, T, Func<Object, (T obj, Boolean didConvert)>, Type[]) Makes a object field. You can assign objects either by drag and drop objects or by selecting a object using the Object Picker, allows other types to be dragged onto the field and be converted to the target object.. public static T ObjectField<T>(Rect position, T obj, Func<Object, (T obj, bool didConvert)> convertAllowedType = null, params Type[] extraAllowedTypes) where T : Object OnGUI(Rect, SerializedProperty, GUIContent) public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Overrides UnityEditor.PropertyDrawer.OnGUI(UnityEngine.Rect, UnityEditor.SerializedProperty, UnityEngine.GUIContent)"
  },
  "api/AdvancedSceneManager.Editor.ScenesTab.html": {
    "href": "api/AdvancedSceneManager.Editor.ScenesTab.html",
    "title": "ScenesTab | Advanced Scene Manager",
    "keywords": "ScenesTab Inheritance Object ScenesTab Properties FooterButtons public static SceneManagerWindow.FooterItem[] FooterButtons { get; } Methods OnDisable() public static void OnDisable() OnEnable(VisualElement) public static void OnEnable(VisualElement element) OnReorderEnd(SceneManagerWindow.DragAndDropReorder.DragElement, Int32) public static void OnReorderEnd(SceneManagerWindow.DragAndDropReorder.DragElement element, int newIndex) OnReorderStart(SceneManagerWindow.DragAndDropReorder.DragElement) public static void OnReorderStart(SceneManagerWindow.DragAndDropReorder.DragElement element) Open((SceneCollection collection, Int32 i), Boolean) public static void Open(this (SceneCollection collection, int i) scene, bool additive) Path((SceneCollection collection, Int32 i)) public static string Path(this (SceneCollection collection, int i) scene)"
  },
  "api/AdvancedSceneManager.Editor.SettingsTab.html": {
    "href": "api/AdvancedSceneManager.Editor.SettingsTab.html",
    "title": "SettingsTab | Advanced Scene Manager",
    "keywords": "SettingsTab Inheritance Object SettingsTab Properties Settings public static SettingsTab Settings { get; } Methods InitializeProfile(VisualElement, Action) public static void InitializeProfile(VisualElement element, Action changedCallback) OnEnable(VisualElement) public static void OnEnable(VisualElement element)"
  },
  "api/AdvancedSceneManager.Editor.TagsTab.html": {
    "href": "api/AdvancedSceneManager.Editor.TagsTab.html",
    "title": "TagsTab | Advanced Scene Manager",
    "keywords": "TagsTab Inheritance Object TagsTab Properties FooterButtons public static SceneManagerWindow.FooterItem[] FooterButtons { get; } Methods OnEnable(VisualElement) public static void OnEnable(VisualElement element) OnReorderEnd(SceneManagerWindow.DragAndDropReorder.DragElement, Int32) public static void OnReorderEnd(SceneManagerWindow.DragAndDropReorder.DragElement element, int newIndex)"
  },
  "api/AdvancedSceneManager.Editor.Utility.AssetDatabaseUtility.html": {
    "href": "api/AdvancedSceneManager.Editor.Utility.AssetDatabaseUtility.html",
    "title": "AssetDatabaseUtility | Advanced Scene Manager",
    "keywords": "AssetDatabaseUtility Provides methods to make using UnityEditor.AssetDatabase.AllowAutoRefresh() easier. Inheritance Object AssetDatabaseUtility Methods AllowAutoRefresh(Object) public static void AllowAutoRefresh(object key) DisallowAutoRefresh(Object) public static void DisallowAutoRefresh(object key)"
  },
  "api/AdvancedSceneManager.Editor.Utility.AssetsSavedUtility.html": {
    "href": "api/AdvancedSceneManager.Editor.Utility.AssetsSavedUtility.html",
    "title": "AssetsSavedUtility | Advanced Scene Manager",
    "keywords": "AssetsSavedUtility Provides an event that is called when UnityEditor.AssetModificationProcessor .OnWillSaveAssets(string[] paths) is called. Inheritance Object UnityEditor.AssetModificationProcessor AssetsSavedUtility Remarks Only available in editor. Events onAssetsSaved public static event Action<string[]> onAssetsSaved"
  },
  "api/AdvancedSceneManager.Editor.Utility.BlacklistUtility.html": {
    "href": "api/AdvancedSceneManager.Editor.Utility.BlacklistUtility.html",
    "title": "BlacklistUtility | Advanced Scene Manager",
    "keywords": "BlacklistUtility Provides methods for working with the blacklist. Inheritance Object BlacklistUtility Methods IsBlocked(String) Gets if asset is blocked for importing. public static bool IsBlocked(string assetPath)"
  },
  "api/AdvancedSceneManager.Editor.Utility.BuildEventsUtility.BuildError.html": {
    "href": "api/AdvancedSceneManager.Editor.Utility.BuildEventsUtility.BuildError.html",
    "title": "BuildEventsUtility.BuildError | Advanced Scene Manager",
    "keywords": "BuildEventsUtility.BuildError"
  },
  "api/AdvancedSceneManager.Editor.Utility.BuildEventsUtility.html": {
    "href": "api/AdvancedSceneManager.Editor.Utility.BuildEventsUtility.html",
    "title": "BuildEventsUtility | Advanced Scene Manager",
    "keywords": "BuildEventsUtility An utility for registering to build events. Only available in editor. Inheritance Object BuildEventsUtility Events onError Occurs when an error occurs during build. public static event Action onError onErrorWithArgs Occurs when an error occurs during build. public static event BuildEventsUtility.BuildError onErrorWithArgs onWarningWithArgs Occurs when an error occurs during build. public static event BuildEventsUtility.BuildError onWarningWithArgs postBuild Occurs after build. public static event Action<BuildReport> postBuild preBuild Occurs before build. public static event Action<BuildReport> preBuild Remarks Note that changes may not be included in build."
  },
  "api/AdvancedSceneManager.Editor.Utility.BuildSettingsUtility.html": {
    "href": "api/AdvancedSceneManager.Editor.Utility.BuildSettingsUtility.html",
    "title": "BuildSettingsUtility | Advanced Scene Manager",
    "keywords": "BuildSettingsUtility An utility class for managing build settings scene order. Inheritance Object BuildSettingsUtility Remarks Only available in editor. Methods GetEnabledState(String) Gets the enabled state of a scene. public static (bool enabled, BuildSettingsUtility.Reason reason) GetEnabledState(string path) GetOrderedList() Get an ordered list of all scenes that would be set as scene build settings. public static IEnumerable<(string scene, EditorBuildSettingsScene buildScene, BuildSettingsUtility.Reason reason)> GetOrderedList() IsIncluded(Scene) Get if scene is included in build. public static bool IsIncluded(Scene scene) UpdateBuildSettings() Updates the scene build settings. public static void UpdateBuildSettings()"
  },
  "api/AdvancedSceneManager.Editor.Utility.BuildSettingsUtility.Reason.html": {
    "href": "api/AdvancedSceneManager.Editor.Utility.BuildSettingsUtility.Reason.html",
    "title": "BuildSettingsUtility.Reason | Advanced Scene Manager",
    "keywords": "BuildSettingsUtility.Reason Fields Name Description IncludedInProfile IsAddressable None NotIncludedInProfile Overriden"
  },
  "api/AdvancedSceneManager.Editor.Utility.EditorFolderUtility.html": {
    "href": "api/AdvancedSceneManager.Editor.Utility.EditorFolderUtility.html",
    "title": "EditorFolderUtility | Advanced Scene Manager",
    "keywords": "EditorFolderUtility Contains functions for folders in editor. Inheritance Object EditorFolderUtility Methods EnsureFolderExists(String) public static void EnsureFolderExists(string folder)"
  },
  "api/AdvancedSceneManager.Editor.Utility.EditorGUIUtilityExt.html": {
    "href": "api/AdvancedSceneManager.Editor.Utility.EditorGUIUtilityExt.html",
    "title": "EditorGUIUtilityExt | Advanced Scene Manager",
    "keywords": "EditorGUIUtilityExt Contains proxy functions for internal UnityEditor.EditorGUIUtility functions that should have a public counterpart. Inheritance Object EditorGUIUtilityExt Methods GetDefaultBackgroundColor() public static Color GetDefaultBackgroundColor() PingOrOpenAsset(Object, Int32) public static void PingOrOpenAsset(Object targetObject, int clickCount)"
  },
  "api/AdvancedSceneManager.Editor.Utility.GenericPrompt.html": {
    "href": "api/AdvancedSceneManager.Editor.Utility.GenericPrompt.html",
    "title": "GenericPrompt | Advanced Scene Manager",
    "keywords": "GenericPrompt Inheritance Object UnityEngine.Object UnityEngine.ScriptableObject UnityEditor.EditorWindow GenericPrompt < Object , GenericPrompt > GenericPrompt Properties cancelButton public override string cancelButton { get; } Overrides AdvancedSceneManager.Editor.Utility.GenericPrompt<System.Object, AdvancedSceneManager.Editor.Utility.GenericPrompt>.cancelButton extraHeight public override float extraHeight { get; } Overrides AdvancedSceneManager.Editor.Utility.GenericPrompt<System.Object, AdvancedSceneManager.Editor.Utility.GenericPrompt>.extraHeight okButton public override string okButton { get; } Overrides AdvancedSceneManager.Editor.Utility.GenericPrompt<System.Object, AdvancedSceneManager.Editor.Utility.GenericPrompt>.okButton title public override string title { get; } Overrides AdvancedSceneManager.Editor.Utility.GenericPrompt<System.Object, AdvancedSceneManager.Editor.Utility.GenericPrompt>.title width public override float width { get; } Overrides AdvancedSceneManager.Editor.Utility.GenericPrompt<System.Object, AdvancedSceneManager.Editor.Utility.GenericPrompt>.width Methods OnContentGUI(ref Object) public override void OnContentGUI(ref object value) Overrides AdvancedSceneManager.Editor.Utility.GenericPrompt<System.Object, AdvancedSceneManager.Editor.Utility.GenericPrompt>.OnContentGUI(System.Object) Prompt(String, String, String, String, Single) public static bool Prompt(string title, string message, string OkButton = \"Ok\", string cancelButton = \"Cancel\", float maxContentHeight = 400F) Extension Methods ScriptableObjectUtility.Save(ScriptableObject)"
  },
  "api/AdvancedSceneManager.Editor.Utility.GenericPrompt-2.html": {
    "href": "api/AdvancedSceneManager.Editor.Utility.GenericPrompt-2.html",
    "title": "GenericPrompt<T, TSelf> | Advanced Scene Manager",
    "keywords": "GenericPrompt<T, TSelf> Inheritance Object UnityEngine.Object UnityEngine.ScriptableObject UnityEditor.EditorWindow GenericPrompt<T, TSelf> GenericPrompt PromptInt PromptKey PromptName PromptNameAndMessage PromptVersion Fields validate protected readonly List<Func<T, (bool isValid, string message)>> validate Properties cancelButton public virtual string cancelButton { get; } extraHeight public virtual float extraHeight { get; } okButton public virtual string okButton { get; } title public abstract string title { get; } updateSizeAutomatically public virtual bool updateSizeAutomatically { get; } width public virtual float width { get; } Methods OnContentGUI(ref T) public abstract void OnContentGUI(ref T value) Prompt(T, Func<T, (Boolean isValid, String message)>[]) public static (T value, bool successful) Prompt(T defaultValue = null, params Func<T, (bool isValid, string message)>[] validate) Validate(T) protected virtual (bool isValid, string message) Validate(T value) Extension Methods ScriptableObjectUtility.Save(ScriptableObject)"
  },
  "api/AdvancedSceneManager.Editor.Utility.HierarchyGUIUtility.HierarchyGameObjectGUI.html": {
    "href": "api/AdvancedSceneManager.Editor.Utility.HierarchyGUIUtility.HierarchyGameObjectGUI.html",
    "title": "HierarchyGUIUtility.HierarchyGameObjectGUI | Advanced Scene Manager",
    "keywords": "HierarchyGUIUtility.HierarchyGameObjectGUI Called after reserving a rect in hierarchy game object field. Return true to indicate that something was drawn, false means that the rect will be re-used for next OnGUI callback."
  },
  "api/AdvancedSceneManager.Editor.Utility.HierarchyGUIUtility.HierarchySceneGUI.html": {
    "href": "api/AdvancedSceneManager.Editor.Utility.HierarchyGUIUtility.HierarchySceneGUI.html",
    "title": "HierarchyGUIUtility.HierarchySceneGUI | Advanced Scene Manager",
    "keywords": "HierarchyGUIUtility.HierarchySceneGUI Called after reserving a rect in hierarchy scene field. Return true to indicate that something was drawn, false means that the rect will be re-used for next OnGUI callback."
  },
  "api/AdvancedSceneManager.Editor.Utility.HierarchyGUIUtility.html": {
    "href": "api/AdvancedSceneManager.Editor.Utility.HierarchyGUIUtility.html",
    "title": "HierarchyGUIUtility | Advanced Scene Manager",
    "keywords": "HierarchyGUIUtility An utility for adding extra icons to scene fields in the heirarchy window. Only available in editor. Inheritance Object HierarchyGUIUtility Properties defaultStyle The default style for text in hierarchy. public static GUIStyle defaultStyle { get; } Methods AddGameObjectGUI(HierarchyGUIUtility.HierarchyGameObjectGUI, Int32) Adds a onGUI call for UnityEngine.GameObject fields. public static void AddGameObjectGUI(HierarchyGUIUtility.HierarchyGameObjectGUI onGUI, int index = 0) AddSceneGUI(HierarchyGUIUtility.HierarchySceneGUI, Int32) Adds a onGUI call for Scene fields. public static void AddSceneGUI(HierarchyGUIUtility.HierarchySceneGUI onGUI, int index = 0) RemoveGameObjectGUI(HierarchyGUIUtility.HierarchyGameObjectGUI) Remove a onGUI call for a UnityEngine.GameObject . public static void RemoveGameObjectGUI(HierarchyGUIUtility.HierarchyGameObjectGUI onGUI) RemoveSceneGUI(HierarchyGUIUtility.HierarchySceneGUI) Remove a onGUI call for a Scene . public static void RemoveSceneGUI(HierarchyGUIUtility.HierarchySceneGUI onGUI) Repaint() public static void Repaint()"
  },
  "api/AdvancedSceneManager.Editor.Utility.html": {
    "href": "api/AdvancedSceneManager.Editor.Utility.html",
    "title": "AdvancedSceneManager.Editor.Utility | Advanced Scene Manager",
    "keywords": "AdvancedSceneManager.Editor.Utility Classes AssetDatabaseUtility Provides methods to make using UnityEditor.AssetDatabase.AllowAutoRefresh() easier. AssetsSavedUtility Provides an event that is called when UnityEditor.AssetModificationProcessor .OnWillSaveAssets(string[] paths) is called. BlacklistUtility Provides methods for working with the blacklist. BuildEventsUtility An utility for registering to build events. Only available in editor. BuildSettingsUtility An utility class for managing build settings scene order. EditorFolderUtility Contains functions for folders in editor. EditorGUIUtilityExt Contains proxy functions for internal UnityEditor.EditorGUIUtility functions that should have a public counterpart. GenericPrompt GenericPrompt<T, TSelf> HierarchyGUIUtility An utility for adding extra icons to scene fields in the heirarchy window. Only available in editor. ListUtility Provides methods for working with lists. MenuItemHelper An helper class for creating UnityEditor.MenuItem . OnGUIPrompt PersistentSceneInEditorUtility An utility class to automatically open persistent scenes in editor. PersistentSceneInEditorUtility.OpenInEditorSetting PromptInt PromptKey PromptName PromptNameAndMessage PromptVersion SettingsTab Provides the ability to add settings to advanced scene manager window settings. SettingsTab._DefaultHeaders StyleExtensions TrimUtility Applies text-overflow uss property in 2020+, but applies manual trim in earlier versions. VisualElementExtensions Enums BuildSettingsUtility.Reason PersistentSceneInEditorUtility.OpenInEditorOption Delegates BuildEventsUtility.BuildError HierarchyGUIUtility.HierarchyGameObjectGUI Called after reserving a rect in hierarchy game object field. Return true to indicate that something was drawn, false means that the rect will be re-used for next OnGUI callback. HierarchyGUIUtility.HierarchySceneGUI Called after reserving a rect in hierarchy scene field. Return true to indicate that something was drawn, false means that the rect will be re-used for next OnGUI callback."
  },
  "api/AdvancedSceneManager.Editor.Utility.ListUtility.html": {
    "href": "api/AdvancedSceneManager.Editor.Utility.ListUtility.html",
    "title": "ListUtility | Advanced Scene Manager",
    "keywords": "ListUtility Provides methods for working with lists. Inheritance Object ListUtility Remarks Only available in editor. Methods Except<T>(IEnumerable<T>, T) Excludes the items from the list. public static IEnumerable<T> Except<T>(this IEnumerable<T> list, T item) Flatten<T>(IEnumerable<T>, Func<T, IEnumerable<T>>) Flattens a multidimensional list. Usage: list.Flatten(item => item.subItems); public static IEnumerable<T> Flatten<T>(this IEnumerable<T> list, Func<T, IEnumerable<T>> getSubList) ForEach<T>(T[], Action<T, Int32>) Runs action on each item in list . public static void ForEach<T>(this T[] list, Action<T, int> action) ForEach<T>(IEnumerable<T>, Action<T, Int32>) Runs action on each item in list . public static void ForEach<T>(this IEnumerable<T> list, Action<T, int> action) GroupConsecutive<T>(IEnumerable<T>, Func<T, T, Boolean>) Groups consecutive items together. public static IEnumerable<IEnumerable<T>> GroupConsecutive<T>(this IEnumerable<T> list, Func<T, T, bool> compare) MoveDown<T>(ref T[], T) Moves the item up in the array . Returns false if index is last or item does not exist in array . public static bool MoveDown<T>(ref T[] array, T item) MoveUp<T>(ref T[], T) Moves the item up in the array . Returns false if index is 0 or item does not exist in array . public static bool MoveUp<T>(ref T[] array, T item)"
  },
  "api/AdvancedSceneManager.Editor.Utility.MenuItemHelper.html": {
    "href": "api/AdvancedSceneManager.Editor.Utility.MenuItemHelper.html",
    "title": "MenuItemHelper | Advanced Scene Manager",
    "keywords": "MenuItemHelper An helper class for creating UnityEditor.MenuItem . Inheritance Object MenuItemHelper Methods InvokeThisMenuItem() Invokes a menu item, only usable when called from a method decorated with UnityEditor.MenuItem that has been Setup() using MenuItemHelper . public static void InvokeThisMenuItem() Refresh() [InitializeOnLoadMethod] public static void Refresh() Setup(MethodBase, Action) Sets up an clickable menu item. public static void Setup(MethodBase method, Action onClick = null) Setup(MethodBase, Func<Boolean>, Action<Boolean>) Sets up an toggleable menu item. public static void Setup(MethodBase method, Func<bool> get, Action<bool> set = null) Setup(MethodBase, PropertyInfo, Action<Boolean>, Object) Sets up an toggleable menu item, using property as backing value. public static void Setup(MethodBase method, PropertyInfo property, Action<bool> onChecked = null, object propertyTarget = null)"
  },
  "api/AdvancedSceneManager.Editor.Utility.OnGUIPrompt.html": {
    "href": "api/AdvancedSceneManager.Editor.Utility.OnGUIPrompt.html",
    "title": "OnGUIPrompt | Advanced Scene Manager",
    "keywords": "OnGUIPrompt Inheritance Object UnityEngine.Object UnityEngine.ScriptableObject UnityEditor.EditorWindow OnGUIPrompt Methods Prompt(GUIContent, Action, Action, Action, Action, Action, Boolean, Boolean, String, RectOffset, Nullable<Vector2>) public static bool Prompt(GUIContent title, Action onGUI, Action onEnable = null, Action onDisable = null, Action onFocus = null, Action onLostFocus = null, bool drawDefaultFooter = true, bool show = true, string acceptButton = \"Continue\", RectOffset margin = null, Vector2? size = null) Prompt(GUIContent, Action, out Action<Boolean>, out Action<Boolean>, Action, Action, Action, Action, Boolean, Boolean, String, RectOffset, Nullable<Vector2>) Shows an editor window with the specified OnGUI callback. public static bool Prompt(GUIContent title, Action onGUI, out Action<bool> setResult, out Action<bool> setCanContinue, Action onEnable = null, Action onDisable = null, Action onFocus = null, Action onLostFocus = null, bool drawDefaultFooter = true, bool show = true, string acceptButton = \"Continue\", RectOffset margin = null, Vector2? size = null) Extension Methods ScriptableObjectUtility.Save(ScriptableObject)"
  },
  "api/AdvancedSceneManager.Editor.Utility.PersistentSceneInEditorUtility.html": {
    "href": "api/AdvancedSceneManager.Editor.Utility.PersistentSceneInEditorUtility.html",
    "title": "PersistentSceneInEditorUtility | Advanced Scene Manager",
    "keywords": "PersistentSceneInEditorUtility An utility class to automatically open persistent scenes in editor. Inheritance Object PersistentSceneInEditorUtility Remarks Only available in editor. Methods GetAssociatedScenes(Scene) Gets the scenes flagged to open when the specified scene is opened. public static Scene[] GetAssociatedScenes(Scene scene) GetPersistentOption(Scene) Gets the persistent option of a scene. public static PersistentSceneInEditorUtility.OpenInEditorSetting GetPersistentOption(Scene scene) IsPersistent(Scene) public static bool IsPersistent(Scene scene) OpenAssociatedPersistentScenes(Scene, Boolean) Open all scenes that are flagged to open when the specified scene is opened. public static void OpenAssociatedPersistentScenes(Scene scene, bool promptSave = false)"
  },
  "api/AdvancedSceneManager.Editor.Utility.PersistentSceneInEditorUtility.OpenInEditorOption.html": {
    "href": "api/AdvancedSceneManager.Editor.Utility.PersistentSceneInEditorUtility.OpenInEditorOption.html",
    "title": "PersistentSceneInEditorUtility.OpenInEditorOption | Advanced Scene Manager",
    "keywords": "PersistentSceneInEditorUtility.OpenInEditorOption Fields Name Description AnySceneOpens Never WhenAnyOfTheFollowingScenesOpen WhenAnySceneOpensExcept"
  },
  "api/AdvancedSceneManager.Editor.Utility.PersistentSceneInEditorUtility.OpenInEditorSetting.html": {
    "href": "api/AdvancedSceneManager.Editor.Utility.PersistentSceneInEditorUtility.OpenInEditorSetting.html",
    "title": "PersistentSceneInEditorUtility.OpenInEditorSetting | Advanced Scene Manager",
    "keywords": "PersistentSceneInEditorUtility.OpenInEditorSetting Inheritance Object PersistentSceneInEditorUtility.OpenInEditorSetting Fields list public string[] list name public string name option public PersistentSceneInEditorUtility.OpenInEditorOption option scene public string scene Methods Save() Saves this persistent option. public void Save()"
  },
  "api/AdvancedSceneManager.Editor.Utility.PromptInt.html": {
    "href": "api/AdvancedSceneManager.Editor.Utility.PromptInt.html",
    "title": "PromptInt | Advanced Scene Manager",
    "keywords": "PromptInt Inheritance Object UnityEngine.Object UnityEngine.ScriptableObject UnityEditor.EditorWindow GenericPrompt < String , PromptInt > PromptInt Properties title public override string title { get; } Overrides AdvancedSceneManager.Editor.Utility.GenericPrompt<System.String, AdvancedSceneManager.Editor.Utility.PromptInt>.title Methods OnContentGUI(ref String) public override void OnContentGUI(ref string value) Overrides AdvancedSceneManager.Editor.Utility.GenericPrompt<System.String, AdvancedSceneManager.Editor.Utility.PromptInt>.OnContentGUI(System.String) Validate(String) protected override (bool isValid, string message) Validate(string value) Overrides AdvancedSceneManager.Editor.Utility.GenericPrompt<System.String, AdvancedSceneManager.Editor.Utility.PromptInt>.Validate(System.String) Extension Methods ScriptableObjectUtility.Save(ScriptableObject)"
  },
  "api/AdvancedSceneManager.Editor.Utility.PromptKey.html": {
    "href": "api/AdvancedSceneManager.Editor.Utility.PromptKey.html",
    "title": "PromptKey | Advanced Scene Manager",
    "keywords": "PromptKey Inheritance Object UnityEngine.Object UnityEngine.ScriptableObject UnityEditor.EditorWindow GenericPrompt < (T1, T2) < EventModifiers , KeyCode >, PromptKey > PromptKey Properties title public override string title { get; } Overrides AdvancedSceneManager.Editor.Utility.GenericPrompt<System.ValueTuple<UnityEngine.EventModifiers, UnityEngine.KeyCode>, AdvancedSceneManager.Editor.Utility.PromptKey>.title Methods OnContentGUI(ref (EventModifiers modifiers, KeyCode key)) public override void OnContentGUI(ref (EventModifiers modifiers, KeyCode key) value) Overrides AdvancedSceneManager.Editor.Utility.GenericPrompt<System.ValueTuple<UnityEngine.EventModifiers, UnityEngine.KeyCode>, AdvancedSceneManager.Editor.Utility.PromptKey>.OnContentGUI(System.ValueTuple<UnityEngine.EventModifiers, UnityEngine.KeyCode>) Extension Methods ScriptableObjectUtility.Save(ScriptableObject)"
  },
  "api/AdvancedSceneManager.Editor.Utility.PromptName.html": {
    "href": "api/AdvancedSceneManager.Editor.Utility.PromptName.html",
    "title": "PromptName | Advanced Scene Manager",
    "keywords": "PromptName Inheritance Object UnityEngine.Object UnityEngine.ScriptableObject UnityEditor.EditorWindow GenericPrompt < String , PromptName > PromptName Properties title public override string title { get; } Overrides AdvancedSceneManager.Editor.Utility.GenericPrompt<System.String, AdvancedSceneManager.Editor.Utility.PromptName>.title Methods OnContentGUI(ref String) public override void OnContentGUI(ref string value) Overrides AdvancedSceneManager.Editor.Utility.GenericPrompt<System.String, AdvancedSceneManager.Editor.Utility.PromptName>.OnContentGUI(System.String) Extension Methods ScriptableObjectUtility.Save(ScriptableObject)"
  },
  "api/AdvancedSceneManager.Editor.Utility.PromptNameAndMessage.html": {
    "href": "api/AdvancedSceneManager.Editor.Utility.PromptNameAndMessage.html",
    "title": "PromptNameAndMessage | Advanced Scene Manager",
    "keywords": "PromptNameAndMessage Inheritance Object UnityEngine.Object UnityEngine.ScriptableObject UnityEditor.EditorWindow GenericPrompt < (T1, T2) < String , String >, PromptNameAndMessage > PromptNameAndMessage Properties extraHeight public override float extraHeight { get; } Overrides AdvancedSceneManager.Editor.Utility.GenericPrompt<System.ValueTuple<System.String, System.String>, AdvancedSceneManager.Editor.Utility.PromptNameAndMessage>.extraHeight title public override string title { get; } Overrides AdvancedSceneManager.Editor.Utility.GenericPrompt<System.ValueTuple<System.String, System.String>, AdvancedSceneManager.Editor.Utility.PromptNameAndMessage>.title Methods OnContentGUI(ref (String name, String message)) public override void OnContentGUI(ref (string name, string message) value) Overrides AdvancedSceneManager.Editor.Utility.GenericPrompt<System.ValueTuple<System.String, System.String>, AdvancedSceneManager.Editor.Utility.PromptNameAndMessage>.OnContentGUI(System.ValueTuple<System.String, System.String>) Extension Methods ScriptableObjectUtility.Save(ScriptableObject)"
  },
  "api/AdvancedSceneManager.Editor.Utility.PromptVersion.html": {
    "href": "api/AdvancedSceneManager.Editor.Utility.PromptVersion.html",
    "title": "PromptVersion | Advanced Scene Manager",
    "keywords": "PromptVersion Inheritance Object UnityEngine.Object UnityEngine.ScriptableObject UnityEditor.EditorWindow GenericPrompt < String , PromptVersion > PromptVersion Properties title public override string title { get; } Overrides AdvancedSceneManager.Editor.Utility.GenericPrompt<System.String, AdvancedSceneManager.Editor.Utility.PromptVersion>.title Methods OnContentGUI(ref String) public override void OnContentGUI(ref string value) Overrides AdvancedSceneManager.Editor.Utility.GenericPrompt<System.String, AdvancedSceneManager.Editor.Utility.PromptVersion>.OnContentGUI(System.String) Validate(String) protected override (bool isValid, string message) Validate(string value) Overrides AdvancedSceneManager.Editor.Utility.GenericPrompt<System.String, AdvancedSceneManager.Editor.Utility.PromptVersion>.Validate(System.String) Extension Methods ScriptableObjectUtility.Save(ScriptableObject)"
  },
  "api/AdvancedSceneManager.Editor.Utility.SettingsTab._DefaultHeaders.html": {
    "href": "api/AdvancedSceneManager.Editor.Utility.SettingsTab._DefaultHeaders.html",
    "title": "SettingsTab._DefaultHeaders | Advanced Scene Manager",
    "keywords": "SettingsTab._DefaultHeaders Inheritance Object SettingsTab._DefaultHeaders Properties Appearance public string Appearance { get; } Appearance_CollectionHeader public string Appearance_CollectionHeader { get; } Appearance_Hierarchy public string Appearance_Hierarchy { get; } Appearance_ScenesTab public string Appearance_ScenesTab { get; } Appearance_WindowHeader public string Appearance_WindowHeader { get; } Blacklist public string Blacklist { get; } DynamicCollections public string DynamicCollections { get; } Options public string Options { get; } Options_Local public string Options_Local { get; } Options_Log public string Options_Log { get; } Options_Profile public string Options_Profile { get; } Options_Project public string Options_Project { get; } PluginsAndExamples public string PluginsAndExamples { get; } PluginsAndExamples_Examples public string PluginsAndExamples_Examples { get; } PluginsAndExamples_Experiments public string PluginsAndExamples_Experiments { get; } PluginsAndExamples_Plugins public string PluginsAndExamples_Plugins { get; }"
  },
  "api/AdvancedSceneManager.Editor.Utility.SettingsTab.html": {
    "href": "api/AdvancedSceneManager.Editor.Utility.SettingsTab.html",
    "title": "SettingsTab | Advanced Scene Manager",
    "keywords": "SettingsTab Provides the ability to add settings to advanced scene manager window settings. Inheritance Object SettingsTab Remarks Only available in editor. Constructors SettingsTab() public SettingsTab() Properties DefaultHeaders public SettingsTab._DefaultHeaders DefaultHeaders { get; } instance public static SettingsTab instance { get; } Methods Add(VisualElement, String) Add field to settings tab. public void Add(VisualElement callback, string header) AddHeaderContent(VisualElement, String) public void AddHeaderContent(VisualElement callback, string header) GetHeaderOrder(String) public int GetHeaderOrder(string header) Remove(VisualElement) Removes the setting field. public void Remove(VisualElement callback) RemoveHeaderContent(VisualElement) public void RemoveHeaderContent(VisualElement callback) SetHeaderOrder(String, Int32) public void SetHeaderOrder(string header, int order) Spacer(String) public void Spacer(string header)"
  },
  "api/AdvancedSceneManager.Editor.Utility.StyleExtensions.html": {
    "href": "api/AdvancedSceneManager.Editor.Utility.StyleExtensions.html",
    "title": "StyleExtensions | Advanced Scene Manager",
    "keywords": "StyleExtensions Inheritance Object StyleExtensions Methods SetBorderColor(IStyle, Nullable<Color>, Nullable<Color>, Nullable<Color>, Nullable<Color>, Nullable<Color>, Nullable<Color>, Nullable<Color>) public static void SetBorderColor(this IStyle style, Color? all = null, Color? vertical = null, Color? horizontal = null, Color? left = null, Color? right = null, Color? top = null, Color? bottom = null) SetBorderWidth(IStyle, Nullable<Single>, Nullable<Single>, Nullable<Single>, Nullable<Single>, Nullable<Single>, Nullable<Single>, Nullable<Single>) public static void SetBorderWidth(this IStyle style, float? all = null, float? vertical = null, float? horizontal = null, float? left = null, float? right = null, float? top = null, float? bottom = null) SetMargin(IStyle, Nullable<Single>, Nullable<Single>, Nullable<Single>, Nullable<Single>, Nullable<Single>, Nullable<Single>, Nullable<Single>) public static void SetMargin(this IStyle style, float? all = null, float? vertical = null, float? horizontal = null, float? left = null, float? right = null, float? top = null, float? bottom = null) SetPadding(IStyle, Nullable<Single>, Nullable<Single>, Nullable<Single>, Nullable<Single>, Nullable<Single>, Nullable<Single>, Nullable<Single>) public static void SetPadding(this IStyle style, float? all = null, float? vertical = null, float? horizontal = null, float? left = null, float? right = null, float? top = null, float? bottom = null)"
  },
  "api/AdvancedSceneManager.Editor.Utility.TrimUtility.html": {
    "href": "api/AdvancedSceneManager.Editor.Utility.TrimUtility.html",
    "title": "TrimUtility | Advanced Scene Manager",
    "keywords": "TrimUtility Applies text-overflow uss property in 2020+, but applies manual trim in earlier versions. Inheritance Object TrimUtility Methods GetLength(Char, TextElement) public static float GetLength(char c, TextElement label) GetLength(String, TextElement) public static float GetLength(string str, TextElement label) TrimLabel(TextElement, String, Func<Single>, Boolean) Trim the label and show ellipsis if too long. public static void TrimLabel(this TextElement label, string text, Func<float> maxWidth, bool enableAuto)"
  },
  "api/AdvancedSceneManager.Editor.Utility.VisualElementExtensions.html": {
    "href": "api/AdvancedSceneManager.Editor.Utility.VisualElementExtensions.html",
    "title": "VisualElementExtensions | Advanced Scene Manager",
    "keywords": "VisualElementExtensions Inheritance Object VisualElementExtensions Properties DefaultBackgroundColor public static Color DefaultBackgroundColor { get; } Methods FindAncestor(VisualElement, String, String, Action<VisualElement>) public static VisualElement FindAncestor(this VisualElement element, string name = \"\", string className = \"\", Action<VisualElement> actionToPerformOnEachParent = null) GetRoot(VisualElement) public static VisualElement GetRoot(this VisualElement element) SetEnabledExt<TElement>(TElement, Boolean) public static TElement SetEnabledExt<TElement>(this TElement element, bool enabled) where TElement : VisualElement Setup(Button, Action) public static Button Setup(this Button element, Action onClick) Setup(Toggle, EventCallback<ChangeEvent<Boolean>>, Boolean, String) public static Toggle Setup(this Toggle element, EventCallback<ChangeEvent<bool>> valueChanged, bool defaultValue = false, string tooltip = null) Setup<T>(SceneField, String, T, String, Action, Boolean, String) public static SceneField Setup<T>(this SceneField element, string label, T target, string field, Action onChanged = null, bool saveInSceneManagerWindow = true, string tooltip = null) Setup<TElement, T>(TElement, T, String, Action, Boolean, String) Sets up an ui toolkit element, by setting current value and registers value changed callback and automatically sets the new value to target. public static TElement Setup<TElement, T>(this TElement element, T target, string field, Action onChanged = null, bool saveInSceneManagerWindow = true, string tooltip = null) where TElement : VisualElement SetValueWithoutNotifyExt(EnumField, Enum) public static EnumField SetValueWithoutNotifyExt(this EnumField element, Enum value)"
  },
  "api/AdvancedSceneManager.Exceptions.CloseSceneException.html": {
    "href": "api/AdvancedSceneManager.Exceptions.CloseSceneException.html",
    "title": "CloseSceneException | Advanced Scene Manager",
    "keywords": "CloseSceneException Thrown when a scene could not be closed. Inheritance Object Exception CloseSceneException Constructors CloseSceneException(Scene, Scene, SceneCollection, String) public CloseSceneException(Scene scene, Scene unityScene, SceneCollection collection = null, string message = null) Fields collection public SceneCollection collection scene public Scene scene unityScene public Scene unityScene"
  },
  "api/AdvancedSceneManager.Exceptions.html": {
    "href": "api/AdvancedSceneManager.Exceptions.html",
    "title": "AdvancedSceneManager.Exceptions | Advanced Scene Manager",
    "keywords": "AdvancedSceneManager.Exceptions Classes CloseSceneException Thrown when a scene could not be closed. OpenSceneException Thrown when a scene could not be opened."
  },
  "api/AdvancedSceneManager.Exceptions.OpenSceneException.html": {
    "href": "api/AdvancedSceneManager.Exceptions.OpenSceneException.html",
    "title": "OpenSceneException | Advanced Scene Manager",
    "keywords": "OpenSceneException Thrown when a scene could not be opened. Inheritance Object Exception OpenSceneException Constructors OpenSceneException(Scene, SceneCollection, String) public OpenSceneException(Scene scene, SceneCollection collection = null, string message = null) Properties collection The collection that the scene was associated with. Null if scene was opened as stand-alone. public SceneCollection collection { get; } scene The scene that was attempted to be opened. public Scene scene { get; }"
  },
  "api/AdvancedSceneManager.html": {
    "href": "api/AdvancedSceneManager.html",
    "title": "AdvancedSceneManager | Advanced Scene Manager",
    "keywords": "AdvancedSceneManager Classes SceneManager The core of Advanced Scene Manager, provides access to the following: assetManagement , provides an overview over all scenes and collections in project and contains functions to manage them. runtime , manages startup and quit processes of the game. profile , the current profile, which contains your collections. settings , settings of the scene manager that isn't stored in the profile. Scene managers: collection , contains functions to open or close collections or manage collection scenes. standalone , contains functions to manage scenes that are not associated with the currently active collection. utility , contains functions to manage scenes that may be open in either standalone or collection . editor , a simplified scene manager to manages scenes in editor. Only available in editor."
  },
  "api/AdvancedSceneManager.Models.ASMSettings.html": {
    "href": "api/AdvancedSceneManager.Models.ASMSettings.html",
    "title": "ASMSettings | Advanced Scene Manager",
    "keywords": "ASMSettings Settings relating to ASM. Inheritance Object UnityEngine.Object UnityEngine.ScriptableObject ASMSettings Remarks Usage: settings . Properties buildProfile The profile to use during build, this is set to current before building. public Profile buildProfile { get; } buildUnitySplashScreenColor This is the color of the unity splash screen, used to make fade from splash screen to asm smooth, this is set before building. UnityEngine.Color.black is used when the unity splash screen is disabled. public Color buildUnitySplashScreenColor { get; } inGameToolbarEnabled Enables or disables InGameToolbarUtility in builds. public bool inGameToolbarEnabled { get; set; } inGameToolbarExpandedByDefault Gets or sets whatever InGameToolbarUtility in should be expanded by default. public bool inGameToolbarExpandedByDefault { get; set; } name public string name { get; } profile The currently selected profile. public Profile profile { get; } Remarks This is the same as buildProfile in builds. Methods MarkAsDirty() Mark scriptable object as dirty after modifying. public void MarkAsDirty() Remarks Only available in editor. Save() Saves the scriptable object after modifying. public void Save() Remarks Only available in editor. Extension Methods ScriptableObjectUtility.Save(ScriptableObject)"
  },
  "api/AdvancedSceneManager.Models.ASMSettings.Local.html": {
    "href": "api/AdvancedSceneManager.Models.ASMSettings.Local.html",
    "title": "ASMSettings.Local | Advanced Scene Manager",
    "keywords": "ASMSettings.Local Inheritance Object ASMSettings.Local Properties allowEditingOfBuildSettings public bool allowEditingOfBuildSettings { get; set; } allowExcludingCollectionsFromBuild public bool allowExcludingCollectionsFromBuild { get; set; } autoOpenScenesWhenCreated public bool autoOpenScenesWhenCreated { get; set; } displayCollectionAdditiveButton public bool displayCollectionAdditiveButton { get; set; } displayCollectionOpenButton public bool displayCollectionOpenButton { get; set; } displayCollectionPlayButton public bool displayCollectionPlayButton { get; set; } displayCollectionTitleOnScenesInHierarchy public bool displayCollectionTitleOnScenesInHierarchy { get; set; } displayDynamicCollections public bool displayDynamicCollections { get; set; } displayExtraAddCollectionButton public bool displayExtraAddCollectionButton { get; set; } displayPersistentIndicatorInHierarchy public bool displayPersistentIndicatorInHierarchy { get; set; } displaySceneHelperDragButton public bool displaySceneHelperDragButton { get; set; } openAssociatedCollectionOnSceneAssetOpen When true : opens the first found collection that a scene is contained in when opening an SceneAsset in editor. public bool openAssociatedCollectionOnSceneAssetOpen { get; set; } saveActionWhenUsingASMPlayButton public ASMSettings.Local.SaveAction saveActionWhenUsingASMPlayButton { get; set; } useSaveDialogWhenCreatingScenesFromSceneField public bool useSaveDialogWhenCreatingScenesFromSceneField { get; set; } Methods Get<T>(T, String) Gets a value from local storage. public T Get<T>(T defaultValue = null, string key = \"\") Set<T>(T, String) Sets a value from local storage. public void Set<T>(T value, string key = \"\")"
  },
  "api/AdvancedSceneManager.Models.ASMSettings.Local.SaveAction.html": {
    "href": "api/AdvancedSceneManager.Models.ASMSettings.Local.SaveAction.html",
    "title": "ASMSettings.Local.SaveAction | Advanced Scene Manager",
    "keywords": "ASMSettings.Local.SaveAction Fields Name Description DoNothing Prompt Save"
  },
  "api/AdvancedSceneManager.Models.ASMSettings.SettingsProxy.html": {
    "href": "api/AdvancedSceneManager.Models.ASMSettings.SettingsProxy.html",
    "title": "ASMSettings.SettingsProxy | Advanced Scene Manager",
    "keywords": "ASMSettings.SettingsProxy Used to make settings a bit more intuitive. Inheritance Object ASMSettings.SettingsProxy Properties local The local asm settings, not synced to source. public ASMSettings.Local local { get; } profile The profile-wide asm settings. public Profile profile { get; } project The project-wide asm settings. public ASMSettings project { get; }"
  },
  "api/AdvancedSceneManager.Models.CollectionStartupOption.html": {
    "href": "api/AdvancedSceneManager.Models.CollectionStartupOption.html",
    "title": "CollectionStartupOption | Advanced Scene Manager",
    "keywords": "CollectionStartupOption Fields Name Description Auto DoNotOpen Open OpenAsPersistent"
  },
  "api/AdvancedSceneManager.Models.CollectionThreadPriority.html": {
    "href": "api/AdvancedSceneManager.Models.CollectionThreadPriority.html",
    "title": "CollectionThreadPriority | Advanced Scene Manager",
    "keywords": "CollectionThreadPriority Wrapper for UnityEngine.ThreadPriority , adds Auto . UnityEngine.ThreadPriority : Fields Name Description Auto Automatically decide UnityEngine.ThreadPriority based on if loading screen is open. BelowNormal High Low Normal"
  },
  "api/AdvancedSceneManager.Models.DynamicCollection.html": {
    "href": "api/AdvancedSceneManager.Models.DynamicCollection.html",
    "title": "DynamicCollection | Advanced Scene Manager",
    "keywords": "DynamicCollection Represents a dynamic collection. Inheritance Object DynamicCollection Fields isAuto public bool isAuto scenes public List<string> scenes title public string title"
  },
  "api/AdvancedSceneManager.Models.html": {
    "href": "api/AdvancedSceneManager.Models.html",
    "title": "AdvancedSceneManager.Models | Advanced Scene Manager",
    "keywords": "AdvancedSceneManager.Models Classes ASMSettings Settings relating to ASM. ASMSettings.Local ASMSettings.SettingsProxy Used to make settings a bit more intuitive. DynamicCollection Represents a dynamic collection. Profile A profile, contains settings, collections and scenes. Scene A Scene is a UnityEngine.ScriptableObject that represents a scene in Unity, and are automatically generated or updated when a scene is added, renamed, moved or removed. The advantage of doing it this way is that we can actually create variables in script that refers to a scene rather than an arbitrary int or magic string. This also allows us to open scenes directly from an UnityEngine.Events.UnityEvent and not have to use a proxy script. SceneCollection A SceneCollection contains a list of Scene , all of which are opened when the SceneCollection is opened (except for scenes tagged DoNotOpen). SceneCollectionTemplate Represents a template for a SceneCollection . SceneTag A layer that makes it easier to identify certain scenes. TagList Structs IsOpenReturnValue A struct to make working with the return value of the IsOpen() function a bit easier. Implicitly casts to bool, which can be used to check if scene is open in either. Interfaces ISceneObject Identifies either SceneCollection or Scene . Enums ASMSettings.Local.SaveAction CollectionStartupOption CollectionThreadPriority Wrapper for UnityEngine.ThreadPriority , adds Auto . UnityEngine.ThreadPriority : LoadingScreenUsage SceneCloseBehavior SceneOpenBehavior"
  },
  "api/AdvancedSceneManager.Models.ISceneObject.html": {
    "href": "api/AdvancedSceneManager.Models.ISceneObject.html",
    "title": "ISceneObject | Advanced Scene Manager",
    "keywords": "ISceneObject Identifies either SceneCollection or Scene . Methods OnPropertyChanged() void OnPropertyChanged()"
  },
  "api/AdvancedSceneManager.Models.IsOpenReturnValue.html": {
    "href": "api/AdvancedSceneManager.Models.IsOpenReturnValue.html",
    "title": "IsOpenReturnValue | Advanced Scene Manager",
    "keywords": "IsOpenReturnValue A struct to make working with the return value of the IsOpen() function a bit easier. Implicitly casts to bool, which can be used to check if scene is open in either. Fields asStandalone The scene was opened as standalone. public bool asStandalone isPreloaded The scene is currently preloaded. public bool isPreloaded withCollection The scene was opened as part of a collection. public bool withCollection Operators Implicit(IsOpenReturnValue to Boolean) public static implicit operator bool (IsOpenReturnValue value) Implicit((Boolean withCollection, Boolean asStandalone, Boolean isPreloaded) to IsOpenReturnValue) public static implicit operator IsOpenReturnValue((bool withCollection, bool asStandalone, bool isPreloaded) value) Implicit((Boolean withCollection, Boolean asStandalone) to IsOpenReturnValue) public static implicit operator IsOpenReturnValue((bool withCollection, bool asStandalone) value)"
  },
  "api/AdvancedSceneManager.Models.LoadingScreenUsage.html": {
    "href": "api/AdvancedSceneManager.Models.LoadingScreenUsage.html",
    "title": "LoadingScreenUsage | Advanced Scene Manager",
    "keywords": "LoadingScreenUsage Fields Name Description DoNotUse Override UseDefault"
  },
  "api/AdvancedSceneManager.Models.Profile.html": {
    "href": "api/AdvancedSceneManager.Models.Profile.html",
    "title": "Profile | Advanced Scene Manager",
    "keywords": "Profile A profile, contains settings, collections and scenes. Inheritance Object UnityEngine.Object UnityEngine.ScriptableObject Profile Fields tagDefinitions The layers defined in the tags tab in the scene manager window. public SceneTag[] tagDefinitions Properties backgroundLoadingPriority UnityEngine.Application.backgroundLoadingPriority setting is not saved, and must be manually set every time build or editor starts, this property persists the value and automatically sets it during startup. public ThreadPriority backgroundLoadingPriority { get; set; } blacklist The blacklist settings. public SettingsModule blacklist { get; } Remarks Only available in editor. collections Gets the collections contained within this profile. public ReadOnlyCollection<SceneCollection> collections { get; } createCameraDuringStartup Enable or disable ASM automatically creating a camera during startup. public bool createCameraDuringStartup { get; set; } current Gets the currently active profile. public static Profile current { get; set; } dynamicCollectionPaths The paths of which all scenes should be included in build, as a dynamic collection. public string[] dynamicCollectionPaths { get; } Remarks These are only evaluated and used in BuildSettingsUtility . dynamicCollections Gets the dynamic collections specified on this profile. public DynamicCollection[] dynamicCollections { get; } enableChangingBackgroundLoadingPriority Enable or disable ASM automatically changing UnityEngine.Application.backgroundLoadingPriority . public bool enableChangingBackgroundLoadingPriority { get; set; } includeFadeLoadingScene Enables the fade loading scene. public bool includeFadeLoadingScene { get; set; } Remarks Has no effect while in play mode. loadingScreen The default loading screen. public Scene loadingScreen { get; set; } name public string name { get; } scenePaths Gets the scenes managed by this profile. public IEnumerable<string> scenePaths { get; } Remarks Includes both collection and standalone scenes. scenes Gets the scenes managed by this profile. public IEnumerable<Scene> scenes { get; } Remarks Includes both collection and standalone scenes. splashScreen The splash screen. public Scene splashScreen { get; set; } startupLoadingScreen The loading screen to use during startup. public Scene startupLoadingScreen { get; set; } startupScene The startup scene. public Scene startupScene { get; set; } useDefaultPauseScreen Enables the default pause screen. public bool useDefaultPauseScreen { get; set; } Remarks Has no effect while in play mode. Methods Add(Scene, String, Boolean) Adds a scene to a dynamic collection on this profile. public void Add(Scene scene, string collectionTitle = \"\", bool updateBuildSettings = true) Remarks Only available in editor. Add(SceneCollection) Adds a collection to this profile. public void Add(SceneCollection collection) Remarks Only available in editor. Clear(String, Boolean, Boolean) Clears a dynamic collection. public void Clear(string collectionTitle, bool save = true, bool updateBuildSettings = true) Remarks Only available in editor. CreateCollection(String, Action<SceneCollection>) Create a collection and add it to this profile. public SceneCollection CreateCollection(string name, Action<SceneCollection> initializeBeforeSave = null) Remarks Only available in editor. Delete() public void Delete() Find(Func<Profile, Boolean>) public static Profile Find(Func<Profile, bool> predicate) Find(String) public static Profile Find(string name) FindAll() public static Profile[] FindAll() IsSet(String, Boolean) Gets if the scene is added in a dynamic collection. public bool IsSet(string scene, bool includeStandalone = true) IsSet(String, String) Gets if the scene is added in a dynamic collection. public bool IsSet(string key, string scene) MarkAsDirty() Mark scriptable object as dirty after modifying. public void MarkAsDirty() Remarks No effect in build. Order(SceneCollection) Returns the order of this collection. public int Order(SceneCollection collection) Order(SceneCollection, Nullable<Int32>) Returns and/or sets the order of this collection in the scene manager window. public int Order(SceneCollection collection, int? newIndex = null) Remarks Cannot use in build. Remove(Scene, String, Boolean) Removes the scene from the specified dynamic collection. public void Remove(Scene scene, string collectionTitle = \"\", bool updateBuildSettings = true) Remarks Only available in editor. Remove(SceneCollection) Removes a collection from this profile. public void Remove(SceneCollection collection) Remarks Only available in editor. StartupCollections() Gets the collections that will be opened on startup. public IEnumerable<SceneCollection> StartupCollections() Remarks If no collection is explicitly defined to be opened during startup, then the first available collection in list will be returned. Events onProfileChanged public static event Action onProfileChanged PropertyChanged public event PropertyChangedEventHandler PropertyChanged Extension Methods ScriptableObjectUtility.Save(ScriptableObject)"
  },
  "api/AdvancedSceneManager.Models.Scene.html": {
    "href": "api/AdvancedSceneManager.Models.Scene.html",
    "title": "Scene | Advanced Scene Manager",
    "keywords": "Scene A Scene is a UnityEngine.ScriptableObject that represents a scene in Unity, and are automatically generated or updated when a scene is added, renamed, moved or removed. The advantage of doing it this way is that we can actually create variables in script that refers to a scene rather than an arbitrary int or magic string. This also allows us to open scenes directly from an UnityEngine.Events.UnityEvent and not have to use a proxy script. Inheritance Object UnityEngine.Object UnityEngine.ScriptableObject Scene Implements ISceneObject Properties assetID The id of the asset in the asset database. Automatically updated. public string assetID { get; } isActive Gets if this scene is currently active. public bool isActive { get; } isIncluded Gets whatever this scene is included in build, this would be if the scene is contained in a collection, or if it is used as a splash screen / loading screen. public bool isIncluded { get; } name public string name { get; } Remarks See also: assetManagement .Rename(). path The path to the scene file, relative to the project folder. Automatically updated. public string path { get; } Methods Close() Closes a scene regardless of whatever it is associated with a collection, or is was opened as stand-alone. public SceneOperation Close() CloseEvent() public void CloseEvent() Equals(OpenSceneInfo) public bool Equals(OpenSceneInfo scene) Equals(Scene) public bool Equals(Scene scene) Equals(Nullable<Scene>) public bool Equals(Scene? scene) Equals(Object) public override bool Equals(object other) Overrides UnityEngine.Object.Equals(System.Object) Equals(SceneAsset) public bool Equals(SceneAsset scene) Equals(Scene) public bool Equals(Scene scene) Find(String, SceneCollection, Profile) Finds the scene with the specified name. public static Scene Find(string name, SceneCollection inCollection = null, Profile inProfile = null) FindAll(String, SceneCollection, Profile) Finds the scenes with the specified name. public static IEnumerable<Scene> FindAll(string name, SceneCollection inCollection = null, Profile inProfile = null) FindCollections(Profile) Finds which collections that this scene is a part of. public (SceneCollection collection, bool asLoadingScreen)[] FindCollections(Profile profile) FindCollections(Boolean) Finds which collections that this scene is a part of. public (SceneCollection collection, bool asLoadingScreen)[] FindCollections(bool allProfiles = false) FindObject<T>() Finds the object in the heirarchy of this Scene . public T FindObject<T>() where T : Component Remarks Only works if scene is loaded. FindObjects<T>() Finds the objects in the heirarchy of this Scene . public IEnumerable<T> FindObjects<T>() where T : Component Remarks Only works if scene is loaded. GetHashCode() public override int GetHashCode() Overrides UnityEngine.Object.GetHashCode() GetOpenSceneInfo() Finds the first open instance of this Scene , if it is open. public OpenSceneInfo GetOpenSceneInfo() GetRootGameObjects() Gets the root game objects in this Scene , only works if scene is loaded. public IEnumerable<GameObject> GetRootGameObjects() IsOpen() Gets whatever the scene is open, either as part of a collection, or as stand-alone. public IsOpenReturnValue IsOpen() OnOpen(Int32, Int32) [OnOpenAsset] public static bool OnOpen(int instanceID, int _) OnPropertyChanged() public void OnPropertyChanged() Open() public SceneOperation<OpenSceneInfo> Open() OpenEvent() public void OpenEvent() OpenSingle() Close existing scenes and open the specified one. public SceneOperation<OpenSceneInfo> OpenSingle() Remarks This will close the current collection. OpenSingleEvent() Close existing scenes and open the specified one. public void OpenSingleEvent() Remarks This will close the current collection. OpenWithLoadingScreenEvent(Scene) public void OpenWithLoadingScreenEvent(Scene loadingScene) Preload() Preloads the scene. public SceneOperation<PreloadedSceneHelper> Preload() Remarks Use FinishLoading() or AdvancedSceneManager.Core.SceneManagerBase.Open(AdvancedSceneManager.Models.Scene) to finish loading scene. Reopen() Reopen a scene regardless of whatever it is associated with a collection, or is was opened as stand-alone. public SceneOperation<OpenSceneInfo> Reopen() ReopenEvent() public void ReopenEvent() SetActiveScene() Sets a scene as the activate scene. public void SetActiveScene() Toggle() Toggles the scene open or closed, if the scene is part of the current collection, then the scene will be toggled within the collection, otherwise, it will be toggled as a stand-alone scene. public SceneOperation Toggle() Toggle(Boolean) Toggles the scene open or closed, if the scene is part of the current collection, then the scene will be toggled within the collection, otherwise, it will be toggled as a stand-alone scene. public SceneOperation Toggle(bool enabled) ToggleEvent() public void ToggleEvent() ToggleEvent(Boolean) public void ToggleEvent(bool enabled) Events PropertyChanged public event PropertyChangedEventHandler PropertyChanged Implements ISceneObject Extension Methods ScriptableObjectUtility.Save(ScriptableObject)"
  },
  "api/AdvancedSceneManager.Models.SceneCloseBehavior.html": {
    "href": "api/AdvancedSceneManager.Models.SceneCloseBehavior.html",
    "title": "SceneCloseBehavior | Advanced Scene Manager",
    "keywords": "SceneCloseBehavior Fields Name Description Close KeepOpenAlways KeepOpenIfNextCollectionAlsoContainsScene"
  },
  "api/AdvancedSceneManager.Models.SceneCollection.html": {
    "href": "api/AdvancedSceneManager.Models.SceneCollection.html",
    "title": "SceneCollection | Advanced Scene Manager",
    "keywords": "SceneCollection A SceneCollection contains a list of Scene , all of which are opened when the SceneCollection is opened (except for scenes tagged DoNotOpen). Inheritance Object UnityEngine.Object UnityEngine.ScriptableObject SceneCollection SceneCollectionTemplate Implements ISceneObject Remarks Only one SceneCollection can be open at a time. Properties activeScene Specifies the scene that should be activated after collection is opened. public Scene activeScene { get; set; } Count public int Count { get; } extraData The extra data that is associated with this collection. public ScriptableObject extraData { get; set; } Remarks Use ExtraData<T>() to cast it to the desired type. hasScenes Gets if this collection has any scenes. public bool hasScenes { get; } isIncluded Gets whatever this collection should be included in build. public bool isIncluded { get; set; } IsReadOnly Inherited from IReadOnlyList<T> , not to be confused with read-only functionality for collections (which does not currently exist, beyond locking plugin), this is just for enumeration. public bool IsReadOnly { get; } Item[Int32] public Scene this[int index] { get; } loadingPriority The thread priority to use when opening this collection. public CollectionThreadPriority loadingPriority { get; set; } loadingScreen The loading screen that is associated with this collection. public Scene loadingScreen { get; set; } loadingScreenUsage Specifies what loading screen to use. public LoadingScreenUsage loadingScreenUsage { get; set; } name public string name { get; } Remarks See also: assetManagement .Rename(). scenes Gets the scenes in this collection, note that some might be null if no reference is added in scene manager window. public Scene[] scenes { get; set; } startupOption Specifies startup option. public CollectionStartupOption startupOption { get; set; } title The title of this collection. public string title { get; } Remarks See also: assetManagement .Rename(). Methods AllScenePaths() Gets all scenes contained in this collection, including overriden loading screen, if set. public string[] AllScenePaths() AllScenes() Gets all scenes contained in this collection, including overriden loading screen, if set. public Scene[] AllScenes() Close() Closes the current collection. public SceneOperation Close() CloseEvent() Closes the current collection. public void CloseEvent() Contains(Scene) public bool Contains(Scene item) ExtraData<T>() Casts and returns extraData as the specified type. Returns null if invalid type. public T ExtraData<T>() where T : ScriptableObject Find(String, Boolean) Finds the SceneCollection with the specified name. public static SceneCollection Find(string title, bool onlyActiveProfile = true) FindProfile() Find the Profile that this collection is associated with. public Profile FindProfile() GetEnumerator() public IEnumerator<Scene> GetEnumerator() IsOpen() Gets whatever the collection is currently open. public bool IsOpen() OnPropertyChanged() Raises PropertyChanged . public void OnPropertyChanged() Remarks Only available in editor. Open() Opens the collection. public SceneOperation Open() OpenEvent() Opens the collection. public void OpenEvent() OpenOrReopen() Opens or reopens the collection, depending on whatever it is open or not. public SceneOperation OpenOrReopen() Reopen() Reopens the current collection. public SceneOperation Reopen() ReopenEvent() Reopens the current collection. public void ReopenEvent() Tag(Scene, SceneTag) public SceneTag Tag(Scene scene, SceneTag setTo = null) Toggle() Toggles the collection. public SceneOperation Toggle() Toggle(Boolean) Toggles the collection. public SceneOperation Toggle(bool enabled) ToggleEvent() Toggles the collection. public void ToggleEvent() ToggleEvent(Boolean) Toggles the collection. public void ToggleEvent(bool enabled) Events PropertyChanged Occurs when a property changes on this collection. public event PropertyChangedEventHandler PropertyChanged Remarks Only available in editor. Implements ISceneObject Extension Methods SceneCollectionUtility.Find(IEnumerable<Scene>, String) ScriptableObjectUtility.Save(ScriptableObject) ListUtility.ForEach<T>(IEnumerable<T>, Action<T, Int32>) ListUtility.Flatten<T>(IEnumerable<T>, Func<T, IEnumerable<T>>) ListUtility.Except<T>(IEnumerable<T>, T) ListUtility.GroupConsecutive<T>(IEnumerable<T>, Func<T, T, Boolean>)"
  },
  "api/AdvancedSceneManager.Models.SceneCollectionTemplate.html": {
    "href": "api/AdvancedSceneManager.Models.SceneCollectionTemplate.html",
    "title": "SceneCollectionTemplate | Advanced Scene Manager",
    "keywords": "SceneCollectionTemplate Represents a template for a SceneCollection . Inheritance Object UnityEngine.Object UnityEngine.ScriptableObject SceneCollection SceneCollectionTemplate Implements ISceneObject Properties name public string name { get; } Remarks See also: assetManagement .Rename(). title The title of this collection. public string title { get; set; } Remarks See also: assetManagement .Rename(). Methods Apply(SceneCollection) Applies a SceneCollectionTemplate on this SceneCollection . public void Apply(SceneCollection collection) Remarks Only available in editor. Not reversible. CreateCollection(Profile) Creates a SceneCollection from this SceneCollectionTemplate . public SceneCollection CreateCollection(Profile profile) Remarks Only available in editor. CreateTemplate(String, SceneCollection) Creates SceneCollectionTemplate from the specified SceneCollection . public static SceneCollectionTemplate CreateTemplate(string path, SceneCollection collection) Remarks Only available in editor. CreateTemplateInCurrentFolder(SceneCollection) Creates SceneCollectionTemplate from the specified SceneCollection , using the currently open folder in the project view. public static SceneCollectionTemplate CreateTemplateInCurrentFolder(SceneCollection collection) Remarks Only available in editor. Implements ISceneObject Extension Methods SceneCollectionUtility.Find(IEnumerable<Scene>, String) ScriptableObjectUtility.Save(ScriptableObject) ListUtility.ForEach<T>(IEnumerable<T>, Action<T, Int32>) ListUtility.Flatten<T>(IEnumerable<T>, Func<T, IEnumerable<T>>) ListUtility.Except<T>(IEnumerable<T>, T) ListUtility.GroupConsecutive<T>(IEnumerable<T>, Func<T, T, Boolean>)"
  },
  "api/AdvancedSceneManager.Models.SceneOpenBehavior.html": {
    "href": "api/AdvancedSceneManager.Models.SceneOpenBehavior.html",
    "title": "SceneOpenBehavior | Advanced Scene Manager",
    "keywords": "SceneOpenBehavior Fields Name Description DoNotOpenInCollection OpenNormally"
  },
  "api/AdvancedSceneManager.Models.SceneTag.html": {
    "href": "api/AdvancedSceneManager.Models.SceneTag.html",
    "title": "SceneTag | Advanced Scene Manager",
    "keywords": "SceneTag A layer that makes it easier to identify certain scenes. Inheritance Object SceneTag Constructors SceneTag() [Obsolete] public SceneTag() SceneTag(String, Nullable<Color>, String) public SceneTag(string title, Color? color = null, string id = null) Fields closeBehavior Specifies how the scene should behave when a SceneCollection is closed. public SceneCloseBehavior closeBehavior color public Color color Default public static readonly SceneTag Default DoNotOpen public static readonly SceneTag DoNotOpen id public string id label public string label name public string name openBehavior Specifies how the scene should behave when a SceneCollection is opened. public SceneOpenBehavior openBehavior Persistent public static readonly SceneTag Persistent PersistIfRequired public static readonly SceneTag PersistIfRequired Methods Equals(SceneTag) public bool Equals(SceneTag layer) Equals(Object) public override bool Equals(object other) Overrides Object.Equals(Object) Find(String) public static SceneTag Find(string id) GetHashCode() public override int GetHashCode() Overrides Object.GetHashCode() ToString() public override string ToString() Overrides Object.ToString() Operators Equality(SceneTag, SceneTag) public static bool operator ==(SceneTag left, SceneTag right) Inequality(SceneTag, SceneTag) public static bool operator !=(SceneTag left, SceneTag right)"
  },
  "api/AdvancedSceneManager.Models.TagList.html": {
    "href": "api/AdvancedSceneManager.Models.TagList.html",
    "title": "TagList | Advanced Scene Manager",
    "keywords": "TagList Inheritance Object Dictionary < String , String > SerializableDictionary < String , String > TagList Properties Item[Scene] public SceneTag this[Scene scene] { get; set; } Item[String] public SceneTag this[string path] { get; set; } Methods TryGetValue(Scene, out SceneTag) public bool TryGetValue(Scene scene, out SceneTag layer) TryGetValue(String, out SceneTag) public bool TryGetValue(string path, out SceneTag layer) Extension Methods DictionaryUtility.WithNullKey<TKey, TValue>(Dictionary<TKey, TValue>, TKey) DictionaryUtility.Set<TKey, TValue>(Dictionary<TKey, TValue>, TKey, TValue) DictionaryUtility.EnsureAdded<TKey, TValue>(Dictionary<TKey, TValue>, TKey) DictionaryUtility.Add<TKey, TValue>(Dictionary<TKey, TValue>, TKey, TValue) DictionaryUtility.GetValue<TKey, TValue>(Dictionary<TKey, TValue>, TKey, TValue) ListUtility.ForEach<T>(IEnumerable<T>, Action<T, Int32>) ListUtility.Flatten<T>(IEnumerable<T>, Func<T, IEnumerable<T>>) ListUtility.Except<T>(IEnumerable<T>, T) ListUtility.GroupConsecutive<T>(IEnumerable<T>, Func<T, T, Boolean>)"
  },
  "api/AdvancedSceneManager.SceneManager.html": {
    "href": "api/AdvancedSceneManager.SceneManager.html",
    "title": "SceneManager | Advanced Scene Manager",
    "keywords": "SceneManager The core of Advanced Scene Manager, provides access to the following: assetManagement , provides an overview over all scenes and collections in project and contains functions to manage them. runtime , manages startup and quit processes of the game. profile , the current profile, which contains your collections. settings , settings of the scene manager that isn't stored in the profile. Scene managers: collection , contains functions to open or close collections or manage collection scenes. standalone , contains functions to manage scenes that are not associated with the currently active collection. utility , contains functions to manage scenes that may be open in either standalone or collection . editor , a simplified scene manager to manages scenes in editor. Only available in editor. Inheritance Object SceneManager Properties assetManagement Provides an overview over all scenes and collections in project and contains functions to manage them public static AssetManagement assetManagement { get; } collection Provides functions to open or close collections or manage collection scenes public static CollectionManager collection { get; } editor A simplified scene manager to manages scenes in editor. public static Editor editor { get; } Remarks Only available in editor. profile The currently active profile. public static Profile profile { get; } runtime Manages startup and quit processes of the game public static Runtime runtime { get; } settings ASM settings. public static ASMSettings.SettingsProxy settings { get; } standalone Provides functions to manage scenes outside that are not associated with the currently active collection public static StandaloneManager standalone { get; } utility Provides functions to manage scenes that may be open in either standalone or collection public static UtilitySceneManager utility { get; }"
  },
  "api/AdvancedSceneManager.Utility.ASM.html": {
    "href": "api/AdvancedSceneManager.Utility.ASM.html",
    "title": "ASM | Advanced Scene Manager",
    "keywords": "ASM This is SceneHelper , but we don't want the script to show up in object picker to avoid confusion, using a different name seems to be the only way? Inheritance Object UnityEngine.Object UnityEngine.ScriptableObject ASM Properties name public string name { get; } Methods Close(Scene) Closes a scene regardless of whatever it is associated with a collection, or is was opened as stand-alone. public void Close(Scene scene) CloseCollection() Closes the current collection. public void CloseCollection() DiscardPreload() Closes the scene. public void DiscardPreload() FindCollections(Scene) Finds the collections that are associated with this Scene . public (SceneCollection collection, bool asLoadingScreen)[] FindCollections(Scene scene) FinishPreload() Finishes loading scene. public void FinishPreload() IsOpen(Scene) Gets whatever the scene is open, either as part of a collection, or as stand-alone. public IsOpenReturnValue IsOpen(Scene scene) IsOpen(SceneCollection) Gets whatever the collection is currently open. public bool IsOpen(SceneCollection collection) Open(Scene) Opens a scene. public void Open(Scene scene) Remarks Throws a OpenSceneException if the scene cannot be opened by the current collection. Open(SceneCollection) public void Open(SceneCollection collection) OpenOrReopen(Scene) Opens the scene if not open, otherwise it will be reopened. public void OpenOrReopen(Scene scene) OpenOrReopenCollection(SceneCollection) Opens or reopens the collection, depending on whatever it is open or not. public void OpenOrReopenCollection(SceneCollection collection) OpenSingle(Scene) Close existing scenes and open the specified one. public void OpenSingle(Scene scene) Remarks This will close the current collection. OpenWhereNameStartsWith(String) Open all scenes that starts with the specified name. public void OpenWhereNameStartsWith(string name) Preload(Scene) public void Preload(Scene scene) Quit() public void Quit() Reopen(Scene) public void Reopen(Scene scene) ReopenCollection() Reopens the current collection. public void ReopenCollection() Restart() public void Restart() RestartCollection() Reopens the current collection. public void RestartCollection() SetActiveScene(Scene) Sets a scene as the activate scene. public void SetActiveScene(Scene scene) Toggle(Scene) public void Toggle(Scene scene) Toggle(Scene, Boolean) public void Toggle(Scene scene, bool enabled) Toggle(SceneCollection) Toggles the collection. public void Toggle(SceneCollection collection) Toggle(SceneCollection, Boolean) Toggles the collection. public void Toggle(SceneCollection collection, bool enabled) Extension Methods ScriptableObjectUtility.Save(ScriptableObject)"
  },
  "api/AdvancedSceneManager.Utility.CanvasGroupExtensions.html": {
    "href": "api/AdvancedSceneManager.Utility.CanvasGroupExtensions.html",
    "title": "CanvasGroupExtensions | Advanced Scene Manager",
    "keywords": "CanvasGroupExtensions Inheritance Object CanvasGroupExtensions Methods Fade(CanvasGroup, Single, Single, Boolean) Animates the alpha of a UnityEngine.CanvasGroup . public static IEnumerator Fade(this CanvasGroup group, float to, float duration, bool setBlocksRaycasts = true)"
  },
  "api/AdvancedSceneManager.Utility.CanvasSortOrderUtility.html": {
    "href": "api/AdvancedSceneManager.Utility.CanvasSortOrderUtility.html",
    "title": "CanvasSortOrderUtility | Advanced Scene Manager",
    "keywords": "CanvasSortOrderUtility An utility class to manage sort order on canvases. Inheritance Object CanvasSortOrderUtility Methods MakeSure(Canvas, Canvas, Canvas) Adds a contraint on the sort order of this UnityEngine.Canvas based on one or two other canvases. See parameter comments for more info. public static void MakeSure(this Canvas canvas, Canvas above = null, Canvas below = null) PutAtBottom(Canvas) Sets the sort order on this canvas to be on bottom of all other canvases managed by CanvasSortOrderUtility . public static void PutAtBottom(this Canvas canvas) PutOnTop(Canvas) Sets the sort order on this canvas to be on top of all other canvases managed by CanvasSortOrderUtility . public static void PutOnTop(this Canvas canvas) Remove(Canvas) Removes this canvas from the managed list. public static void Remove(Canvas canvas)"
  },
  "api/AdvancedSceneManager.Utility.DefaultSceneUtility.html": {
    "href": "api/AdvancedSceneManager.Utility.DefaultSceneUtility.html",
    "title": "DefaultSceneUtility | Advanced Scene Manager",
    "keywords": "DefaultSceneUtility An utility class that manages the default scene, called 'AdvancedSceneManager'. The default scene allows us to more easily close all scenes when we need to, since unity requires at least one scene to be open at any time. Inheritance Object DefaultSceneUtility Fields Name public const string Name = \"AdvancedSceneManager\" Methods IsDefaultScene(Scene) Gets whatever the specified scene is the default scene. public static bool IsDefaultScene(Scene scene)"
  },
  "api/AdvancedSceneManager.Utility.DictionaryUtility.html": {
    "href": "api/AdvancedSceneManager.Utility.DictionaryUtility.html",
    "title": "DictionaryUtility | Advanced Scene Manager",
    "keywords": "DictionaryUtility Inheritance Object DictionaryUtility Methods Add<TKey, TValue>(Dictionary<TKey, TValue>, TKey, TValue) Adds or sets the value of a key. public static void Add<TKey, TValue>(this Dictionary<TKey, TValue> d, TKey key, TValue value) Add<TKey, TList, TItem>(Dictionary<TKey, TList>, TKey, TItem) Adds the value to the list with the specified key. Creates list automatically if null and adds key if necessary. public static void Add<TKey, TList, TItem>(this Dictionary<TKey, TList> d, TKey key, TItem item) where TList : IList<TItem>, new() AddRange<TKey, TList, TItem>(Dictionary<TKey, TList>, TKey, TItem[]) Adds the values to the list with the specified key. Creates list automatically if null and adds key if necessary. public static void AddRange<TKey, TList, TItem>(this Dictionary<TKey, TList> d, TKey key, params TItem[] items) where TList : IList<TItem>, new() AddRange<TKey, TList, TItem>(Dictionary<TKey, TList>, TKey, IEnumerable<TItem>) Adds the values to the list with the specified key. Creates list automatically if null and adds key if necessary. public static void AddRange<TKey, TList, TItem>(this Dictionary<TKey, TList> d, TKey key, IEnumerable<TItem> items) where TList : IList<TItem>, new() EnsureAdded<TKey, TValue>(Dictionary<TKey, TValue>, TKey) public static void EnsureAdded<TKey, TValue>(this Dictionary<TKey, TValue> d, TKey key) GetValue<TKey, TValue>(Dictionary<TKey, TValue>, TKey, TValue) Gets the value of the specified key, returns default if it does not exist. public static TValue GetValue<TKey, TValue>(this Dictionary<TKey, TValue> d, TKey key, TValue defaultValue = null) Remove<TKey, TList, TItem>(Dictionary<TKey, TList>, TKey, TItem) Removes the value to the list with the specified key. public static void Remove<TKey, TList, TItem>(this Dictionary<TKey, TList> d, TKey key, TItem value) where TList : IList<TItem>, new() Set<TKey, TValue>(Dictionary<TKey, TValue>, TKey, TValue) public static TValue Set<TKey, TValue>(this Dictionary<TKey, TValue> d, TKey key, TValue value) WithNullKey<TKey, TValue>(Dictionary<TKey, TValue>, TKey) public static Dictionary<TKey, TValue> WithNullKey<TKey, TValue>(this Dictionary<TKey, TValue> d, TKey nullKey)"
  },
  "api/AdvancedSceneManager.Utility.GuidReference.Editor.html": {
    "href": "api/AdvancedSceneManager.Utility.GuidReference.Editor.html",
    "title": "GuidReference.Editor | Advanced Scene Manager",
    "keywords": "GuidReference.Editor Inheritance Object UnityEngine.Object UnityEngine.ScriptableObject UnityEditor.Editor GuidReference.Editor Methods OnInspectorGUI() public override void OnInspectorGUI() Overrides UnityEditor.Editor.OnInspectorGUI() UseDefaultMargins() public override bool UseDefaultMargins() Overrides UnityEditor.Editor.UseDefaultMargins() Extension Methods ScriptableObjectUtility.Save(ScriptableObject)"
  },
  "api/AdvancedSceneManager.Utility.GuidReference.html": {
    "href": "api/AdvancedSceneManager.Utility.GuidReference.html",
    "title": "GuidReference | Advanced Scene Manager",
    "keywords": "GuidReference Inheritance Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour GuidReference Fields guid public string guid Extension Methods SceneUtility.Scene(Component)"
  },
  "api/AdvancedSceneManager.Utility.GuidReferenceUtility.html": {
    "href": "api/AdvancedSceneManager.Utility.GuidReferenceUtility.html",
    "title": "GuidReferenceUtility | Advanced Scene Manager",
    "keywords": "GuidReferenceUtility An utility for referencing objects globally. Inheritance Object GuidReferenceUtility Methods AddPersistent(GameObject) Adds a persistent reference to this UnityEngine.GameObject . public static string AddPersistent(GameObject obj) Remarks Only usable in editor. AddRuntime(Object) Adds a reference to the object, returns the id that will be used to find it again. public static string AddRuntime(Object obj) Find(String) Finds a reference if it exists. public static Object Find(string id) Find(String, Action<Object>) Finds a reference if it exists. public static IEnumerator Find(string id, Action<Object> callback) Find<T>(String) Finds a reference if it exists. public static T Find<T>(string id) where T : Object FindPersistent(String) Finds the persistent reference in the currently open scenes. public static GameObject FindPersistent(string guid) GenerateID() Generates an id. public static string GenerateID() Remarks Uses https://blog.codinghorror.com/equipping-our-ascii-armor . GetOrAddPersistent(GameObject) Adds a persistent reference to this UnityEngine.GameObject . public static string GetOrAddPersistent(GameObject obj) Remarks Can only add in editor, returns null otherwise. HasReference(String) Gets if reference exists. public static bool HasReference(string id) RemovePersistent(GameObject, Boolean) Removes a persistent reference to this UnityEngine.GameObject . public static void RemovePersistent(GameObject obj, bool saveScene) Remarks Only usable in editor. RemoveRuntime(String) Removes the reference to the object with this id. public static void RemoveRuntime(string id) RemoveRuntime(Object) Removes the reference to this object. public static void RemoveRuntime(Object obj) TryFind(String, out Object) Tries to find the reference. public static Object TryFind(string id, out Object obj) TryFind<T>(String, out T) Gets if reference exists. public static bool TryFind<T>(string id, out T obj) where T : Object TryFindPersistent(String, out GameObject) Finds the persistent reference in the currently open scenes. public static bool TryFindPersistent(string guid, out GameObject obj)"
  },
  "api/AdvancedSceneManager.Utility.html": {
    "href": "api/AdvancedSceneManager.Utility.html",
    "title": "AdvancedSceneManager.Utility | Advanced Scene Manager",
    "keywords": "AdvancedSceneManager.Utility Classes ASM This is SceneHelper , but we don't want the script to show up in object picker to avoid confusion, using a different name seems to be the only way? CanvasGroupExtensions CanvasSortOrderUtility An utility class to manage sort order on canvases. DefaultSceneUtility An utility class that manages the default scene, called 'AdvancedSceneManager'. The default scene allows us to more easily close all scenes when we need to, since unity requires at least one scene to be open at any time. DictionaryUtility GuidReference GuidReference.Editor GuidReferenceUtility An utility for referencing objects globally. InGameToolbarUtility Provides an in-game toolbar that makes debugging scene management in build easier. LerpUtility Provides some convinience functions for lerping. LoadingScreenUtility Manager for loading screens. PauseScreenUtility Contains functions for interacting with the default pause screen. PersistentUtility Manages persistent scenes. PreloadedSceneHelper An helper class to make working with preloaded scenes easier, contains method for finish loading and discarding preloaded scene. QueueUtility<T> A utility that provides queuing. SceneCollectionUtility An utility class to perform actions on collections. SceneDataUtility A utility for storing scene related data. Data can only be saved to disk in editor. SceneHelper An helper for opening and closing scenes or scene collections. Most common use case would be to open / close scenes or scene collections from UnityEngine.Events.UnityEvent . SceneUtility An utility class to perform actions on scenes. ScriptableObjectUtility Contains utility methods for UnityEngine.ScriptableObject . SerializableDictionary<TKey, TValue> A serializable dictionary. SerializableStringBoolDict TimeSpanUtility Interfaces IQueueable Represents a queueable item."
  },
  "api/AdvancedSceneManager.Utility.InGameToolbarUtility.html": {
    "href": "api/AdvancedSceneManager.Utility.InGameToolbarUtility.html",
    "title": "InGameToolbarUtility | Advanced Scene Manager",
    "keywords": "InGameToolbarUtility Provides an in-game toolbar that makes debugging scene management in build easier. Inheritance Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour InGameToolbarUtility Remarks Only activates in editor and developer builds, and is disabled in non dev build. Properties expandedByDefault public static bool expandedByDefault { get; set; } isEnabled public static bool isEnabled { get; set; } isEnabledInEditor Enables or disables InGameToolbarUtility in editor. public static bool isEnabledInEditor { get; set; } Extension Methods SceneUtility.Scene(Component)"
  },
  "api/AdvancedSceneManager.Utility.IQueueable.html": {
    "href": "api/AdvancedSceneManager.Utility.IQueueable.html",
    "title": "IQueueable | Advanced Scene Manager",
    "keywords": "IQueueable Represents a queueable item. Remarks See also QueueUtility<T> . Methods OnCancel() Called when queueable is cancelled. void OnCancel() OnTurn(Action) Called when it is this queueables turn. void OnTurn(Action onComplete)"
  },
  "api/AdvancedSceneManager.Utility.LerpUtility.html": {
    "href": "api/AdvancedSceneManager.Utility.LerpUtility.html",
    "title": "LerpUtility | Advanced Scene Manager",
    "keywords": "LerpUtility Provides some convinience functions for lerping. Inheritance Object LerpUtility Methods Lerp(Single, Single, Single, Action<Single>, Action) Lerp from start to end over duration seconds. public static IEnumerator Lerp(float start, float end, float duration, Action<float> callback, Action onComplete = null) Lerp(Vector2, Vector2, Single, Action<Vector2>, Action) Lerp from start to end over duration seconds. public static IEnumerator Lerp(Vector2 start, Vector2 end, float duration, Action<Vector2> callback, Action onComplete = null) Lerp(Vector3, Vector3, Single, Action<Vector3>, Action) Lerp from start to end over duration seconds. public static IEnumerator Lerp(Vector3 start, Vector3 end, float duration, Action<Vector3> callback, Action onComplete = null)"
  },
  "api/AdvancedSceneManager.Utility.LoadingScreenUtility.html": {
    "href": "api/AdvancedSceneManager.Utility.LoadingScreenUtility.html",
    "title": "LoadingScreenUtility | Advanced Scene Manager",
    "keywords": "LoadingScreenUtility Manager for loading screens. Inheritance Object LoadingScreenUtility Properties fade Finds the default fade loading screen. Will be null if not included in build. public static Scene fade { get; } IsAnyLoadingScreenOpen Gets if any loading screens are open. public static bool IsAnyLoadingScreenOpen { get; } loadingScreens The currently open loading screens. public static ReadOnlyCollection<LoadingScreen> loadingScreens { get; } Methods CloseAll() Hide all loading screens. public static SceneOperation CloseAll() CloseLoadingScreen(LoadingScreen) Hide the loading screen. public static SceneOperation CloseLoadingScreen(LoadingScreen loadingScreen) CloseLoadingScreen(Scene) Hide the loading screen. public static SceneOperation CloseLoadingScreen(Scene scene) DoAction(Scene, Action, Action<LoadingScreen>) Opens loading screen, performs action and hides loading screen again. public static SceneOperation DoAction(Scene scene, Action action, Action<LoadingScreen> loadingScreenCallback) DoAction(Scene, Func<IEnumerator>, Action<LoadingScreen>) Opens loading screen, performs action and hides loading screen again. public static SceneOperation DoAction(Scene scene, Func<IEnumerator> coroutine, Action<LoadingScreen> loadingScreenCallback) Remarks Throws OpenSceneException if scene is null. DoActionWithFade(Action, Single, Nullable<Color>) Fades screen out, performs action and fades in again. public static SceneOperation DoActionWithFade(Action action, float duration = 1F, Color? color = null) DoActionWithFade(Func<IEnumerator>, Single, Nullable<Color>) Fades screen out, performs action and fades in again. public static SceneOperation DoActionWithFade(Func<IEnumerator> action, float duration = 1F, Color? color = null) FadeIn(LoadingScreen, Single, Nullable<Color>) Fades in the screen. public static SceneOperation FadeIn(LoadingScreen loadingScreen, float duration = 1F, Color? color = null) FadeOut(Single, Nullable<Color>) Fades out the screen. public static SceneOperation<LoadingScreen> FadeOut(float duration = 1F, Color? color = null) FindLoadingScreen(SceneCollection) Find the loading screen that is associated with this collection. public static Scene FindLoadingScreen(SceneCollection collection) IsLoadingScreenOpen(OpenSceneInfo) Gets if this scene is a loading screen. public static bool IsLoadingScreenOpen(OpenSceneInfo scene) IsLoadingScreenOpen(Scene) Gets if this scene is a loading screen. public static bool IsLoadingScreenOpen(Scene scene) IsLoadingScreenOpen(Scene) Gets if this scene is a loading screen. public static bool IsLoadingScreenOpen(Scene scene) OpenLoadingScreen(Scene, Nullable<Single>, Action<LoadingScreen>, String) Shows a loading screen. public static SceneOperation<LoadingScreen> OpenLoadingScreen(Scene scene, float? timeout = null, Action<LoadingScreen> callbackBeforeBegin = null, string typeName = null) OpenLoadingScreen(SceneCollection, Nullable<Single>, Action<LoadingScreen>) Shows the loading screen associated with this collection. public static SceneOperation<LoadingScreen> OpenLoadingScreen(SceneCollection collection, float? timeout = null, Action<LoadingScreen> callbackBeforeBegin = null) OpenLoadingScreen<T>(Scene, Nullable<Single>, Action<T>, String) Shows a loading screen. public static SceneOperation<T> OpenLoadingScreen<T>(Scene scene, float? timeout = null, Action<T> callbackBeforeBegin = null, string typeName = null) where T : LoadingScreen"
  },
  "api/AdvancedSceneManager.Utility.PauseScreenUtility.html": {
    "href": "api/AdvancedSceneManager.Utility.PauseScreenUtility.html",
    "title": "PauseScreenUtility | Advanced Scene Manager",
    "keywords": "PauseScreenUtility Contains functions for interacting with the default pause screen. Inheritance Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour PauseScreenUtility Fields canvasGroup public CanvasGroup canvasGroup quit public Button quit restartCollection public Button restartCollection restartGame public Button restartGame resume public Button resume Properties isOpen Gets if the pause screen is currently open. public static bool isOpen { get; } Methods Begin() public IEnumerator Begin() End() public IEnumerator End() Hide(Boolean) Hides the pause screen. public static void Hide(bool ignoreAnimations = false) ListenForKey() Starts listening keys and opens pause screen when keys pressed. public static void ListenForKey() Quit() public void Quit() RestartCollection() public void RestartCollection() RestartGame() public void RestartGame() Resume() public void Resume() Show() Shows the pause screen. public static void Show() StopListening() Stops listening for keys, this will disable pause screen. (Manually calling Show() will still work though) public static void StopListening() Toggle() Toggles the pause screen on / off. public static void Toggle() Extension Methods SceneUtility.Scene(Component)"
  },
  "api/AdvancedSceneManager.Utility.PersistentUtility.html": {
    "href": "api/AdvancedSceneManager.Utility.PersistentUtility.html",
    "title": "PersistentUtility | Advanced Scene Manager",
    "keywords": "PersistentUtility Manages persistent scenes. Inheritance Object PersistentUtility Methods GetPersistentOption(Scene) Gets the persistent option that is set for this UnityEngine.SceneManagement.Scene . public static SceneCloseBehavior GetPersistentOption(Scene scene) Set(Scene, SceneCloseBehavior) Set SceneCloseBehavior for this scene. public static void Set(Scene scene, SceneCloseBehavior behavior = SceneCloseBehavior.KeepOpenAlways) Unset(Scene) Unset and revert to default SceneCloseBehavior for this scene. public static void Unset(Scene scene) UnsetAll() Unsets SceneCloseBehavior for all scenes. public static void UnsetAll()"
  },
  "api/AdvancedSceneManager.Utility.PreloadedSceneHelper.html": {
    "href": "api/AdvancedSceneManager.Utility.PreloadedSceneHelper.html",
    "title": "PreloadedSceneHelper | Advanced Scene Manager",
    "keywords": "PreloadedSceneHelper An helper class to make working with preloaded scenes easier, contains method for finish loading and discarding preloaded scene. Inheritance Object PreloadedSceneHelper Constructors PreloadedSceneHelper(OpenSceneInfo, Boolean) public PreloadedSceneHelper(OpenSceneInfo scene, bool hasRunCallbacks) Properties hasRunCallbacks Gets whatever OnSceneOpen() callbacks has been called. public bool hasRunCallbacks { get; } isStillPreloaded Gets whatever the scene is still preloaded. public bool isStillPreloaded { get; } scene The scene that was preloaded. public OpenSceneInfo scene { get; } Methods Discard() Closes the scene. public SceneOperation Discard() FinishLoading() Finishes loading scene. public SceneOperation<OpenSceneInfo> FinishLoading()"
  },
  "api/AdvancedSceneManager.Utility.QueueUtility-1.html": {
    "href": "api/AdvancedSceneManager.Utility.QueueUtility-1.html",
    "title": "QueueUtility<T> | Advanced Scene Manager",
    "keywords": "QueueUtility<T> A utility that provides queuing. Inheritance Object QueueUtility<T> Properties isBusy Gets whatever any items in the queue are running. public static bool isBusy { get; } queue Gets the items currently in queue. public static ReadOnlyCollection<T> queue { get; } running Gets the items that are currently running. public static ReadOnlyCollection<T> running { get; } Methods IsQueued(T) Get if the item is queued. public static bool IsQueued(T queueable) IsRunning(T) Gets if the item is running. public static bool IsRunning(T queueable) StopAll() Cancels all queued and running items. public static void StopAll() Events queueEmpty Occurs when an queued item finishes and queue is empty. public static event Action queueEmpty"
  },
  "api/AdvancedSceneManager.Utility.SceneCollectionUtility.html": {
    "href": "api/AdvancedSceneManager.Utility.SceneCollectionUtility.html",
    "title": "SceneCollectionUtility | Advanced Scene Manager",
    "keywords": "SceneCollectionUtility An utility class to perform actions on collections. Inheritance Object SceneCollectionUtility Methods Create(String, Profile) Creates a SceneCollection . public static SceneCollection Create(string title, Profile profile = null) Find(IEnumerable<OpenSceneInfo>, Scene) Finds the scene with the specified path. public static OpenSceneInfo Find(this IEnumerable<OpenSceneInfo> list, Scene scene) Find(IEnumerable<OpenSceneInfo>, Scene) Finds the scene with the specified path. public static OpenSceneInfo Find(this IEnumerable<OpenSceneInfo> list, Scene scene) Find(IEnumerable<Scene>, String) Finds the scene with the specified path. public static Scene Find(this IEnumerable<Scene> list, string path) Find(IEnumerable<Scene>, String) Finds the scene with the specified path. public static Scene Find(this IEnumerable<Scene> list, string path) Remove(SceneCollection) Removes a SceneCollection . public static void Remove(SceneCollection collection) RemoveNullScenes(SceneCollection) Removes all null scenes in the collection. public static void RemoveNullScenes(SceneCollection collection)"
  },
  "api/AdvancedSceneManager.Utility.SceneDataUtility.html": {
    "href": "api/AdvancedSceneManager.Utility.SceneDataUtility.html",
    "title": "SceneDataUtility | Advanced Scene Manager",
    "keywords": "SceneDataUtility A utility for storing scene related data. Data can only be saved to disk in editor. Inheritance Object SceneDataUtility Methods Enumerate<T>(String) Enumerates all T on all scenes. public static IEnumerable<T> Enumerate<T>(string key) Get<T>(Scene, String, T) Gets the value with the specified key, for the specified scene. public static T Get<T>(Scene scene, string key, T defaultValue = null) Get<T>(String, String, T) Gets the value with the specified key, for the specified scene. public static T Get<T>(string scene, string key, T defaultValue = null) GetDirect(Scene, String) Gets the value with the specified key, for the specified scene. This is the direct version, all values are stores as string, which means Get<T>(String, String, T) must convert value beforehand, this method doesn't. public static string GetDirect(Scene scene, string key) GetDirect(String, String) Gets the value with the specified key, for the specified scene. This is the direct version, all values are stores as string, which means Get<T>(String, String, T) must convert value beforehand, this method doesn't. public static string GetDirect(string scene, string key) Set<T>(Scene, String, T) Sets the value with the specified key, for the specified scene. public static void Set<T>(Scene scene, string key, T value) Set<T>(String, String, T) Sets the value with the specified key, for the specified scene. public static void Set<T>(string scene, string key, T value) SetDirect(Scene, String, String) Sets the value with the specified key, for the specified scene. This is the direct version, all values are stores as string, which means Get<T>(String, String, T) must convert value beforehand, this method doesn't. public static void SetDirect(Scene scene, string key, string value) SetDirect(String, String, String) Sets the value with the specified key, for the specified scene. This is the direct version, all values are stores as string, which means Get<T>(String, String, T) must convert value beforehand, this method doesn't. public static void SetDirect(string scene, string key, string value) Unset(Scene, String) Unsets the value with the specified key, for the specified scene. public static void Unset(Scene scene, string key) Unset(String, String) Unsets the value with the specified key, for the specified scene. public static void Unset(string scene, string key)"
  },
  "api/AdvancedSceneManager.Utility.SceneHelper.html": {
    "href": "api/AdvancedSceneManager.Utility.SceneHelper.html",
    "title": "SceneHelper | Advanced Scene Manager",
    "keywords": "SceneHelper An helper for opening and closing scenes or scene collections. Most common use case would be to open / close scenes or scene collections from UnityEngine.Events.UnityEvent . Inheritance Object SceneHelper Remarks See also: ASM . Properties current public static ASM current { get; }"
  },
  "api/AdvancedSceneManager.Utility.SceneUtility.html": {
    "href": "api/AdvancedSceneManager.Utility.SceneUtility.html",
    "title": "SceneUtility | Advanced Scene Manager",
    "keywords": "SceneUtility An utility class to perform actions on scenes. Inheritance Object SceneUtility Properties hasAnyScenes Gets if there are any scenes open that are not dynamically created, and not yet saved to disk. public static bool hasAnyScenes { get; } isStartupScene Gets if current, and only, scene is the startup scene. public static bool isStartupScene { get; } sceneCount public static int sceneCount { get; } Methods Create(Action<Scene>, SceneCollection, Nullable<Int32>, Boolean, Boolean) Creates a scene, using save prompt for path. Returns null if save dialog cancelled. public static void Create(Action<Scene> onCreated, SceneCollection collection = null, int? index = null, bool replaceIndex = false, bool save = true) Remarks Only usable in editor Create(String, SceneCollection, Nullable<Int32>, Boolean, Boolean, Boolean) Creates a scene at the specified path. public static Scene Create(string path, SceneCollection collection = null, int? index = null, bool replaceIndex = false, bool save = true, bool createSceneScriptableObject = true) Remarks Only usable in editor CreateDynamic(String, LocalPhysicsMode) Creates a scene at runtime, that is not saved to disk. public static OpenSceneInfo CreateDynamic(string name, LocalPhysicsMode localPhysicsMode = LocalPhysicsMode.None) CreateInCurrentFolder(Action<Scene>, SceneCollection, Nullable<Int32>, Boolean, Boolean) Creates a scene, using UnityEditor.ProjectWindowUtil.CreateScene() . public static void CreateInCurrentFolder(Action<Scene> onCreated, SceneCollection collection = null, int? index = null, bool replaceIndex = false, bool save = true) Remarks Only usable in editor Find(Func<Scene, Boolean>, SceneCollection, Profile) Find scenes by predicate, in the specified collection or profile, if defined. public static IEnumerable<Scene> Find(Func<Scene, bool> predicate, SceneCollection inCollection = null, Profile inProfile = null) Find(String, SceneCollection, Profile) Find scenes by name, in the specified collection or profile, if defined. public static IEnumerable<Scene> Find(string name, SceneCollection inCollection = null, Profile inProfile = null) FindASMScene(SceneAsset) Finds the asm representation of this UnityEditor.SceneAsset . public static Scene FindASMScene(this SceneAsset scene) Remarks Only available in editor. FindOpen(Func<Scene, Boolean>) Find open scenes by predicate. public static IEnumerable<Scene> FindOpen(Func<Scene, bool> predicate) FindOpen(String) Find open scenes by name. public static IEnumerable<Scene> FindOpen(string name) GetAllOpenUnityScenes() Get all open unity scenes. public static IEnumerable<Scene> GetAllOpenUnityScenes() MergeScenes(String[]) Merges the scenes together, the first scene in the list will be the output scene. public static void MergeScenes(params string[] scenes) Remarks Only available in editor. Move(GameObject, OpenSceneInfo) public static void Move(this GameObject obj, OpenSceneInfo scene) Move(GameObject, Scene) public static void Move(this GameObject obj, Scene scene) MoveToNewScene(GameObject[]) Moves the object to a new scene. Only available in editor. public static void MoveToNewScene(params GameObject[] objects) Remove(Scene) Removes the scene and its associated UnityEditor.SceneAsset , and removes any references to it from any SceneCollection . public static void Remove(Scene scene) Remove(String) Removes the UnityEditor.SceneAsset at the specified path and its associated Scene(GameObject) , and removes any references to it from any SceneCollection . public static void Remove(string path) Scene(Component) Gets the runtime info of the associated scene to this UnityEngine.Component . public static OpenSceneInfo Scene(this Component component) Scene(GameObject) Gets the runtime info of the associated scene to this UnityEngine.GameObject . public static OpenSceneInfo Scene(this GameObject gameObject) Scene(Scene) Gets the ASM runtime info of this UnityEngine.SceneManagement.Scene . public static OpenSceneInfo Scene(this Scene scene)"
  },
  "api/AdvancedSceneManager.Utility.ScriptableObjectUtility.html": {
    "href": "api/AdvancedSceneManager.Utility.ScriptableObjectUtility.html",
    "title": "ScriptableObjectUtility | Advanced Scene Manager",
    "keywords": "ScriptableObjectUtility Contains utility methods for UnityEngine.ScriptableObject . Inheritance Object ScriptableObjectUtility Methods GetSingleton<T>(String, String) Gets a singleton instance of the specified type. public static T GetSingleton<T>(string assetPath, string resourcesPath) where T : ScriptableObject Save(ScriptableObject) Saves the UnityEngine.ScriptableObject . public static void Save(this ScriptableObject obj) Remarks Safe to call from outside editor, but has no effect."
  },
  "api/AdvancedSceneManager.Utility.SerializableDictionary-2.html": {
    "href": "api/AdvancedSceneManager.Utility.SerializableDictionary-2.html",
    "title": "SerializableDictionary<TKey, TValue> | Advanced Scene Manager",
    "keywords": "SerializableDictionary<TKey, TValue> A serializable dictionary. Inheritance Object Dictionary <TKey, TValue> SerializableDictionary<TKey, TValue> TagList SerializableStringBoolDict Remarks Older unity versions might need a wrapper class, since unity does not support serializing generic types. Don't forget SerializableAttribute on wrapper! Fields keys [SerializeField] protected List<TKey> keys values [SerializeField] protected List<TValue> values Properties throwOnDeserializeWhenKeyValueMismatch public bool throwOnDeserializeWhenKeyValueMismatch { get; set; } Methods OnAfterDeserialize() public virtual void OnAfterDeserialize() OnBeforeSerialize() public virtual void OnBeforeSerialize() Extension Methods DictionaryUtility.WithNullKey<TKey, TValue>(Dictionary<TKey, TValue>, TKey) DictionaryUtility.Set<TKey, TValue>(Dictionary<TKey, TValue>, TKey, TValue) DictionaryUtility.EnsureAdded<TKey, TValue>(Dictionary<TKey, TValue>, TKey) DictionaryUtility.Add<TKey, TValue>(Dictionary<TKey, TValue>, TKey, TValue) DictionaryUtility.GetValue<TKey, TValue>(Dictionary<TKey, TValue>, TKey, TValue) ListUtility.ForEach<T>(IEnumerable<T>, Action<T, Int32>) ListUtility.Flatten<T>(IEnumerable<T>, Func<T, IEnumerable<T>>) ListUtility.Except<T>(IEnumerable<T>, T) ListUtility.GroupConsecutive<T>(IEnumerable<T>, Func<T, T, Boolean>)"
  },
  "api/AdvancedSceneManager.Utility.SerializableStringBoolDict.html": {
    "href": "api/AdvancedSceneManager.Utility.SerializableStringBoolDict.html",
    "title": "SerializableStringBoolDict | Advanced Scene Manager",
    "keywords": "SerializableStringBoolDict Inheritance Object Dictionary < String , Boolean > SerializableDictionary < String , Boolean > SerializableStringBoolDict Extension Methods DictionaryUtility.WithNullKey<TKey, TValue>(Dictionary<TKey, TValue>, TKey) DictionaryUtility.Set<TKey, TValue>(Dictionary<TKey, TValue>, TKey, TValue) DictionaryUtility.EnsureAdded<TKey, TValue>(Dictionary<TKey, TValue>, TKey) DictionaryUtility.Add<TKey, TValue>(Dictionary<TKey, TValue>, TKey, TValue) DictionaryUtility.Add<TKey, TList, TItem>(Dictionary<TKey, TList>, TKey, TItem) DictionaryUtility.AddRange<TKey, TList, TItem>(Dictionary<TKey, TList>, TKey, IEnumerable<TItem>) DictionaryUtility.AddRange<TKey, TList, TItem>(Dictionary<TKey, TList>, TKey, TItem[]) DictionaryUtility.Remove<TKey, TList, TItem>(Dictionary<TKey, TList>, TKey, TItem) DictionaryUtility.GetValue<TKey, TValue>(Dictionary<TKey, TValue>, TKey, TValue) ListUtility.ForEach<T>(IEnumerable<T>, Action<T, Int32>) ListUtility.Flatten<T>(IEnumerable<T>, Func<T, IEnumerable<T>>) ListUtility.Except<T>(IEnumerable<T>, T) ListUtility.GroupConsecutive<T>(IEnumerable<T>, Func<T, T, Boolean>)"
  },
  "api/AdvancedSceneManager.Utility.TimeSpanUtility.html": {
    "href": "api/AdvancedSceneManager.Utility.TimeSpanUtility.html",
    "title": "TimeSpanUtility | Advanced Scene Manager",
    "keywords": "TimeSpanUtility Inheritance Object TimeSpanUtility Methods FormatUnits_Components(Single, String) Formats the time as a readable string. public static (string time, string unit) FormatUnits_Components(float milliseconds, string format = \"#.###\") ToDisplayString(Single, String) public static string ToDisplayString(this float milliseconds, string format = \"#.###\") ToDisplayString(TimeSpan, String) public static string ToDisplayString(this TimeSpan timeSpan, string format = \"#.###\") ToDisplayString_Components(TimeSpan, String) public static (string time, string unit) ToDisplayString_Components(this TimeSpan timeSpan, string format = \"#.###\")"
  },
  "guides/Callbacks.html": {
    "href": "guides/Callbacks.html",
    "title": "Callbacks | Advanced Scene Manager",
    "keywords": "Callbacks The following callbacks are called by the scene manager when a scene is opened or closed, or a collection is opened or closed. The callbacks are called only for the scene or collection they are attached to, and are called before loading screens are closed, if one was opened, and is waited for. So any actions you may want to happen before loading screens is closed, these callbacks may be what you want. Note that these callbacks will not be called when regular unity play button is used. This is because they are called by ASM SceneOperation directly, and will not be called when a scene is opened from a non-ASM way. ISceneOpen Called when the scene that the script is attached to is opened. ISceneClosed Called when the scene that the script is attached to is closed. ICollectionOpen Called when a collection containing a scene with this script is opened. ICollectionClose Called when a collection containing a scene with this script is closed. public class LogOnSceneCallback : ISceneOpen { public IEnumerator OnSceneOpen() { Debug.Log(\"Scene opened\"); yield break; } public IEnumerator OnSceneClose() { Debug.Log(\"Scene closed\"); yield break; } }"
  },
  "guides/InGameToolbar.html": {
    "href": "guides/InGameToolbar.html",
    "title": "In-game toolbar | Advanced Scene Manager",
    "keywords": "In-game toolbar The in-game toolbar provides some convenient debugging tools for builds. While this might not have much use in editor, it may be invaluable when debugging builds. The in-game toolbar is enabled by default, and can be toggled on or off in the settings tab of the scene manager window . Header Due too unicode not being fully supported in Unity the top row might not be entirely self explanatory, which is only exacerbated by the fact that Unity will not render tooltips during runtime, unless implemented manually. ↻: Reloads the entire game. ↻ collection : Reloads the currently open collection. Does nothing if no collection is open. ×: Quits the game. The following options may reduce performance, please be aware of this when debugging. Note that variables on components will, due to performance reasons, not refresh unless node is collapsed and re-expanded. Display gameobjects : Toggles whatever gameobjects should be shown in the list below. Display components : Toggles whatever components on gameobjects should be shown in the list below. Scene Operations Displays info about what asm is currently doing. The first operation in the queue is the primary operation currently running. Running operations is usually the primary operations and its sub operations, such as loading screens, but not necessarily (see SceneOperation.IgnoreQueue() ). Scene list The scene list displays the currently open scenes, game objects and components, assuming all display options enabled. Window The toolbar can be toggled on or off by pressing the expander button on the right side of the game screen, if enabled in settings.\\ The toolbar can also be resized horizontally by hovering over the left edge (which will turn white on hover), and dragging."
  },
  "guides/LoadingScreen.html": {
    "href": "guides/LoadingScreen.html",
    "title": "Loading screens | Advanced Scene Manager",
    "keywords": "Loading screens There are three ways of opening loading screens: Opening a collection LoadingScreenUtility SceneOperation.WithLoadingScreen A couple default loading screens are provided out-of-the-box, which can be found in 'AdvancedSceneManager/System/Defaults'. Custom loading screens Short version: Custom loading screens can be created by creating a script that inherits from AdvancedSceneManager.Callbacks.LoadingScreen and placing it in a dedicated scene. Longer version: Setting up a custom loading screen isn't difficult, but it isn't obvious either, we'll cover how to create a custom loading screen and how to use it in a collection here. A loading screen in ASM is implemented as a MonoBehaviour (through LoadingScreen class) with a few IEnumerator callbacks that are called when a collection is opened or closed (or manually opened through LoadingScreenUtility ). Callbacks are waited for, and execution of ASM is stopped until a callback is done. Each loading scene script is then placed in a dedicated scene, which is then automatically opened by ASM. Code Create a new script called 'CustomLoadingScreen' and make it inherit from LoadingScreen, you may have to import 'AdvancedSceneManager.Callbacks'. Remove default methods generated by unity, and override methods required by LoadingScreen. Now, you may want the loading screen to fade in, rather than just 'pop' in. You can do this easily by adding a CanvasGroup , and using the Fade() extension method provided by ASM. //using AdvancedSceneManager.Utility; public CanvasGroup group; public override IEnumerator OnOpen() { yield return group.Fade(1, 1); } public override IEnumerator OnClose() { yield return group.Fade(0, 1); } This will fade the canvas in when loading screen opens and fade out when loading is finished. Now, for showing progress, add a Slider variable and update it in Update(). public Slider slider; void Update() { if (operation != null) //Operation may be null for the first few frames slider.value = operation.totalProgress; } This will update a slider when loading progress changes, note that this will probably not be visible when opening smaller scenes since they may load too quickly, so don't worry too much about it for this tutorial, just know that it exists so that you may use it in the future. Now that we have a functional implementation of a loading screen, we may begin the graphical part. UI Create a new scene called 'Custom loading screen'. Add a canvas and a darkish background image , you may add a bright background instead if you are so inclined. Add a slider , which you may style and position as you would like. Next, add a CanvasGroup to canvas and then the 'CustomLoadingScreen' script that we created earlier, assign canvas, group, and slider variables. Setting alpha to 0 in CanvasGroup may prevent potential flickering. Actually using it Now for actually using it, we can assign it to a collection in the Scene Manager Window , by pressing the on a collection, and changing 'Loading screen' to 'Override' and assigning the scene to the field that appears directly underneath. And with that, we're done! You may now open the collection that has the loading screen assigned to it and the screen should start to fade in the ui you created, and when fade is done, the current collection should close and open the new collection, and then fade your ui out."
  },
  "guides/PauseScreenUtility.html": {
    "href": "guides/PauseScreenUtility.html",
    "title": "| Advanced Scene Manager",
    "keywords": "The default pause screen adds a pause screen out-of-the-box. This is to prevent those annoying moments when you create a build, only to forget that you do not have a pause screen, so in order to restart you have to press alt-f4 and open exe again. Note that only esc is supported and can as such not be opened on anything beyond a keyboard by default. If InputSystem is installed and enabled then gamepad support is available. Note that PauseScreenUtility.Show() may be called to open it manually. The default pause screen can be disabled in scene manager window ."
  },
  "guides/PreloadedSceneHelper.html": {
    "href": "guides/PreloadedSceneHelper.html",
    "title": "Preloading | Advanced Scene Manager",
    "keywords": "Preloading Preloaded scene helper is a class that helps with scenes that have been preloaded, and is returned from any methods that preloads scenes. Please note that Unity only supports a single preloaded scene at a time, and that all subsequent scene operations will be halted until this scene is fully loaded and activated, or closed. using System; using UnityEngine; using UnityEngine.Events; public class TriggerEvents : MonoBehaviour { [Serializable] public struct Event { [Space] public UnityEvent m_event; } public Event OnTriggerEnter; public Event OnTriggerExit; public Event OnTriggerStay; void OnTriggerEnter2D(Collider2D collision) => OnTriggerEnter.m_event.Invoke(); void OnTriggerExit2D(Collider2D collision) => OnTriggerExit.m_event.Invoke(); void OnTriggerStay2D(Collider2D collision) => OnTriggerStay.m_event.Invoke(); }"
  },
  "guides/Profile.html": {
    "href": "guides/Profile.html",
    "title": "Profiles | Advanced Scene Manager",
    "keywords": "Profiles A profile stores the settings , collections and any standalone scenes that should be included in build in ASM. Profiles are easily swappable in SceneManagerWindow and active profile is saved locally, which means that different members of a team can use their own profiles and then the project might use a profile specifically for build or release, if desired."
  },
  "guides/QuickStart.html": {
    "href": "guides/QuickStart.html",
    "title": "Quick start | Advanced Scene Manager",
    "keywords": "Quick start Easily setting up a scene management solution is exactly the issue that ASM is trying to solve, and we've attempted to make it as easy as possible. But there may still be a slight learning curve. But don't worry, we'll walk through the steps needed to set up a basic scene management solution. Open up the scene manager window: Create profile First, you'll need a profile. To create one, go to the settings tab. Press the menu button next to the top field. Press ' New profile ' button in the dropdown. Enter your preferred name. Setting up collections Now that we've got a profile, we can go to the scenes tab again to actually set the scenes up. Press the ' New Collection ' button to create a new collection. Now, press the menu button on its header to open the edit collection menu. The top field is the title of the collection, change it to ' main menu '. Next check ' Open on game start ' to automatically open it when game starts. Multiple collections may be set to open at startup, and if so, then they'll be opened in order, top to bottom, this can be useful for persistent scenes, but not something we'll worry about in this guide. While we won't worry about the other settings right now, they are documented over at SceneManagerWindow . Next, create two more collections, name them ' Level 1 ', and ' Level 2 ' (don't check ' Open on game start ' this time). Adding scenes Now that we've got our collections setup, we can add scenes to them. Expand all collections by pressing on their titles, and add a scene by pressing the ' + ' button once on each. Now create main menu, level 1, and level 2 scenes and assign them to their respective collection. (Just create scenes for now, we'll cover functionality in next segment) Also create a ui scene. Setting up main menu Now that we have a scene manager solution we can easily open the scenes at runtime. Now open your main menu scene, by pressing the button. Setup the scene as you wish, but please add three buttons, one for each level, and one for quit. Level buttons: On the Button component, create a new OnClick action, and assign SceneHelper as target, ' ASM > Open SceneCollection ' as method, and assign the collection for the level as parameter. Quit button: On the Button component, create a new OnClick action, and assign SceneHelper as target, ' ASM > Quit ' as method. Setting up level scenes Now open ui scene, by pressing the button. This scene may contain any ui objects, such as a health bar, if you wish, but please add a button to go back to main menu. On this button, create a new OnClick action, assign SceneHelper , and select ' ASM > Restart '. Alternatively you could also set button to open main menu collection directly, the same as level buttons, this would be preferable if any standalone scenes are added, since these would be closed and then opened again, if restart is called. And with that, we're done! Press the play button in the scene manager window, now you'll notice that both level buttons open the associated scene, and the ui scene, with a fade animation, and goes back to main menu with a fade."
  },
  "guides/readme.html": {
    "href": "guides/readme.html",
    "title": "Advanced Scene Manager | Advanced Scene Manager",
    "keywords": "Advanced Scene Manager Welcome to the Advanced Scene Manager wiki! Note: the offline version packaged with asset store releases may not be up-to-date, since documentation may be updated after release. Patches Patches are partial updates that are too important to have our users wait for, and if you are having issues, have a look over here, it might be fixed already: Patches Contact Want to get into contact with us? Report issues? Github issues support@lazy.solutions discord.gg/pnRn6zeFEJ We accept bug reports and offer help on all three channels. Which one you wish to use, is up to your preference!"
  },
  "guides/Scene.html": {
    "href": "guides/Scene.html",
    "title": "Scenes | Advanced Scene Manager",
    "keywords": "Scenes An ASM scene is our representation of a SceneAsset Unity scene. All SceneAssets in the project will have a corresponding Scene ScriptableObject generated for it. Aside from the slight confusion that might arise at first, this approach has numerous advantages: Drag and drop references in inspector: UnityEvent support (it might be easier to use SceneHelper as target though, since that will help filter the object picker to only display scenes): More robust: Consider this: using UnityEngine.SceneManagement; using AdvancedSceneManager.Models; //------Unity, Out-of-the-box------ //Path: Loses reference when scene is moved, renamed, deleted... //Name: Loses reference when scene renamed, deleted, also // conflicts occur when duplicate names exist... public string scene; //Loses reference when build index changes... public int sceneIndex; public void OpenSceneUnity() { SceneManager.LoadScene(scene); SceneManager.LoadScene(sceneIndex); } Which could be transformed into this: //------Advanced Scene Manager------ //Is automatically updated when its associated SceneAsset is moved, //renamed and deleted. //Does not rely on build index. public Scene scene; public void OpenSceneASM() { scene.Open(); } Persistent scenes Scenes can be opened as persistent either by using tags : Or by using PersistentUtility in code. Scene merge Merging scenes can be done in two ways: (API methods are contained in SceneUtility ) Pressing the button: Or by selecting two or more SceneAsset in project window: The scenes will then be merged like this: Scene split Scenes can be split by selecting two GameObjects in the hierarchy: And will be split like this:"
  },
  "guides/SceneAction.html": {
    "href": "guides/SceneAction.html",
    "title": "Scene actions | Advanced Scene Manager",
    "keywords": "Scene actions A SceneAction is an action that is to be performed by the scene manager, such as opening a scene . Used in SceneOperation . Custom actions Custom actions has to inherit from SceneAction and can be added to a SceneOperation through SceneOperation.WithAction(SceneAction.md) . Use constructor to define and receive properties, if bad properties are received then call Done() to indicate that action should not run."
  },
  "guides/SceneCollection.html": {
    "href": "guides/SceneCollection.html",
    "title": "Scene collections | Advanced Scene Manager",
    "keywords": "Scene collections A SceneCollection, more commonly called just 'collection', is a collection of scenes , that are all manipulated at the same time. To put it simply: When a collection is opened, then all its contained scenes will be opened. When a collection is closed, then all its contained scenes will be closed. Beyond this there are ways to change this behavior on individual scenes, to prevent them from opening or keep them open, using either Tags or PersistentUtility . Loading screens are also supported out of the box for collections."
  },
  "guides/SceneHelper.html": {
    "href": "guides/SceneHelper.html",
    "title": "Scene helper | Advanced Scene Manager",
    "keywords": "Scene helper The scene helper is a scriptable object that can be used in UnityEvent to easily open scenes or collections , since it might be easier to find scenes or collections using it. It may also be used through a singleton instance: AdvancedSceneManager.Utility.SceneHelper.current API documentation can be found here: Scene helper"
  },
  "guides/SceneManager.html": {
    "href": "guides/SceneManager.html",
    "title": "Scene managers | Advanced Scene Manager",
    "keywords": "Scene managers In ASM we use two scene managers, CollectionSceneManager and StandaloneSceneManager, which may seem confusing at first, but it is probably more straightforward than it seems at first glance. These two scene managers can be accessed with: AdvancedSceneManager.SceneManager.collection AdvancedSceneManager.SceneManager.standalone They both inherit from SceneManagerBase, which means that most logic, methods and properties are exactly the same across both scene managers, but does of course implement behaviors specific to either standalone scenes or collection scenes. SceneManagerBase SceneManagerBase is the base class for collection and standalone scene managers, and contains the core logic for scene management. Collection Scene Manager The collection scene manager manages the scenes of the active collection . Throws OpenSceneException or CloseSceneException if a specified scene is not part of the active collection . AdvancedSceneManager.SceneManager.collection Standalone Scene Manager The standalone scene manager manages scenes that are opened outside of a collection . For example an pause screen or persistent scenes. AdvancedSceneManager.SceneManager.standalone If any scenes are opened manually using UnityEngine.SceneManagement.SceneManager , then they will be tracked here. Note that it is not recommended to load scenes using unitys api when using ASM, so please take note that weird things could happen. Utility Scene Manager The utility scene manager (not a real scene manager, just named that to be consistent and easy to find) contains convenience functions for working with scenes that might be open in either scene manager. AdvancedSceneManager.SceneManager.utility"
  },
  "guides/SceneManagerWindow.html": {
    "href": "guides/SceneManagerWindow.html",
    "title": "Scene manager window | Advanced Scene Manager",
    "keywords": "Scene manager window The Scene Manager Window can be used to manage the SceneCollections (commonly referred to as collection) and scenes in a project, and also the behavior of Advanced Scene Manager. The scene manager window can be opened through: Header button enters play mode and starts startup sequence as if a build was started. button Scene Overview... Opens Scene Overview Window . Look at documentation... Open github wiki Look at lazy.solutions... Open our company webpage. Build temp (profiler) Builds and runs the project, also attaches profiler. Build temp Builds and runs the project. Reset Resets Advanced Scene Manager by deleting profiles , collections , and ASM Scenes (which will be immediately generated again after). The Scene Manager Window has three tabs: Scenes | Tags | Settings Scenes The Scenes tab is where the collections of scenes are set up. Create new collection Press button to create a new collection . Collection properties To edit properties of a collection, press the button on the header to open the collection menu. In the collection menu the following properties can be changed: Title The title of this collection. Extra data: A scriptable object that is to be associated with this collection, retrievable in code by SceneCollection.ExtraData () or SceneCollection.extraData. Active scene The scene that should be activated after collection has been opened. Startup option Can be one of the following values: Auto: Open if this collection is the uppermost collection in the list that is enabled. (default) Do not open: Don't open this collection during startup. Open: Open this collection during startup. Open as persistent: Open this collection during startup, and flag each scene within as persistent (aka SceneCloseBehavior.KeepOpenAlways ). Loading thread priority: Automatically set Application.LoadingThreadPriority to specified value when this collection is opened (and is reset when done). This field will be disabled if 'Background Loading Priority' is disabled in settings tab. Loading Screen The loading screen to use when opening or closing this collection. Add or remove scenes / collection Scenes can be added to a collection by pressing the button on its header, Scenes and SceneAsset can then be dragged onto the scene fields. The button on a collection header or scene row can be used to remove a collection or scene. Reorder Hold and drag on button and drag up and down to reorder collections or scenes. Open buttons Tip: Holding shift when using any of the following buttons, will force open any scenes tagged with SceneOpenBehavior.DoNotOpenWithCollection. button can be used to open a collection in play mode. button can be used to open a collection or scene, closing all other scenes. and buttons can be used to open or close collections or scenes additively. Collections can only be opened additively in editor, outside of play mode. Selection, bake lightmaps, combine scenes Scenes and collections can be selected by holding ctrl and clicking on it in the scenes tab. When more than one scene are selected (collections count for all its containing scenes), the button will appear, this will allow you to bake lightmaps for all the selected scenes , and when a collection is selected, all scenes within will be included. When more than one scene are selected (collections do not count), the button will appear, this will allow you to quickly merge scenes together , note that this cannot be undone, except for using the split scene utility . Tags Tags can be used to specify custom open or close behavior, when opened or closed through a collection. Press button to create a new tag. Title The title of the tag. Close behavior: Close (default) Closes scene like normal. Keep open if next collection also contains scene Keeps the scene open when opening a collection that also contains the scene, otherwise close. Keep open always Persistent, ASM will never close automatically. Open behavior: (default) Open normally Open like normal Do not open in collection Do not open this scene automatically when the associated collection is opened Settings The settings tab can be used change behavior of advanced scene manager. Profile : The active Profile in ASM. Options Splash screen : The custom splash screen to display during startup, plays after Unity's splash screens, if enabled. Provides more flexibility than Unity's splash screen since ours is merely implemented as scenes with a script using IEnumerator callback. Startup loading screen : The loading screen that will be used during startup. Loading screen : The loading screen that will be used for collections that are set to use the default loading screen. Startup scene: This is the scene that should open first in build. Don't change this unless you know what you're doing. Background loading priority: If enabled, automatically set Application.backgroundLoadingPriority during startup. Note that collections can also specify loading priority during open, but that is only temporary, and value will be reset back to this when done. Disable this if you are using another asset which relies on managing this setting by itself. Create camera during startup: Automatically create camera during startup, if no main camera is found. Use default pause screen : ASM has a default pause screen for those times when you build and then forget that no one has created a pause screen yet, forcing you to alt-f4, then restart again. This toggles default pause screen on or off. Include fade loading screen: Includes the default fade loading screen in build. Local Open collection when SceneAsset opened: Attempts to find and open an associated collection when a SceneAsset is opened in editor. Open scenes when created using scene field: When creating scenes using 'New' button in collections, should we open the scene afterwards? Allow manual editing of build settings: Allows editing build settings, note that this might make things weird in build, so please make sure to test everything properly when using this. Use save dialog when creating scenes: There are two ways to create scenes (when using 'New' button in collections): Checking this make ASM use the first option. Opening save file dialog. Using project window, which puts scene in current folder and prompts for name. Save action when using ASM play button: When any open scene has changes what should we do?: Do Nothing Save: Save without prompting Prompt: Prompt using regular dialog, if user presses no, changes will be discarded. Log Pointless opening of collections during startup: Enables or disables warnings during startup that a collection was opened, then closed because another collection was also set to open during startup, and no scene within was persistent. Deleting temp Build: Enables or disables a message that indicates that the temp build was deleted after process ended, this is mostly just useful for debugging when issues cause folder to not be deleted and is a quick way to know if this feature works as intended or not. In-game toolbar Display ingame toolbar: Determines whatever the in-game toolbar should be enabled upon entering play mode, or build. Display in editor: Should it be enabled in editor? Expanded by default: Should the in-game toolbar is start as expanded? Appearance These properties are local to the computer / user, so feel free to modify these to your personal preference. Hierarchy Display collection titles on scenes in heirarchy: If enabled, we'll display the title of the collection a scene belongs to in the heirarchy. Display 'persistent' on scenes in heirarchy: If enabled, we'll display 'persistent' indicator on scenes that are persistent in the heirarchy. Scenes tab Show extra add collection menu: If enabled, we'll display a button next to the regular add collection button, which presents some more options. Display dynamic collections: If enabled, we'll display the dynamic collections of the current profile. Window header Show scene helper drag button: If enabled, we'll display a button in the upper right corner, next to menu button, that allows you to start a drag drop with the scene helper. Collection header Display collection play button: If enabled, we'll display the play button on collections. Display collection open button: If enabled, we'll display the open button on collections. Display collection open additive button: If enabled, we'll display the open additive button on collections. Display include in build toggle on collections: If enabled, we'll display a toggle which determines whatever a collection should be included in build. Plugins and samples The package manager can be used to install plugins for ASM. It also contains links to samples on github. The following plugins are currently available: plugin.asm.locking plugin.asm.addressables Experimental: plugin.asm.cross-scene-references Dynamic collections Dynamic collections allow you to automatically include all scenes in a folder (including subfolders) in build. Dynamic collections override blacklisted scenes. Blacklist Blacklist allows you to make ASM ignore scenes that are irrelevant."
  },
  "guides/SceneOperation.html": {
    "href": "guides/SceneOperation.html",
    "title": "Scene operations | Advanced Scene Manager",
    "keywords": "Scene operations The scene operation is what executes the logic of Advanced Scene Manager. A scene operation takes lists of scenes to open and close, and a few other properties to modify behavior, and then generates and executes the actions when it is at front of the queue. Process: Queue and wait until we're up Create actions Block input (cannot change properties anymore) Open loading screen , if one is defined Call collection closed callbacks , if applicable Run generated actions , one by one. Set active scene , if a collection was opened Call callbacks added through WithCallback methods Call collection open callbacks Hide loading screen Dequeue If you wish to use them yourself in code: The first method just returns SceneOperation , this allows you to yield it in a coroutine to wait until it is done. The second method also returns a reference to the opened scene , which can be accessed (when done) through SceneOperation.value . //SceneOperation can be yielded in a coroutine to wait until it is finished. SceneOperation OpenSceneWithLoadingScreen(Scene scene, Scene loadingScreen) => SceneOperation.Add(SceneManager.standalone). Open(scene). WithLoadingScreen(loadingScreen). WithCallback(Callback.After(Phase.FinishLoad).Do(() => Debug.Log(\"loaded!\"))); SceneOperation<OpenSceneInfo> OpenSceneWithLoadingScreen2(Scene scene, Scene loadingScreen) => SceneOperation.Add(SceneManager.standalone, @return: o => o.openedScenes.FirstOrDefault()). Open(scene). WithLoadingScreen(loadingScreen). WithCallback(Callback.After(Phase.FinishLoad).Do(() => Debug.Log(\"loaded!\")));"
  },
  "guides/SceneOverviewWindow.html": {
    "href": "guides/SceneOverviewWindow.html",
    "title": "Scene overview window | Advanced Scene Manager",
    "keywords": "Scene overview window The scene overview window provides an easy overview over all scenes in the project, grouped by what collection (s) they are a part of. All scenes that are not part of a collection appear under the standalone group. From here you can: Open scene as either single (close all open scenes beforehand) or as additive. Set whatever a scene should be included in build. Scenes that are part of a collection will always be included, but standalone scene needs to explicitly be included here or through unity's build settings window . Set scene as persistent in editor. This means that when a scene is opened in the editor, this scene can be automatically opened as well. For runtime, PersistentUtility can be used."
  },
  "guides/SplashScreen.html": {
    "href": "guides/SplashScreen.html",
    "title": "Splash screen | Advanced Scene Manager",
    "keywords": "Splash screen A splash screen in ASM is implemented as a script inheriting AdvancedSceneManager.Callbacks.SplashScreen and placing it in a dedicated scene, and assigning it in the ASM settings . One splash is provided out-of-the-box, which, while functional, is just intended as a reference, and can be found in 'AdvancedSceneManager/System/Defaults'. ASM Splash Screen Displays the text 'Advanced Scene Manager', with fade animations. Splash screens in ASM are implemented as MonoBehaviour (through SplashScreen class) with a callback that manages everything that should happen during the splash screen. Callback is waited for, and execution of ASM is stopped until callback done. This means that, in difference from Unity's own splash screens, you may do whatever you want during the splash screen, such as play video and/or download extra data from the internet or just load assets, like an initial loading screen. Code Create a script called 'CustomSplashScreen' and make it inherit from SplashScreen, you may have to import 'AdvancedSceneManager.Callbacks'. Remove default methods generated by unity, and override DisplaySplashScreen(). In this guide we'll create a splash screen that fades in some text, then out, to do this we can create add public CanvasGroup variable, and use the extension method Fade() provided by ASM. In between fade in and out, add a delay. //using AdvancedSceneManager.Utility; public CanvasGroup group; public override IEnumerator DisplaySplashScreen() { yield return group.Fade(1, 1); yield return new WaitForSecondsRealtime(4); yield return group.Fade(0, 1); } This will fade the splash screen in, wait for 4 seconds, and then fade out again, and then ASM will continue with startup . UI Create a new scene called 'CustomSplashScreen'. Add a Canvas , a black background image to cover whats behind ui, then a CanvasGroup on a child object to background, set alpha on CanvasGroup to 0 to prevent potential flickering. Add some text in the center, with whatever you want, perhaps developer or publisher name? Now add the 'CustomSplashScreen' script we created earlier to the canvas , then assign canvas and group. Actually using it Making ASM actually use it is as simple as assigning it in the settings tab in Scene Manager Window . And with this, we're done! You may now use the in Scene Manager Window to start game as if it was a build, since splash screen won't play otherwise, and you should see the text fade in, wait for a few seconds, and then fade out again, and then ASM will continue startup process, and open your collections and scenes ."
  },
  "index.html": {
    "href": "index.html",
    "title": "| Advanced Scene Manager",
    "keywords": "This page has moved. Click here to go to the new page."
  },
  "plugins/plugin.asm.addressables.html": {
    "href": "plugins/plugin.asm.addressables.html",
    "title": "Addressables | Advanced Scene Manager",
    "keywords": "Addressables Addressables support package adds support to open and close addressable scenes in ASM. This package automatically finds all scenes that are addressable and overrides default scene open and close behavior. Which means, after tweaking settings in addressables, ASM should just work like it usually does. In addition to scene open and close support, a button is added to scenes and collections in ui. Pressing 'Addr.' button on a scene toggles the scene as addressable. Pressing 'Addressable' on collection will toggle all scenes in collection as addressable. Please note: When ASM adds a scene to addressables, it will add it under a default group, named after the collection the scene is contained in. This group will not have a schema assigned to it by ASM, and is expected to be assigned manually, or have all scenes reassigned to other groups."
  },
  "plugins/plugin.asm.cross-scene-references.html": {
    "href": "plugins/plugin.asm.cross-scene-references.html",
    "title": "Cross-scene references | Advanced Scene Manager",
    "keywords": "Cross-scene references Note that cross-scene references is experimental, and it may be possible it might never reach a stable status. This is due to lacking apis and workarounds that works one minute but not the other, or for one person but not the other, your milage might vary. Cross scene references is one of those small things that should be supported by Unity, but just isn't. ASM provides a plugin for this and may be enabled in settings. Note that cross-scene references may not be restored until after Start() and Awake() is called, ISceneOpen or ICollectionOpen is as such recommended, since they are invoked by ASM after cross-scene references has been restored. Note that while we do suppress warnings associated with cross-scene references (they cannot be disabled completely, all we can do is to prevent them from triggering where we can), please be aware that there will still occasionally be warnings, which you may ignore. Problems with resolving There may cases when a reference does not resolve correctly, there is then two different ways you may be notified: A warning (or error in build) may be logged in console, if enabled in settings. Pressing it will highlight the offending gameobject. There is also a icon in the hierarchy window, that will be displayed on a scene when any object in the scene was unable to be resolved. Another icon will also be displayed on the offending gameobject itself, this one will have a tooltip displaying a list of all references that could not be resolved and the reason why. Cross-scene debugger Sometimes the issue may be as simple as the target scene being unloaded, but when it isn't, the debugger can be used: Pressing the will load the scene that a reference refers to, so that we may get some more information: Now, this may be confusing at first glance, but references is grouped by the scene that the variable is defined in. The text ('monoBehavior' in example above), is the variable name in the script or component. If variable is an element in an array, unity event or similar, then index will be displayed in parenthesis, suffixed to name. The two scene fields will be the scene that the variable / target object exists in. The second column of object fields, will display the target script, component or gameobject of the variable or target. Pressing any of the fields will select asset or object in scene, double pressing will open it in inspector. Remove button is also available, which would, in perfect operation, not be used, however there a certain scenarios where asm will not detect that a reference has been removed, and must as such be removed manually (we will keep working on this!)."
  },
  "plugins/plugin.asm.locking.html": {
    "href": "plugins/plugin.asm.locking.html",
    "title": "Locking | Advanced Scene Manager",
    "keywords": "Locking The locking package adds support for locking scenes and collection from being edited. Note we can only prevent edit from inside of unity, any modifications from outside, including source control, cannot be prevented. When scene has been modified and user attempts to save, the following dialog will open, with customizable name and message: Save as: Opens file dialog to save as new scene. Cancel: Discards changes and reloads scene Unlocking a collection or scene will display a similar dialog."
  }
}