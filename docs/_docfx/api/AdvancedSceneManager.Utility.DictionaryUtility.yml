### YamlMime:ManagedReference
items:
- uid: AdvancedSceneManager.Utility.DictionaryUtility
  commentId: T:AdvancedSceneManager.Utility.DictionaryUtility
  id: DictionaryUtility
  parent: AdvancedSceneManager.Utility
  children:
  - AdvancedSceneManager.Utility.DictionaryUtility.Add``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)
  - AdvancedSceneManager.Utility.DictionaryUtility.Add``3(System.Collections.Generic.Dictionary{``0,``1},``0,``2)
  - AdvancedSceneManager.Utility.DictionaryUtility.AddRange``3(System.Collections.Generic.Dictionary{``0,``1},``0,``2[])
  - AdvancedSceneManager.Utility.DictionaryUtility.AddRange``3(System.Collections.Generic.Dictionary{``0,``1},``0,System.Collections.Generic.IEnumerable{``2})
  - AdvancedSceneManager.Utility.DictionaryUtility.EnsureAdded``2(System.Collections.Generic.Dictionary{``0,``1},``0)
  - AdvancedSceneManager.Utility.DictionaryUtility.GetValue``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)
  - AdvancedSceneManager.Utility.DictionaryUtility.Remove``3(System.Collections.Generic.Dictionary{``0,``1},``0,``2)
  - AdvancedSceneManager.Utility.DictionaryUtility.Set``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)
  - AdvancedSceneManager.Utility.DictionaryUtility.WithNullKey``2(System.Collections.Generic.Dictionary{``0,``1},``0)
  langs:
  - csharp
  - vb
  name: DictionaryUtility
  nameWithType: DictionaryUtility
  fullName: AdvancedSceneManager.Utility.DictionaryUtility
  type: Class
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Utility/DictionaryUtility.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: DictionaryUtility
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Utility/DictionaryUtility.cs
    startLine: 7
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Utility
  syntax:
    content: public static class DictionaryUtility
    content.vb: Public Module DictionaryUtility
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: AdvancedSceneManager.Utility.DictionaryUtility.WithNullKey``2(System.Collections.Generic.Dictionary{``0,``1},``0)
  commentId: M:AdvancedSceneManager.Utility.DictionaryUtility.WithNullKey``2(System.Collections.Generic.Dictionary{``0,``1},``0)
  id: WithNullKey``2(System.Collections.Generic.Dictionary{``0,``1},``0)
  isExtensionMethod: true
  parent: AdvancedSceneManager.Utility.DictionaryUtility
  langs:
  - csharp
  - vb
  name: WithNullKey<TKey, TValue>(Dictionary<TKey, TValue>, TKey)
  nameWithType: DictionaryUtility.WithNullKey<TKey, TValue>(Dictionary<TKey, TValue>, TKey)
  fullName: AdvancedSceneManager.Utility.DictionaryUtility.WithNullKey<TKey, TValue>(System.Collections.Generic.Dictionary<TKey, TValue>, TKey)
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Utility/DictionaryUtility.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: WithNullKey
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Utility/DictionaryUtility.cs
    startLine: 18
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Utility
  syntax:
    content: public static Dictionary<TKey, TValue> WithNullKey<TKey, TValue>(this Dictionary<TKey, TValue> d, TKey nullKey)
    parameters:
    - id: d
      type: System.Collections.Generic.Dictionary{{TKey},{TValue}}
    - id: nullKey
      type: '{TKey}'
    typeParameters:
    - id: TKey
    - id: TValue
    return:
      type: System.Collections.Generic.Dictionary{{TKey},{TValue}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function WithNullKey(Of TKey, TValue)(d As Dictionary(Of TKey, TValue), nullKey As TKey) As Dictionary(Of TKey, TValue)
  overload: AdvancedSceneManager.Utility.DictionaryUtility.WithNullKey*
  nameWithType.vb: DictionaryUtility.WithNullKey(Of TKey, TValue)(Dictionary(Of TKey, TValue), TKey)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AdvancedSceneManager.Utility.DictionaryUtility.WithNullKey(Of TKey, TValue)(System.Collections.Generic.Dictionary(Of TKey, TValue), TKey)
  name.vb: WithNullKey(Of TKey, TValue)(Dictionary(Of TKey, TValue), TKey)
- uid: AdvancedSceneManager.Utility.DictionaryUtility.Set``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)
  commentId: M:AdvancedSceneManager.Utility.DictionaryUtility.Set``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)
  id: Set``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)
  isExtensionMethod: true
  parent: AdvancedSceneManager.Utility.DictionaryUtility
  langs:
  - csharp
  - vb
  name: Set<TKey, TValue>(Dictionary<TKey, TValue>, TKey, TValue)
  nameWithType: DictionaryUtility.Set<TKey, TValue>(Dictionary<TKey, TValue>, TKey, TValue)
  fullName: AdvancedSceneManager.Utility.DictionaryUtility.Set<TKey, TValue>(System.Collections.Generic.Dictionary<TKey, TValue>, TKey, TValue)
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Utility/DictionaryUtility.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: Set
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Utility/DictionaryUtility.cs
    startLine: 27
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Utility
  syntax:
    content: public static TValue Set<TKey, TValue>(this Dictionary<TKey, TValue> d, TKey key, TValue value)
    parameters:
    - id: d
      type: System.Collections.Generic.Dictionary{{TKey},{TValue}}
    - id: key
      type: '{TKey}'
    - id: value
      type: '{TValue}'
    typeParameters:
    - id: TKey
    - id: TValue
    return:
      type: '{TValue}'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Set(Of TKey, TValue)(d As Dictionary(Of TKey, TValue), key As TKey, value As TValue) As TValue
  overload: AdvancedSceneManager.Utility.DictionaryUtility.Set*
  nameWithType.vb: DictionaryUtility.Set(Of TKey, TValue)(Dictionary(Of TKey, TValue), TKey, TValue)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AdvancedSceneManager.Utility.DictionaryUtility.Set(Of TKey, TValue)(System.Collections.Generic.Dictionary(Of TKey, TValue), TKey, TValue)
  name.vb: Set(Of TKey, TValue)(Dictionary(Of TKey, TValue), TKey, TValue)
- uid: AdvancedSceneManager.Utility.DictionaryUtility.EnsureAdded``2(System.Collections.Generic.Dictionary{``0,``1},``0)
  commentId: M:AdvancedSceneManager.Utility.DictionaryUtility.EnsureAdded``2(System.Collections.Generic.Dictionary{``0,``1},``0)
  id: EnsureAdded``2(System.Collections.Generic.Dictionary{``0,``1},``0)
  isExtensionMethod: true
  parent: AdvancedSceneManager.Utility.DictionaryUtility
  langs:
  - csharp
  - vb
  name: EnsureAdded<TKey, TValue>(Dictionary<TKey, TValue>, TKey)
  nameWithType: DictionaryUtility.EnsureAdded<TKey, TValue>(Dictionary<TKey, TValue>, TKey)
  fullName: AdvancedSceneManager.Utility.DictionaryUtility.EnsureAdded<TKey, TValue>(System.Collections.Generic.Dictionary<TKey, TValue>, TKey)
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Utility/DictionaryUtility.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: EnsureAdded
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Utility/DictionaryUtility.cs
    startLine: 33
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Utility
  syntax:
    content: public static void EnsureAdded<TKey, TValue>(this Dictionary<TKey, TValue> d, TKey key)
    parameters:
    - id: d
      type: System.Collections.Generic.Dictionary{{TKey},{TValue}}
    - id: key
      type: '{TKey}'
    typeParameters:
    - id: TKey
    - id: TValue
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub EnsureAdded(Of TKey, TValue)(d As Dictionary(Of TKey, TValue), key As TKey)
  overload: AdvancedSceneManager.Utility.DictionaryUtility.EnsureAdded*
  nameWithType.vb: DictionaryUtility.EnsureAdded(Of TKey, TValue)(Dictionary(Of TKey, TValue), TKey)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AdvancedSceneManager.Utility.DictionaryUtility.EnsureAdded(Of TKey, TValue)(System.Collections.Generic.Dictionary(Of TKey, TValue), TKey)
  name.vb: EnsureAdded(Of TKey, TValue)(Dictionary(Of TKey, TValue), TKey)
- uid: AdvancedSceneManager.Utility.DictionaryUtility.Add``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)
  commentId: M:AdvancedSceneManager.Utility.DictionaryUtility.Add``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)
  id: Add``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)
  isExtensionMethod: true
  parent: AdvancedSceneManager.Utility.DictionaryUtility
  langs:
  - csharp
  - vb
  name: Add<TKey, TValue>(Dictionary<TKey, TValue>, TKey, TValue)
  nameWithType: DictionaryUtility.Add<TKey, TValue>(Dictionary<TKey, TValue>, TKey, TValue)
  fullName: AdvancedSceneManager.Utility.DictionaryUtility.Add<TKey, TValue>(System.Collections.Generic.Dictionary<TKey, TValue>, TKey, TValue)
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Utility/DictionaryUtility.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: Add
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Utility/DictionaryUtility.cs
    startLine: 40
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Utility
  summary: Adds or sets the value of a key.
  example: []
  syntax:
    content: public static void Add<TKey, TValue>(this Dictionary<TKey, TValue> d, TKey key, TValue value)
    parameters:
    - id: d
      type: System.Collections.Generic.Dictionary{{TKey},{TValue}}
    - id: key
      type: '{TKey}'
    - id: value
      type: '{TValue}'
    typeParameters:
    - id: TKey
    - id: TValue
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub Add(Of TKey, TValue)(d As Dictionary(Of TKey, TValue), key As TKey, value As TValue)
  overload: AdvancedSceneManager.Utility.DictionaryUtility.Add*
  nameWithType.vb: DictionaryUtility.Add(Of TKey, TValue)(Dictionary(Of TKey, TValue), TKey, TValue)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AdvancedSceneManager.Utility.DictionaryUtility.Add(Of TKey, TValue)(System.Collections.Generic.Dictionary(Of TKey, TValue), TKey, TValue)
  name.vb: Add(Of TKey, TValue)(Dictionary(Of TKey, TValue), TKey, TValue)
- uid: AdvancedSceneManager.Utility.DictionaryUtility.Add``3(System.Collections.Generic.Dictionary{``0,``1},``0,``2)
  commentId: M:AdvancedSceneManager.Utility.DictionaryUtility.Add``3(System.Collections.Generic.Dictionary{``0,``1},``0,``2)
  id: Add``3(System.Collections.Generic.Dictionary{``0,``1},``0,``2)
  isExtensionMethod: true
  parent: AdvancedSceneManager.Utility.DictionaryUtility
  langs:
  - csharp
  - vb
  name: Add<TKey, TList, TItem>(Dictionary<TKey, TList>, TKey, TItem)
  nameWithType: DictionaryUtility.Add<TKey, TList, TItem>(Dictionary<TKey, TList>, TKey, TItem)
  fullName: AdvancedSceneManager.Utility.DictionaryUtility.Add<TKey, TList, TItem>(System.Collections.Generic.Dictionary<TKey, TList>, TKey, TItem)
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Utility/DictionaryUtility.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: Add
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Utility/DictionaryUtility.cs
    startLine: 57
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Utility
  summary: Adds the value to the list with the specified key. Creates list automatically if null and adds key if necessary.
  example: []
  syntax:
    content: >-
      public static void Add<TKey, TList, TItem>(this Dictionary<TKey, TList> d, TKey key, TItem item)
          where TList : IList<TItem>, new()
    parameters:
    - id: d
      type: System.Collections.Generic.Dictionary{{TKey},{TList}}
    - id: key
      type: '{TKey}'
    - id: item
      type: '{TItem}'
    typeParameters:
    - id: TKey
    - id: TList
    - id: TItem
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub Add(Of TKey, TList As {IList(Of TItem), New}, TItem)(d As Dictionary(Of TKey, TList), key As TKey, item As TItem)
  overload: AdvancedSceneManager.Utility.DictionaryUtility.Add*
  nameWithType.vb: DictionaryUtility.Add(Of TKey, TList, TItem)(Dictionary(Of TKey, TList), TKey, TItem)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AdvancedSceneManager.Utility.DictionaryUtility.Add(Of TKey, TList, TItem)(System.Collections.Generic.Dictionary(Of TKey, TList), TKey, TItem)
  name.vb: Add(Of TKey, TList, TItem)(Dictionary(Of TKey, TList), TKey, TItem)
- uid: AdvancedSceneManager.Utility.DictionaryUtility.AddRange``3(System.Collections.Generic.Dictionary{``0,``1},``0,System.Collections.Generic.IEnumerable{``2})
  commentId: M:AdvancedSceneManager.Utility.DictionaryUtility.AddRange``3(System.Collections.Generic.Dictionary{``0,``1},``0,System.Collections.Generic.IEnumerable{``2})
  id: AddRange``3(System.Collections.Generic.Dictionary{``0,``1},``0,System.Collections.Generic.IEnumerable{``2})
  isExtensionMethod: true
  parent: AdvancedSceneManager.Utility.DictionaryUtility
  langs:
  - csharp
  - vb
  name: AddRange<TKey, TList, TItem>(Dictionary<TKey, TList>, TKey, IEnumerable<TItem>)
  nameWithType: DictionaryUtility.AddRange<TKey, TList, TItem>(Dictionary<TKey, TList>, TKey, IEnumerable<TItem>)
  fullName: AdvancedSceneManager.Utility.DictionaryUtility.AddRange<TKey, TList, TItem>(System.Collections.Generic.Dictionary<TKey, TList>, TKey, System.Collections.Generic.IEnumerable<TItem>)
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Utility/DictionaryUtility.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: AddRange
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Utility/DictionaryUtility.cs
    startLine: 61
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Utility
  summary: Adds the values to the list with the specified key. Creates list automatically if null and adds key if necessary.
  example: []
  syntax:
    content: >-
      public static void AddRange<TKey, TList, TItem>(this Dictionary<TKey, TList> d, TKey key, IEnumerable<TItem> items)
          where TList : IList<TItem>, new()
    parameters:
    - id: d
      type: System.Collections.Generic.Dictionary{{TKey},{TList}}
    - id: key
      type: '{TKey}'
    - id: items
      type: System.Collections.Generic.IEnumerable{{TItem}}
    typeParameters:
    - id: TKey
    - id: TList
    - id: TItem
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub AddRange(Of TKey, TList As {IList(Of TItem), New}, TItem)(d As Dictionary(Of TKey, TList), key As TKey, items As IEnumerable(Of TItem))
  overload: AdvancedSceneManager.Utility.DictionaryUtility.AddRange*
  nameWithType.vb: DictionaryUtility.AddRange(Of TKey, TList, TItem)(Dictionary(Of TKey, TList), TKey, IEnumerable(Of TItem))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AdvancedSceneManager.Utility.DictionaryUtility.AddRange(Of TKey, TList, TItem)(System.Collections.Generic.Dictionary(Of TKey, TList), TKey, System.Collections.Generic.IEnumerable(Of TItem))
  name.vb: AddRange(Of TKey, TList, TItem)(Dictionary(Of TKey, TList), TKey, IEnumerable(Of TItem))
- uid: AdvancedSceneManager.Utility.DictionaryUtility.AddRange``3(System.Collections.Generic.Dictionary{``0,``1},``0,``2[])
  commentId: M:AdvancedSceneManager.Utility.DictionaryUtility.AddRange``3(System.Collections.Generic.Dictionary{``0,``1},``0,``2[])
  id: AddRange``3(System.Collections.Generic.Dictionary{``0,``1},``0,``2[])
  isExtensionMethod: true
  parent: AdvancedSceneManager.Utility.DictionaryUtility
  langs:
  - csharp
  - vb
  name: AddRange<TKey, TList, TItem>(Dictionary<TKey, TList>, TKey, TItem[])
  nameWithType: DictionaryUtility.AddRange<TKey, TList, TItem>(Dictionary<TKey, TList>, TKey, TItem[])
  fullName: AdvancedSceneManager.Utility.DictionaryUtility.AddRange<TKey, TList, TItem>(System.Collections.Generic.Dictionary<TKey, TList>, TKey, TItem[])
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Utility/DictionaryUtility.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: AddRange
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Utility/DictionaryUtility.cs
    startLine: 65
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Utility
  summary: Adds the values to the list with the specified key. Creates list automatically if null and adds key if necessary.
  example: []
  syntax:
    content: >-
      public static void AddRange<TKey, TList, TItem>(this Dictionary<TKey, TList> d, TKey key, params TItem[] items)
          where TList : IList<TItem>, new()
    parameters:
    - id: d
      type: System.Collections.Generic.Dictionary{{TKey},{TList}}
    - id: key
      type: '{TKey}'
    - id: items
      type: '{TItem}[]'
    typeParameters:
    - id: TKey
    - id: TList
    - id: TItem
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub AddRange(Of TKey, TList As {IList(Of TItem), New}, TItem)(d As Dictionary(Of TKey, TList), key As TKey, ParamArray items As TItem())
  overload: AdvancedSceneManager.Utility.DictionaryUtility.AddRange*
  nameWithType.vb: DictionaryUtility.AddRange(Of TKey, TList, TItem)(Dictionary(Of TKey, TList), TKey, TItem())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AdvancedSceneManager.Utility.DictionaryUtility.AddRange(Of TKey, TList, TItem)(System.Collections.Generic.Dictionary(Of TKey, TList), TKey, TItem())
  name.vb: AddRange(Of TKey, TList, TItem)(Dictionary(Of TKey, TList), TKey, TItem())
- uid: AdvancedSceneManager.Utility.DictionaryUtility.Remove``3(System.Collections.Generic.Dictionary{``0,``1},``0,``2)
  commentId: M:AdvancedSceneManager.Utility.DictionaryUtility.Remove``3(System.Collections.Generic.Dictionary{``0,``1},``0,``2)
  id: Remove``3(System.Collections.Generic.Dictionary{``0,``1},``0,``2)
  isExtensionMethod: true
  parent: AdvancedSceneManager.Utility.DictionaryUtility
  langs:
  - csharp
  - vb
  name: Remove<TKey, TList, TItem>(Dictionary<TKey, TList>, TKey, TItem)
  nameWithType: DictionaryUtility.Remove<TKey, TList, TItem>(Dictionary<TKey, TList>, TKey, TItem)
  fullName: AdvancedSceneManager.Utility.DictionaryUtility.Remove<TKey, TList, TItem>(System.Collections.Generic.Dictionary<TKey, TList>, TKey, TItem)
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Utility/DictionaryUtility.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: Remove
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Utility/DictionaryUtility.cs
    startLine: 85
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Utility
  summary: Removes the value to the list with the specified key.
  example: []
  syntax:
    content: >-
      public static void Remove<TKey, TList, TItem>(this Dictionary<TKey, TList> d, TKey key, TItem value)
          where TList : IList<TItem>, new()
    parameters:
    - id: d
      type: System.Collections.Generic.Dictionary{{TKey},{TList}}
    - id: key
      type: '{TKey}'
    - id: value
      type: '{TItem}'
    typeParameters:
    - id: TKey
    - id: TList
    - id: TItem
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub Remove(Of TKey, TList As {IList(Of TItem), New}, TItem)(d As Dictionary(Of TKey, TList), key As TKey, value As TItem)
  overload: AdvancedSceneManager.Utility.DictionaryUtility.Remove*
  nameWithType.vb: DictionaryUtility.Remove(Of TKey, TList, TItem)(Dictionary(Of TKey, TList), TKey, TItem)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AdvancedSceneManager.Utility.DictionaryUtility.Remove(Of TKey, TList, TItem)(System.Collections.Generic.Dictionary(Of TKey, TList), TKey, TItem)
  name.vb: Remove(Of TKey, TList, TItem)(Dictionary(Of TKey, TList), TKey, TItem)
- uid: AdvancedSceneManager.Utility.DictionaryUtility.GetValue``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)
  commentId: M:AdvancedSceneManager.Utility.DictionaryUtility.GetValue``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)
  id: GetValue``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)
  isExtensionMethod: true
  parent: AdvancedSceneManager.Utility.DictionaryUtility
  langs:
  - csharp
  - vb
  name: GetValue<TKey, TValue>(Dictionary<TKey, TValue>, TKey, TValue)
  nameWithType: DictionaryUtility.GetValue<TKey, TValue>(Dictionary<TKey, TValue>, TKey, TValue)
  fullName: AdvancedSceneManager.Utility.DictionaryUtility.GetValue<TKey, TValue>(System.Collections.Generic.Dictionary<TKey, TValue>, TKey, TValue)
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Utility/DictionaryUtility.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: GetValue
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Utility/DictionaryUtility.cs
    startLine: 100
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Utility
  summary: Gets the value of the specified key, returns default if it does not exist.
  example: []
  syntax:
    content: public static TValue GetValue<TKey, TValue>(this Dictionary<TKey, TValue> d, TKey key, TValue defaultValue = null)
    parameters:
    - id: d
      type: System.Collections.Generic.Dictionary{{TKey},{TValue}}
    - id: key
      type: '{TKey}'
    - id: defaultValue
      type: '{TValue}'
    typeParameters:
    - id: TKey
    - id: TValue
    return:
      type: '{TValue}'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetValue(Of TKey, TValue)(d As Dictionary(Of TKey, TValue), key As TKey, defaultValue As TValue = Nothing) As TValue
  overload: AdvancedSceneManager.Utility.DictionaryUtility.GetValue*
  nameWithType.vb: DictionaryUtility.GetValue(Of TKey, TValue)(Dictionary(Of TKey, TValue), TKey, TValue)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AdvancedSceneManager.Utility.DictionaryUtility.GetValue(Of TKey, TValue)(System.Collections.Generic.Dictionary(Of TKey, TValue), TKey, TValue)
  name.vb: GetValue(Of TKey, TValue)(Dictionary(Of TKey, TValue), TKey, TValue)
references:
- uid: AdvancedSceneManager.Utility
  commentId: N:AdvancedSceneManager.Utility
  name: AdvancedSceneManager.Utility
  nameWithType: AdvancedSceneManager.Utility
  fullName: AdvancedSceneManager.Utility
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: AdvancedSceneManager.Utility.DictionaryUtility.WithNullKey*
  commentId: Overload:AdvancedSceneManager.Utility.DictionaryUtility.WithNullKey
  name: WithNullKey
  nameWithType: DictionaryUtility.WithNullKey
  fullName: AdvancedSceneManager.Utility.DictionaryUtility.WithNullKey
- uid: System.Collections.Generic.Dictionary{{TKey},{TValue}}
  commentId: T:System.Collections.Generic.Dictionary{``0,``1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TKey}'
  commentId: '!:TKey'
  definition: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: AdvancedSceneManager.Utility.DictionaryUtility.Set*
  commentId: Overload:AdvancedSceneManager.Utility.DictionaryUtility.Set
  name: Set
  nameWithType: DictionaryUtility.Set
  fullName: AdvancedSceneManager.Utility.DictionaryUtility.Set
- uid: '{TValue}'
  commentId: '!:TValue'
  definition: TValue
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: TValue
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: AdvancedSceneManager.Utility.DictionaryUtility.EnsureAdded*
  commentId: Overload:AdvancedSceneManager.Utility.DictionaryUtility.EnsureAdded
  name: EnsureAdded
  nameWithType: DictionaryUtility.EnsureAdded
  fullName: AdvancedSceneManager.Utility.DictionaryUtility.EnsureAdded
- uid: AdvancedSceneManager.Utility.DictionaryUtility.Add*
  commentId: Overload:AdvancedSceneManager.Utility.DictionaryUtility.Add
  name: Add
  nameWithType: DictionaryUtility.Add
  fullName: AdvancedSceneManager.Utility.DictionaryUtility.Add
- uid: System.Collections.Generic.Dictionary{{TKey},{TList}}
  commentId: T:System.Collections.Generic.Dictionary{``0,``1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<TKey, TList>
  nameWithType: Dictionary<TKey, TList>
  fullName: System.Collections.Generic.Dictionary<TKey, TList>
  nameWithType.vb: Dictionary(Of TKey, TList)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TList)
  name.vb: Dictionary(Of TKey, TList)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TList
    nameWithType: TList
    fullName: TList
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TList
    nameWithType: TList
    fullName: TList
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TItem}'
  commentId: '!:TItem'
  definition: TItem
  name: TItem
  nameWithType: TItem
  fullName: TItem
- uid: TItem
  name: TItem
  nameWithType: TItem
  fullName: TItem
- uid: AdvancedSceneManager.Utility.DictionaryUtility.AddRange*
  commentId: Overload:AdvancedSceneManager.Utility.DictionaryUtility.AddRange
  name: AddRange
  nameWithType: DictionaryUtility.AddRange
  fullName: AdvancedSceneManager.Utility.DictionaryUtility.AddRange
- uid: System.Collections.Generic.IEnumerable{{TItem}}
  commentId: T:System.Collections.Generic.IEnumerable{``2}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TItem>
  nameWithType: IEnumerable<TItem>
  fullName: System.Collections.Generic.IEnumerable<TItem>
  nameWithType.vb: IEnumerable(Of TItem)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TItem)
  name.vb: IEnumerable(Of TItem)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TItem}[]'
  isExternal: true
  name: TItem[]
  nameWithType: TItem[]
  fullName: TItem[]
  nameWithType.vb: TItem()
  fullName.vb: TItem()
  name.vb: TItem()
  spec.csharp:
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: AdvancedSceneManager.Utility.DictionaryUtility.Remove*
  commentId: Overload:AdvancedSceneManager.Utility.DictionaryUtility.Remove
  name: Remove
  nameWithType: DictionaryUtility.Remove
  fullName: AdvancedSceneManager.Utility.DictionaryUtility.Remove
- uid: AdvancedSceneManager.Utility.DictionaryUtility.GetValue*
  commentId: Overload:AdvancedSceneManager.Utility.DictionaryUtility.GetValue
  name: GetValue
  nameWithType: DictionaryUtility.GetValue
  fullName: AdvancedSceneManager.Utility.DictionaryUtility.GetValue
