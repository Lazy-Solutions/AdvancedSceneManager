### YamlMime:ManagedReference
items:
- uid: AdvancedSceneManager.Editor.Utility.ListUtility
  commentId: T:AdvancedSceneManager.Editor.Utility.ListUtility
  id: ListUtility
  parent: AdvancedSceneManager.Editor.Utility
  children:
  - AdvancedSceneManager.Editor.Utility.ListUtility.Except``1(System.Collections.Generic.IEnumerable{``0},``0)
  - AdvancedSceneManager.Editor.Utility.ListUtility.Flatten``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}})
  - AdvancedSceneManager.Editor.Utility.ListUtility.ForEach``1(``0[],System.Action{``0,System.Int32})
  - AdvancedSceneManager.Editor.Utility.ListUtility.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})
  - AdvancedSceneManager.Editor.Utility.ListUtility.GroupConsecutive``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})
  - AdvancedSceneManager.Editor.Utility.ListUtility.MoveDown``1(``0[]@,``0)
  - AdvancedSceneManager.Editor.Utility.ListUtility.MoveUp``1(``0[]@,``0)
  langs:
  - csharp
  - vb
  name: ListUtility
  nameWithType: ListUtility
  fullName: AdvancedSceneManager.Editor.Utility.ListUtility
  type: Class
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Utility/Editor/ListUtility.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: ListUtility
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Utility/Editor/ListUtility.cs
    startLine: 11
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Editor.Utility
  summary: Provides methods for working with lists.
  remarks: Only available in editor.
  example: []
  syntax:
    content: public static class ListUtility
    content.vb: Public Module ListUtility
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: AdvancedSceneManager.Editor.Utility.ListUtility.MoveUp``1(``0[]@,``0)
  commentId: M:AdvancedSceneManager.Editor.Utility.ListUtility.MoveUp``1(``0[]@,``0)
  id: MoveUp``1(``0[]@,``0)
  parent: AdvancedSceneManager.Editor.Utility.ListUtility
  langs:
  - csharp
  - vb
  name: MoveUp<T>(ref T[], T)
  nameWithType: ListUtility.MoveUp<T>(ref T[], T)
  fullName: AdvancedSceneManager.Editor.Utility.ListUtility.MoveUp<T>(ref T[], T)
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Utility/Editor/ListUtility.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: MoveUp
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Utility/Editor/ListUtility.cs
    startLine: 15
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Editor.Utility
  summary: Moves the <code data-dev-comment-type="paramref" class="paramref">item</code> up in the <code data-dev-comment-type="paramref" class="paramref">array</code>. Returns false if index is 0 or <code data-dev-comment-type="paramref" class="paramref">item</code> does not exist in <code data-dev-comment-type="paramref" class="paramref">array</code>.
  example: []
  syntax:
    content: public static bool MoveUp<T>(ref T[] array, T item)
    parameters:
    - id: array
      type: '{T}[]'
    - id: item
      type: '{T}'
    typeParameters:
    - id: T
    return:
      type: System.Boolean
    content.vb: Public Shared Function MoveUp(Of T)(ByRef array As T(), item As T) As Boolean
  overload: AdvancedSceneManager.Editor.Utility.ListUtility.MoveUp*
  nameWithType.vb: ListUtility.MoveUp(Of T)(ByRef T(), T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AdvancedSceneManager.Editor.Utility.ListUtility.MoveUp(Of T)(ByRef T(), T)
  name.vb: MoveUp(Of T)(ByRef T(), T)
- uid: AdvancedSceneManager.Editor.Utility.ListUtility.MoveDown``1(``0[]@,``0)
  commentId: M:AdvancedSceneManager.Editor.Utility.ListUtility.MoveDown``1(``0[]@,``0)
  id: MoveDown``1(``0[]@,``0)
  parent: AdvancedSceneManager.Editor.Utility.ListUtility
  langs:
  - csharp
  - vb
  name: MoveDown<T>(ref T[], T)
  nameWithType: ListUtility.MoveDown<T>(ref T[], T)
  fullName: AdvancedSceneManager.Editor.Utility.ListUtility.MoveDown<T>(ref T[], T)
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Utility/Editor/ListUtility.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: MoveDown
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Utility/Editor/ListUtility.cs
    startLine: 30
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Editor.Utility
  summary: Moves the <code data-dev-comment-type="paramref" class="paramref">item</code> up in the <code data-dev-comment-type="paramref" class="paramref">array</code>. Returns false if index is last or <code data-dev-comment-type="paramref" class="paramref">item</code> does not exist in <code data-dev-comment-type="paramref" class="paramref">array</code>.
  example: []
  syntax:
    content: public static bool MoveDown<T>(ref T[] array, T item)
    parameters:
    - id: array
      type: '{T}[]'
    - id: item
      type: '{T}'
    typeParameters:
    - id: T
    return:
      type: System.Boolean
    content.vb: Public Shared Function MoveDown(Of T)(ByRef array As T(), item As T) As Boolean
  overload: AdvancedSceneManager.Editor.Utility.ListUtility.MoveDown*
  nameWithType.vb: ListUtility.MoveDown(Of T)(ByRef T(), T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AdvancedSceneManager.Editor.Utility.ListUtility.MoveDown(Of T)(ByRef T(), T)
  name.vb: MoveDown(Of T)(ByRef T(), T)
- uid: AdvancedSceneManager.Editor.Utility.ListUtility.ForEach``1(``0[],System.Action{``0,System.Int32})
  commentId: M:AdvancedSceneManager.Editor.Utility.ListUtility.ForEach``1(``0[],System.Action{``0,System.Int32})
  id: ForEach``1(``0[],System.Action{``0,System.Int32})
  isExtensionMethod: true
  parent: AdvancedSceneManager.Editor.Utility.ListUtility
  langs:
  - csharp
  - vb
  name: ForEach<T>(T[], Action<T, Int32>)
  nameWithType: ListUtility.ForEach<T>(T[], Action<T, Int32>)
  fullName: AdvancedSceneManager.Editor.Utility.ListUtility.ForEach<T>(T[], System.Action<T, System.Int32>)
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Utility/Editor/ListUtility.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: ForEach
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Utility/Editor/ListUtility.cs
    startLine: 45
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Editor.Utility
  summary: Runs <code data-dev-comment-type="paramref" class="paramref">action</code> on each item in <code data-dev-comment-type="paramref" class="paramref">list</code>.
  example: []
  syntax:
    content: public static void ForEach<T>(this T[] list, Action<T, int> action)
    parameters:
    - id: list
      type: '{T}[]'
    - id: action
      type: System.Action{{T},System.Int32}
    typeParameters:
    - id: T
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub ForEach(Of T)(list As T(), action As Action(Of T, Integer))
  overload: AdvancedSceneManager.Editor.Utility.ListUtility.ForEach*
  nameWithType.vb: ListUtility.ForEach(Of T)(T(), Action(Of T, Int32))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AdvancedSceneManager.Editor.Utility.ListUtility.ForEach(Of T)(T(), System.Action(Of T, System.Int32))
  name.vb: ForEach(Of T)(T(), Action(Of T, Int32))
- uid: AdvancedSceneManager.Editor.Utility.ListUtility.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})
  commentId: M:AdvancedSceneManager.Editor.Utility.ListUtility.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})
  id: ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})
  isExtensionMethod: true
  parent: AdvancedSceneManager.Editor.Utility.ListUtility
  langs:
  - csharp
  - vb
  name: ForEach<T>(IEnumerable<T>, Action<T, Int32>)
  nameWithType: ListUtility.ForEach<T>(IEnumerable<T>, Action<T, Int32>)
  fullName: AdvancedSceneManager.Editor.Utility.ListUtility.ForEach<T>(System.Collections.Generic.IEnumerable<T>, System.Action<T, System.Int32>)
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Utility/Editor/ListUtility.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: ForEach
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Utility/Editor/ListUtility.cs
    startLine: 52
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Editor.Utility
  summary: Runs <code data-dev-comment-type="paramref" class="paramref">action</code> on each item in <code data-dev-comment-type="paramref" class="paramref">list</code>.
  example: []
  syntax:
    content: public static void ForEach<T>(this IEnumerable<T> list, Action<T, int> action)
    parameters:
    - id: list
      type: System.Collections.Generic.IEnumerable{{T}}
    - id: action
      type: System.Action{{T},System.Int32}
    typeParameters:
    - id: T
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub ForEach(Of T)(list As IEnumerable(Of T), action As Action(Of T, Integer))
  overload: AdvancedSceneManager.Editor.Utility.ListUtility.ForEach*
  nameWithType.vb: ListUtility.ForEach(Of T)(IEnumerable(Of T), Action(Of T, Int32))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AdvancedSceneManager.Editor.Utility.ListUtility.ForEach(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Action(Of T, System.Int32))
  name.vb: ForEach(Of T)(IEnumerable(Of T), Action(Of T, Int32))
- uid: AdvancedSceneManager.Editor.Utility.ListUtility.Flatten``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}})
  commentId: M:AdvancedSceneManager.Editor.Utility.ListUtility.Flatten``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}})
  id: Flatten``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}})
  isExtensionMethod: true
  parent: AdvancedSceneManager.Editor.Utility.ListUtility
  langs:
  - csharp
  - vb
  name: Flatten<T>(IEnumerable<T>, Func<T, IEnumerable<T>>)
  nameWithType: ListUtility.Flatten<T>(IEnumerable<T>, Func<T, IEnumerable<T>>)
  fullName: AdvancedSceneManager.Editor.Utility.ListUtility.Flatten<T>(System.Collections.Generic.IEnumerable<T>, System.Func<T, System.Collections.Generic.IEnumerable<T>>)
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Utility/Editor/ListUtility.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: Flatten
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Utility/Editor/ListUtility.cs
    startLine: 62
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Editor.Utility
  summary: "\n<p>Flattens a multidimensional list.</p>\n<p>Usage: list.Flatten(item => item.subItems);</p>\n"
  example: []
  syntax:
    content: public static IEnumerable<T> Flatten<T>(this IEnumerable<T> list, Func<T, IEnumerable<T>> getSubList)
    parameters:
    - id: list
      type: System.Collections.Generic.IEnumerable{{T}}
    - id: getSubList
      type: System.Func{{T},System.Collections.Generic.IEnumerable{{T}}}
    typeParameters:
    - id: T
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Flatten(Of T)(list As IEnumerable(Of T), getSubList As Func(Of T, IEnumerable(Of T))) As IEnumerable(Of T)
  overload: AdvancedSceneManager.Editor.Utility.ListUtility.Flatten*
  nameWithType.vb: ListUtility.Flatten(Of T)(IEnumerable(Of T), Func(Of T, IEnumerable(Of T)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AdvancedSceneManager.Editor.Utility.ListUtility.Flatten(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, System.Collections.Generic.IEnumerable(Of T)))
  name.vb: Flatten(Of T)(IEnumerable(Of T), Func(Of T, IEnumerable(Of T)))
- uid: AdvancedSceneManager.Editor.Utility.ListUtility.Except``1(System.Collections.Generic.IEnumerable{``0},``0)
  commentId: M:AdvancedSceneManager.Editor.Utility.ListUtility.Except``1(System.Collections.Generic.IEnumerable{``0},``0)
  id: Except``1(System.Collections.Generic.IEnumerable{``0},``0)
  isExtensionMethod: true
  parent: AdvancedSceneManager.Editor.Utility.ListUtility
  langs:
  - csharp
  - vb
  name: Except<T>(IEnumerable<T>, T)
  nameWithType: ListUtility.Except<T>(IEnumerable<T>, T)
  fullName: AdvancedSceneManager.Editor.Utility.ListUtility.Except<T>(System.Collections.Generic.IEnumerable<T>, T)
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Utility/Editor/ListUtility.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: Except
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Utility/Editor/ListUtility.cs
    startLine: 75
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Editor.Utility
  summary: Excludes the items from the list.
  example: []
  syntax:
    content: public static IEnumerable<T> Except<T>(this IEnumerable<T> list, T item)
    parameters:
    - id: list
      type: System.Collections.Generic.IEnumerable{{T}}
    - id: item
      type: '{T}'
    typeParameters:
    - id: T
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Except(Of T)(list As IEnumerable(Of T), item As T) As IEnumerable(Of T)
  overload: AdvancedSceneManager.Editor.Utility.ListUtility.Except*
  nameWithType.vb: ListUtility.Except(Of T)(IEnumerable(Of T), T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AdvancedSceneManager.Editor.Utility.ListUtility.Except(Of T)(System.Collections.Generic.IEnumerable(Of T), T)
  name.vb: Except(Of T)(IEnumerable(Of T), T)
- uid: AdvancedSceneManager.Editor.Utility.ListUtility.GroupConsecutive``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})
  commentId: M:AdvancedSceneManager.Editor.Utility.ListUtility.GroupConsecutive``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})
  id: GroupConsecutive``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})
  isExtensionMethod: true
  parent: AdvancedSceneManager.Editor.Utility.ListUtility
  langs:
  - csharp
  - vb
  name: GroupConsecutive<T>(IEnumerable<T>, Func<T, T, Boolean>)
  nameWithType: ListUtility.GroupConsecutive<T>(IEnumerable<T>, Func<T, T, Boolean>)
  fullName: AdvancedSceneManager.Editor.Utility.ListUtility.GroupConsecutive<T>(System.Collections.Generic.IEnumerable<T>, System.Func<T, T, System.Boolean>)
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Utility/Editor/ListUtility.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: GroupConsecutive
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Utility/Editor/ListUtility.cs
    startLine: 79
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Editor.Utility
  summary: Groups consecutive items together.
  example: []
  syntax:
    content: public static IEnumerable<IEnumerable<T>> GroupConsecutive<T>(this IEnumerable<T> list, Func<T, T, bool> compare)
    parameters:
    - id: list
      type: System.Collections.Generic.IEnumerable{{T}}
    - id: compare
      type: System.Func{{T},{T},System.Boolean}
    typeParameters:
    - id: T
    return:
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{{T}}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GroupConsecutive(Of T)(list As IEnumerable(Of T), compare As Func(Of T, T, Boolean)) As IEnumerable(Of IEnumerable(Of T))
  overload: AdvancedSceneManager.Editor.Utility.ListUtility.GroupConsecutive*
  nameWithType.vb: ListUtility.GroupConsecutive(Of T)(IEnumerable(Of T), Func(Of T, T, Boolean))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AdvancedSceneManager.Editor.Utility.ListUtility.GroupConsecutive(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, T, System.Boolean))
  name.vb: GroupConsecutive(Of T)(IEnumerable(Of T), Func(Of T, T, Boolean))
references:
- uid: AdvancedSceneManager.Editor.Utility
  commentId: N:AdvancedSceneManager.Editor.Utility
  name: AdvancedSceneManager.Editor.Utility
  nameWithType: AdvancedSceneManager.Editor.Utility
  fullName: AdvancedSceneManager.Editor.Utility
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: AdvancedSceneManager.Editor.Utility.ListUtility.MoveUp*
  commentId: Overload:AdvancedSceneManager.Editor.Utility.ListUtility.MoveUp
  name: MoveUp
  nameWithType: ListUtility.MoveUp
  fullName: AdvancedSceneManager.Editor.Utility.ListUtility.MoveUp
- uid: '{T}[]'
  isExternal: true
  name: T[]
  nameWithType: T[]
  fullName: T[]
  nameWithType.vb: T()
  fullName.vb: T()
  name.vb: T()
  spec.csharp:
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: AdvancedSceneManager.Editor.Utility.ListUtility.MoveDown*
  commentId: Overload:AdvancedSceneManager.Editor.Utility.ListUtility.MoveDown
  name: MoveDown
  nameWithType: ListUtility.MoveDown
  fullName: AdvancedSceneManager.Editor.Utility.ListUtility.MoveDown
- uid: AdvancedSceneManager.Editor.Utility.ListUtility.ForEach*
  commentId: Overload:AdvancedSceneManager.Editor.Utility.ListUtility.ForEach
  name: ForEach
  nameWithType: ListUtility.ForEach
  fullName: AdvancedSceneManager.Editor.Utility.ListUtility.ForEach
- uid: System.Action{{T},System.Int32}
  commentId: T:System.Action{``0,System.Int32}
  parent: System
  definition: System.Action`2
  name: Action<T, Int32>
  nameWithType: Action<T, Int32>
  fullName: System.Action<T, System.Int32>
  nameWithType.vb: Action(Of T, Int32)
  fullName.vb: System.Action(Of T, System.Int32)
  name.vb: Action(Of T, Int32)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`2
  commentId: T:System.Action`2
  isExternal: true
  name: Action<T1, T2>
  nameWithType: Action<T1, T2>
  fullName: System.Action<T1, T2>
  nameWithType.vb: Action(Of T1, T2)
  fullName.vb: System.Action(Of T1, T2)
  name.vb: Action(Of T1, T2)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: AdvancedSceneManager.Editor.Utility.ListUtility.Flatten*
  commentId: Overload:AdvancedSceneManager.Editor.Utility.ListUtility.Flatten
  name: Flatten
  nameWithType: ListUtility.Flatten
  fullName: AdvancedSceneManager.Editor.Utility.ListUtility.Flatten
- uid: System.Func{{T},System.Collections.Generic.IEnumerable{{T}}}
  commentId: T:System.Func{``0,System.Collections.Generic.IEnumerable{``0}}
  parent: System
  definition: System.Func`2
  name: Func<T, IEnumerable<T>>
  nameWithType: Func<T, IEnumerable<T>>
  fullName: System.Func<T, System.Collections.Generic.IEnumerable<T>>
  nameWithType.vb: Func(Of T, IEnumerable(Of T))
  fullName.vb: System.Func(Of T, System.Collections.Generic.IEnumerable(Of T))
  name.vb: Func(Of T, IEnumerable(Of T))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: AdvancedSceneManager.Editor.Utility.ListUtility.Except*
  commentId: Overload:AdvancedSceneManager.Editor.Utility.ListUtility.Except
  name: Except
  nameWithType: ListUtility.Except
  fullName: AdvancedSceneManager.Editor.Utility.ListUtility.Except
- uid: AdvancedSceneManager.Editor.Utility.ListUtility.GroupConsecutive*
  commentId: Overload:AdvancedSceneManager.Editor.Utility.ListUtility.GroupConsecutive
  name: GroupConsecutive
  nameWithType: ListUtility.GroupConsecutive
  fullName: AdvancedSceneManager.Editor.Utility.ListUtility.GroupConsecutive
- uid: System.Func{{T},{T},System.Boolean}
  commentId: T:System.Func{``0,``0,System.Boolean}
  parent: System
  definition: System.Func`3
  name: Func<T, T, Boolean>
  nameWithType: Func<T, T, Boolean>
  fullName: System.Func<T, T, System.Boolean>
  nameWithType.vb: Func(Of T, T, Boolean)
  fullName.vb: System.Func(Of T, T, System.Boolean)
  name.vb: Func(Of T, T, Boolean)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{{T}}}
  commentId: T:System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<IEnumerable<T>>
  nameWithType: IEnumerable<IEnumerable<T>>
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.IEnumerable<T>>
  nameWithType.vb: IEnumerable(Of IEnumerable(Of T))
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.IEnumerable(Of T))
  name.vb: IEnumerable(Of IEnumerable(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`3
  commentId: T:System.Func`3
  isExternal: true
  name: Func<T1, T2, TResult>
  nameWithType: Func<T1, T2, TResult>
  fullName: System.Func<T1, T2, TResult>
  nameWithType.vb: Func(Of T1, T2, TResult)
  fullName.vb: System.Func(Of T1, T2, TResult)
  name.vb: Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
