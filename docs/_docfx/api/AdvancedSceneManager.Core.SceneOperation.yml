### YamlMime:ManagedReference
items:
- uid: AdvancedSceneManager.Core.SceneOperation
  commentId: T:AdvancedSceneManager.Core.SceneOperation
  id: SceneOperation
  parent: AdvancedSceneManager.Core
  children:
  - AdvancedSceneManager.Core.SceneOperation._extCallbacks
  - AdvancedSceneManager.Core.SceneOperation.actions
  - AdvancedSceneManager.Core.SceneOperation.Add(AdvancedSceneManager.Core.SceneManagerBase,System.Boolean)
  - AdvancedSceneManager.Core.SceneOperation.Add``1(AdvancedSceneManager.Core.SceneManagerBase,System.Boolean)
  - AdvancedSceneManager.Core.SceneOperation.Add``1(AdvancedSceneManager.Core.SceneManagerBase,System.Func{AdvancedSceneManager.Core.SceneOperation,``0},System.Boolean)
  - AdvancedSceneManager.Core.SceneOperation.AddCallback(AdvancedSceneManager.Core.Callback)
  - AdvancedSceneManager.Core.SceneOperation.AdvancedSceneManager#Utility#IQueueable#OnCancel
  - AdvancedSceneManager.Core.SceneOperation.AdvancedSceneManager#Utility#IQueueable#OnTurn(System.Action)
  - AdvancedSceneManager.Core.SceneOperation.AsPersistent(AdvancedSceneManager.Models.SceneCloseBehavior)
  - AdvancedSceneManager.Core.SceneOperation.callbacks
  - AdvancedSceneManager.Core.SceneOperation.Cancel(System.Action)
  - AdvancedSceneManager.Core.SceneOperation.cancelled
  - AdvancedSceneManager.Core.SceneOperation.clearUnusedAssets
  - AdvancedSceneManager.Core.SceneOperation.close
  - AdvancedSceneManager.Core.SceneOperation.Close(AdvancedSceneManager.Core.OpenSceneInfo[])
  - AdvancedSceneManager.Core.SceneOperation.Close(System.Boolean,AdvancedSceneManager.Core.OpenSceneInfo[])
  - AdvancedSceneManager.Core.SceneOperation.Close(System.Collections.Generic.IEnumerable{AdvancedSceneManager.Core.OpenSceneInfo},System.Boolean)
  - AdvancedSceneManager.Core.SceneOperation.closeBehavior
  - AdvancedSceneManager.Core.SceneOperation.collection
  - AdvancedSceneManager.Core.SceneOperation.current
  - AdvancedSceneManager.Core.SceneOperation.customActions
  - AdvancedSceneManager.Core.SceneOperation.doCollectionCallbacks
  - AdvancedSceneManager.Core.SceneOperation.done
  - AdvancedSceneManager.Core.SceneOperation.FindActions``1
  - AdvancedSceneManager.Core.SceneOperation.FindLastAction``1
  - AdvancedSceneManager.Core.SceneOperation.friendlyText
  - AdvancedSceneManager.Core.SceneOperation.isDone
  - AdvancedSceneManager.Core.SceneOperation.keepWaiting
  - AdvancedSceneManager.Core.SceneOperation.loadingPriority
  - AdvancedSceneManager.Core.SceneOperation.loadingScreen
  - AdvancedSceneManager.Core.SceneOperation.loadingScreenCallback
  - AdvancedSceneManager.Core.SceneOperation.open
  - AdvancedSceneManager.Core.SceneOperation.Open(AdvancedSceneManager.Models.Scene[])
  - AdvancedSceneManager.Core.SceneOperation.Open(System.Collections.Generic.IEnumerable{AdvancedSceneManager.Models.Scene},System.Boolean)
  - AdvancedSceneManager.Core.SceneOperation.openedLoadingScreen
  - AdvancedSceneManager.Core.SceneOperation.openedScenes
  - AdvancedSceneManager.Core.SceneOperation.phase
  - AdvancedSceneManager.Core.SceneOperation.RemoveCallback(AdvancedSceneManager.Core.Callback)
  - AdvancedSceneManager.Core.SceneOperation.reopen
  - AdvancedSceneManager.Core.SceneOperation.Reopen(AdvancedSceneManager.Core.OpenSceneInfo[])
  - AdvancedSceneManager.Core.SceneOperation.Reopen(AdvancedSceneManager.Models.Scene[])
  - AdvancedSceneManager.Core.SceneOperation.Reopen(System.Collections.Generic.IEnumerable{AdvancedSceneManager.Core.OpenSceneInfo})
  - AdvancedSceneManager.Core.SceneOperation.Reopen(System.Collections.Generic.IEnumerable{AdvancedSceneManager.Models.Scene})
  - AdvancedSceneManager.Core.SceneOperation.sceneManager
  - AdvancedSceneManager.Core.SceneOperation.totalProgress
  - AdvancedSceneManager.Core.SceneOperation.useLoadingScreen
  - AdvancedSceneManager.Core.SceneOperation.WithAction(AdvancedSceneManager.Core.Actions.SceneAction[])
  - AdvancedSceneManager.Core.SceneOperation.WithCallback(AdvancedSceneManager.Core.Callback)
  - AdvancedSceneManager.Core.SceneOperation.WithClearUnusedAssets(System.Boolean)
  - AdvancedSceneManager.Core.SceneOperation.WithCollection(AdvancedSceneManager.Models.SceneCollection,System.Boolean)
  - AdvancedSceneManager.Core.SceneOperation.WithFriendlyText(System.String)
  - AdvancedSceneManager.Core.SceneOperation.WithLoadingPriority(UnityEngine.ThreadPriority)
  - AdvancedSceneManager.Core.SceneOperation.WithLoadingScreen(AdvancedSceneManager.Models.Scene)
  - AdvancedSceneManager.Core.SceneOperation.WithLoadingScreen(System.Boolean)
  - AdvancedSceneManager.Core.SceneOperation.WithLoadingScreenCallback(System.Action{AdvancedSceneManager.Callbacks.LoadingScreen})
  langs:
  - csharp
  - vb
  name: SceneOperation
  nameWithType: SceneOperation
  fullName: AdvancedSceneManager.Core.SceneOperation
  type: Class
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/SceneOperation.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: SceneOperation
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/SceneOperation.cs
    startLine: 350
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core
  summary: 'A scene operation is a queueable operation that can open or close scenes. See also: <xref href="AdvancedSceneManager.Core.Actions.SceneAction" data-throw-if-not-resolved="false"></xref>.'
  remarks: 'See also: <xref href="AdvancedSceneManager.Core.SceneOperation%601" data-throw-if-not-resolved="false"></xref>.'
  example: []
  syntax:
    content: 'public class SceneOperation : CustomYieldInstruction, IEnumerator, IQueueable'
    content.vb: >-
      Public Class SceneOperation
          Inherits CustomYieldInstruction
          Implements IEnumerator, IQueueable
  inheritance:
  - System.Object
  - UnityEngine.CustomYieldInstruction
  derivedClasses:
  - AdvancedSceneManager.Core.SceneOperation`1
  implements:
  - AdvancedSceneManager.Utility.IQueueable
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: AdvancedSceneManager.Core.SceneOperation.done
  commentId: P:AdvancedSceneManager.Core.SceneOperation.done
  id: done
  parent: AdvancedSceneManager.Core.SceneOperation
  langs:
  - csharp
  - vb
  name: done
  nameWithType: SceneOperation.done
  fullName: AdvancedSceneManager.Core.SceneOperation.done
  type: Property
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/SceneOperation.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: done
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/SceneOperation.cs
    startLine: 356
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core
  summary: Gets a <xref href="AdvancedSceneManager.Core.SceneOperation" data-throw-if-not-resolved="false"></xref> that has already completed.
  example: []
  syntax:
    content: public static SceneOperation done { get; }
    parameters: []
    return:
      type: AdvancedSceneManager.Core.SceneOperation
    content.vb: Public Shared ReadOnly Property done As SceneOperation
  overload: AdvancedSceneManager.Core.SceneOperation.done*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: AdvancedSceneManager.Core.SceneOperation.Add(AdvancedSceneManager.Core.SceneManagerBase,System.Boolean)
  commentId: M:AdvancedSceneManager.Core.SceneOperation.Add(AdvancedSceneManager.Core.SceneManagerBase,System.Boolean)
  id: Add(AdvancedSceneManager.Core.SceneManagerBase,System.Boolean)
  parent: AdvancedSceneManager.Core.SceneOperation
  langs:
  - csharp
  - vb
  name: Add(SceneManagerBase, Boolean)
  nameWithType: SceneOperation.Add(SceneManagerBase, Boolean)
  fullName: AdvancedSceneManager.Core.SceneOperation.Add(AdvancedSceneManager.Core.SceneManagerBase, System.Boolean)
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/SceneOperation.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: Add
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/SceneOperation.cs
    startLine: 371
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core
  summary: Adds a new scene operation to the queue.
  example: []
  syntax:
    content: public static SceneOperation Add(SceneManagerBase sceneManager, bool ignoreQueue = false)
    parameters:
    - id: sceneManager
      type: AdvancedSceneManager.Core.SceneManagerBase
      description: The scene manager that should manage the scenes when opened.
    - id: ignoreQueue
      type: System.Boolean
      description: Sets whatever this operation should ignore the queue, and start immediately.
    return:
      type: AdvancedSceneManager.Core.SceneOperation
    content.vb: Public Shared Function Add(sceneManager As SceneManagerBase, ignoreQueue As Boolean = False) As SceneOperation
  overload: AdvancedSceneManager.Core.SceneOperation.Add*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: AdvancedSceneManager.Core.SceneOperation.Add``1(AdvancedSceneManager.Core.SceneManagerBase,System.Boolean)
  commentId: M:AdvancedSceneManager.Core.SceneOperation.Add``1(AdvancedSceneManager.Core.SceneManagerBase,System.Boolean)
  id: Add``1(AdvancedSceneManager.Core.SceneManagerBase,System.Boolean)
  parent: AdvancedSceneManager.Core.SceneOperation
  langs:
  - csharp
  - vb
  name: Add<ReturnValue>(SceneManagerBase, Boolean)
  nameWithType: SceneOperation.Add<ReturnValue>(SceneManagerBase, Boolean)
  fullName: AdvancedSceneManager.Core.SceneOperation.Add<ReturnValue>(AdvancedSceneManager.Core.SceneManagerBase, System.Boolean)
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/SceneOperation.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: Add
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/SceneOperation.cs
    startLine: 375
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core
  summary: Adds a new scene operation to the queue.
  example: []
  syntax:
    content: public static SceneOperation<ReturnValue> Add<ReturnValue>(SceneManagerBase sceneManager, bool ignoreQueue = false)
    parameters:
    - id: sceneManager
      type: AdvancedSceneManager.Core.SceneManagerBase
      description: The scene manager that should manage the scenes when opened.
    - id: ignoreQueue
      type: System.Boolean
      description: Sets whatever this operation should ignore the queue, and start immediately.
    typeParameters:
    - id: ReturnValue
    return:
      type: AdvancedSceneManager.Core.SceneOperation{{ReturnValue}}
    content.vb: Public Shared Function Add(Of ReturnValue)(sceneManager As SceneManagerBase, ignoreQueue As Boolean = False) As SceneOperation(Of ReturnValue)
  overload: AdvancedSceneManager.Core.SceneOperation.Add*
  nameWithType.vb: SceneOperation.Add(Of ReturnValue)(SceneManagerBase, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AdvancedSceneManager.Core.SceneOperation.Add(Of ReturnValue)(AdvancedSceneManager.Core.SceneManagerBase, System.Boolean)
  name.vb: Add(Of ReturnValue)(SceneManagerBase, Boolean)
- uid: AdvancedSceneManager.Core.SceneOperation.Add``1(AdvancedSceneManager.Core.SceneManagerBase,System.Func{AdvancedSceneManager.Core.SceneOperation,``0},System.Boolean)
  commentId: M:AdvancedSceneManager.Core.SceneOperation.Add``1(AdvancedSceneManager.Core.SceneManagerBase,System.Func{AdvancedSceneManager.Core.SceneOperation,``0},System.Boolean)
  id: Add``1(AdvancedSceneManager.Core.SceneManagerBase,System.Func{AdvancedSceneManager.Core.SceneOperation,``0},System.Boolean)
  parent: AdvancedSceneManager.Core.SceneOperation
  langs:
  - csharp
  - vb
  name: Add<ReturnValue>(SceneManagerBase, Func<SceneOperation, ReturnValue>, Boolean)
  nameWithType: SceneOperation.Add<ReturnValue>(SceneManagerBase, Func<SceneOperation, ReturnValue>, Boolean)
  fullName: AdvancedSceneManager.Core.SceneOperation.Add<ReturnValue>(AdvancedSceneManager.Core.SceneManagerBase, System.Func<AdvancedSceneManager.Core.SceneOperation, ReturnValue>, System.Boolean)
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/SceneOperation.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: Add
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/SceneOperation.cs
    startLine: 379
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core
  summary: Adds a new scene operation to the queue.
  example: []
  syntax:
    content: public static SceneOperation<ReturnValue> Add<ReturnValue>(SceneManagerBase sceneManager, Func<SceneOperation, ReturnValue> return, bool ignoreQueue = false)
    parameters:
    - id: sceneManager
      type: AdvancedSceneManager.Core.SceneManagerBase
    - id: return
      type: System.Func{AdvancedSceneManager.Core.SceneOperation,{ReturnValue}}
    - id: ignoreQueue
      type: System.Boolean
    typeParameters:
    - id: ReturnValue
    return:
      type: AdvancedSceneManager.Core.SceneOperation{{ReturnValue}}
    content.vb: Public Shared Function Add(Of ReturnValue)(sceneManager As SceneManagerBase, return As Func(Of SceneOperation, ReturnValue), ignoreQueue As Boolean = False) As SceneOperation(Of ReturnValue)
  overload: AdvancedSceneManager.Core.SceneOperation.Add*
  nameWithType.vb: SceneOperation.Add(Of ReturnValue)(SceneManagerBase, Func(Of SceneOperation, ReturnValue), Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AdvancedSceneManager.Core.SceneOperation.Add(Of ReturnValue)(AdvancedSceneManager.Core.SceneManagerBase, System.Func(Of AdvancedSceneManager.Core.SceneOperation, ReturnValue), System.Boolean)
  name.vb: Add(Of ReturnValue)(SceneManagerBase, Func(Of SceneOperation, ReturnValue), Boolean)
- uid: AdvancedSceneManager.Core.SceneOperation.AdvancedSceneManager#Utility#IQueueable#OnTurn(System.Action)
  commentId: M:AdvancedSceneManager.Core.SceneOperation.AdvancedSceneManager#Utility#IQueueable#OnTurn(System.Action)
  id: AdvancedSceneManager#Utility#IQueueable#OnTurn(System.Action)
  isEii: true
  parent: AdvancedSceneManager.Core.SceneOperation
  langs:
  - csharp
  - vb
  name: IQueueable.OnTurn(Action)
  nameWithType: SceneOperation.IQueueable.OnTurn(Action)
  fullName: AdvancedSceneManager.Core.SceneOperation.AdvancedSceneManager.Utility.IQueueable.OnTurn(System.Action)
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/SceneOperation.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: AdvancedSceneManager.Utility.IQueueable.OnTurn
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/SceneOperation.cs
    startLine: 382
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core
  syntax:
    content: void IQueueable.OnTurn(Action onComplete)
    parameters:
    - id: onComplete
      type: System.Action
    content.vb: Sub AdvancedSceneManager.Utility.IQueueable.OnTurn(onComplete As Action) Implements IQueueable.OnTurn
  overload: AdvancedSceneManager.Core.SceneOperation.AdvancedSceneManager#Utility#IQueueable#OnTurn*
  implements:
  - AdvancedSceneManager.Utility.IQueueable.OnTurn(System.Action)
  nameWithType.vb: SceneOperation.AdvancedSceneManager.Utility.IQueueable.OnTurn(Action)
  name.vb: AdvancedSceneManager.Utility.IQueueable.OnTurn(Action)
- uid: AdvancedSceneManager.Core.SceneOperation.AdvancedSceneManager#Utility#IQueueable#OnCancel
  commentId: M:AdvancedSceneManager.Core.SceneOperation.AdvancedSceneManager#Utility#IQueueable#OnCancel
  id: AdvancedSceneManager#Utility#IQueueable#OnCancel
  isEii: true
  parent: AdvancedSceneManager.Core.SceneOperation
  langs:
  - csharp
  - vb
  name: IQueueable.OnCancel()
  nameWithType: SceneOperation.IQueueable.OnCancel()
  fullName: AdvancedSceneManager.Core.SceneOperation.AdvancedSceneManager.Utility.IQueueable.OnCancel()
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/SceneOperation.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: AdvancedSceneManager.Utility.IQueueable.OnCancel
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/SceneOperation.cs
    startLine: 389
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core
  syntax:
    content: void IQueueable.OnCancel()
    content.vb: Sub AdvancedSceneManager.Utility.IQueueable.OnCancel Implements IQueueable.OnCancel
  overload: AdvancedSceneManager.Core.SceneOperation.AdvancedSceneManager#Utility#IQueueable#OnCancel*
  implements:
  - AdvancedSceneManager.Utility.IQueueable.OnCancel
  nameWithType.vb: SceneOperation.AdvancedSceneManager.Utility.IQueueable.OnCancel()
  name.vb: AdvancedSceneManager.Utility.IQueueable.OnCancel()
- uid: AdvancedSceneManager.Core.SceneOperation.friendlyText
  commentId: P:AdvancedSceneManager.Core.SceneOperation.friendlyText
  id: friendlyText
  parent: AdvancedSceneManager.Core.SceneOperation
  langs:
  - csharp
  - vb
  name: friendlyText
  nameWithType: SceneOperation.friendlyText
  fullName: AdvancedSceneManager.Core.SceneOperation.friendlyText
  type: Property
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/SceneOperation.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: friendlyText
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/SceneOperation.cs
    startLine: 398
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core
  syntax:
    content: public string friendlyText { get; protected set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property friendlyText As String
  overload: AdvancedSceneManager.Core.SceneOperation.friendlyText*
  modifiers.csharp:
  - public
  - get
  - protected set
  modifiers.vb:
  - Public
  - Get
  - Protected Set
- uid: AdvancedSceneManager.Core.SceneOperation.WithFriendlyText(System.String)
  commentId: M:AdvancedSceneManager.Core.SceneOperation.WithFriendlyText(System.String)
  id: WithFriendlyText(System.String)
  parent: AdvancedSceneManager.Core.SceneOperation
  langs:
  - csharp
  - vb
  name: WithFriendlyText(String)
  nameWithType: SceneOperation.WithFriendlyText(String)
  fullName: AdvancedSceneManager.Core.SceneOperation.WithFriendlyText(System.String)
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/SceneOperation.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: WithFriendlyText
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/SceneOperation.cs
    startLine: 400
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core
  syntax:
    content: public SceneOperation WithFriendlyText(string text)
    parameters:
    - id: text
      type: System.String
    return:
      type: AdvancedSceneManager.Core.SceneOperation
    content.vb: Public Function WithFriendlyText(text As String) As SceneOperation
  overload: AdvancedSceneManager.Core.SceneOperation.WithFriendlyText*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AdvancedSceneManager.Core.SceneOperation.open
  commentId: P:AdvancedSceneManager.Core.SceneOperation.open
  id: open
  parent: AdvancedSceneManager.Core.SceneOperation
  langs:
  - csharp
  - vb
  name: open
  nameWithType: SceneOperation.open
  fullName: AdvancedSceneManager.Core.SceneOperation.open
  type: Property
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/SceneOperation.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: open
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/SceneOperation.cs
    startLine: 412
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core
  example: []
  syntax:
    content: public ReadOnlyCollection<(Scene scene, bool force)> open { get; }
    parameters: []
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.ValueTuple{AdvancedSceneManager.Models.Scene,System.Boolean}}
    content.vb: Public ReadOnly Property open As ReadOnlyCollection(Of(scene As Scene, force As Boolean)(Of Scene , Boolean))
  overload: AdvancedSceneManager.Core.SceneOperation.open*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: AdvancedSceneManager.Core.SceneOperation.close
  commentId: P:AdvancedSceneManager.Core.SceneOperation.close
  id: close
  parent: AdvancedSceneManager.Core.SceneOperation
  langs:
  - csharp
  - vb
  name: close
  nameWithType: SceneOperation.close
  fullName: AdvancedSceneManager.Core.SceneOperation.close
  type: Property
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/SceneOperation.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: close
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/SceneOperation.cs
    startLine: 414
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core
  example: []
  syntax:
    content: public ReadOnlyCollection<(OpenSceneInfo scene, bool force)> close { get; }
    parameters: []
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.ValueTuple{AdvancedSceneManager.Core.OpenSceneInfo,System.Boolean}}
    content.vb: Public ReadOnly Property close As ReadOnlyCollection(Of(scene As OpenSceneInfo, force As Boolean)(Of OpenSceneInfo , Boolean))
  overload: AdvancedSceneManager.Core.SceneOperation.close*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: AdvancedSceneManager.Core.SceneOperation.reopen
  commentId: P:AdvancedSceneManager.Core.SceneOperation.reopen
  id: reopen
  parent: AdvancedSceneManager.Core.SceneOperation
  langs:
  - csharp
  - vb
  name: reopen
  nameWithType: SceneOperation.reopen
  fullName: AdvancedSceneManager.Core.SceneOperation.reopen
  type: Property
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/SceneOperation.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: reopen
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/SceneOperation.cs
    startLine: 416
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core
  example: []
  syntax:
    content: public ReadOnlyCollection<OpenSceneInfo> reopen { get; }
    parameters: []
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{AdvancedSceneManager.Core.OpenSceneInfo}
    content.vb: Public ReadOnly Property reopen As ReadOnlyCollection(Of OpenSceneInfo)
  overload: AdvancedSceneManager.Core.SceneOperation.reopen*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: AdvancedSceneManager.Core.SceneOperation.customActions
  commentId: P:AdvancedSceneManager.Core.SceneOperation.customActions
  id: customActions
  parent: AdvancedSceneManager.Core.SceneOperation
  langs:
  - csharp
  - vb
  name: customActions
  nameWithType: SceneOperation.customActions
  fullName: AdvancedSceneManager.Core.SceneOperation.customActions
  type: Property
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/SceneOperation.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: customActions
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/SceneOperation.cs
    startLine: 418
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core
  example: []
  syntax:
    content: public ReadOnlyCollection<SceneAction> customActions { get; }
    parameters: []
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{AdvancedSceneManager.Core.Actions.SceneAction}
    content.vb: Public ReadOnly Property customActions As ReadOnlyCollection(Of SceneAction)
  overload: AdvancedSceneManager.Core.SceneOperation.customActions*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: AdvancedSceneManager.Core.SceneOperation.callbacks
  commentId: P:AdvancedSceneManager.Core.SceneOperation.callbacks
  id: callbacks
  parent: AdvancedSceneManager.Core.SceneOperation
  langs:
  - csharp
  - vb
  name: callbacks
  nameWithType: SceneOperation.callbacks
  fullName: AdvancedSceneManager.Core.SceneOperation.callbacks
  type: Property
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/SceneOperation.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: callbacks
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/SceneOperation.cs
    startLine: 420
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core
  example: []
  syntax:
    content: public ReadOnlyCollection<Callback> callbacks { get; }
    parameters: []
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{AdvancedSceneManager.Core.Callback}
    content.vb: Public ReadOnly Property callbacks As ReadOnlyCollection(Of Callback)
  overload: AdvancedSceneManager.Core.SceneOperation.callbacks*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: AdvancedSceneManager.Core.SceneOperation.collection
  commentId: P:AdvancedSceneManager.Core.SceneOperation.collection
  id: collection
  parent: AdvancedSceneManager.Core.SceneOperation
  langs:
  - csharp
  - vb
  name: collection
  nameWithType: SceneOperation.collection
  fullName: AdvancedSceneManager.Core.SceneOperation.collection
  type: Property
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/SceneOperation.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: collection
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/SceneOperation.cs
    startLine: 422
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core
  example: []
  syntax:
    content: public SceneCollection collection { get; }
    parameters: []
    return:
      type: AdvancedSceneManager.Models.SceneCollection
    content.vb: Public ReadOnly Property collection As SceneCollection
  overload: AdvancedSceneManager.Core.SceneOperation.collection*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: AdvancedSceneManager.Core.SceneOperation.loadingScreen
  commentId: P:AdvancedSceneManager.Core.SceneOperation.loadingScreen
  id: loadingScreen
  parent: AdvancedSceneManager.Core.SceneOperation
  langs:
  - csharp
  - vb
  name: loadingScreen
  nameWithType: SceneOperation.loadingScreen
  fullName: AdvancedSceneManager.Core.SceneOperation.loadingScreen
  type: Property
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/SceneOperation.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: loadingScreen
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/SceneOperation.cs
    startLine: 424
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core
  example: []
  syntax:
    content: public Scene loadingScreen { get; }
    parameters: []
    return:
      type: AdvancedSceneManager.Models.Scene
    content.vb: Public ReadOnly Property loadingScreen As Scene
  overload: AdvancedSceneManager.Core.SceneOperation.loadingScreen*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: AdvancedSceneManager.Core.SceneOperation.useLoadingScreen
  commentId: P:AdvancedSceneManager.Core.SceneOperation.useLoadingScreen
  id: useLoadingScreen
  parent: AdvancedSceneManager.Core.SceneOperation
  langs:
  - csharp
  - vb
  name: useLoadingScreen
  nameWithType: SceneOperation.useLoadingScreen
  fullName: AdvancedSceneManager.Core.SceneOperation.useLoadingScreen
  type: Property
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/SceneOperation.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: useLoadingScreen
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/SceneOperation.cs
    startLine: 426
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core
  example: []
  syntax:
    content: public bool useLoadingScreen { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property useLoadingScreen As Boolean
  overload: AdvancedSceneManager.Core.SceneOperation.useLoadingScreen*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: AdvancedSceneManager.Core.SceneOperation.clearUnusedAssets
  commentId: P:AdvancedSceneManager.Core.SceneOperation.clearUnusedAssets
  id: clearUnusedAssets
  parent: AdvancedSceneManager.Core.SceneOperation
  langs:
  - csharp
  - vb
  name: clearUnusedAssets
  nameWithType: SceneOperation.clearUnusedAssets
  fullName: AdvancedSceneManager.Core.SceneOperation.clearUnusedAssets
  type: Property
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/SceneOperation.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: clearUnusedAssets
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/SceneOperation.cs
    startLine: 428
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core
  example: []
  syntax:
    content: public bool? clearUnusedAssets { get; }
    parameters: []
    return:
      type: System.Nullable{System.Boolean}
    content.vb: Public ReadOnly Property clearUnusedAssets As Boolean?
  overload: AdvancedSceneManager.Core.SceneOperation.clearUnusedAssets*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: AdvancedSceneManager.Core.SceneOperation.doCollectionCallbacks
  commentId: P:AdvancedSceneManager.Core.SceneOperation.doCollectionCallbacks
  id: doCollectionCallbacks
  parent: AdvancedSceneManager.Core.SceneOperation
  langs:
  - csharp
  - vb
  name: doCollectionCallbacks
  nameWithType: SceneOperation.doCollectionCallbacks
  fullName: AdvancedSceneManager.Core.SceneOperation.doCollectionCallbacks
  type: Property
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/SceneOperation.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: doCollectionCallbacks
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/SceneOperation.cs
    startLine: 430
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core
  example: []
  syntax:
    content: public bool doCollectionCallbacks { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property doCollectionCallbacks As Boolean
  overload: AdvancedSceneManager.Core.SceneOperation.doCollectionCallbacks*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: AdvancedSceneManager.Core.SceneOperation.loadingScreenCallback
  commentId: P:AdvancedSceneManager.Core.SceneOperation.loadingScreenCallback
  id: loadingScreenCallback
  parent: AdvancedSceneManager.Core.SceneOperation
  langs:
  - csharp
  - vb
  name: loadingScreenCallback
  nameWithType: SceneOperation.loadingScreenCallback
  fullName: AdvancedSceneManager.Core.SceneOperation.loadingScreenCallback
  type: Property
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/SceneOperation.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: loadingScreenCallback
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/SceneOperation.cs
    startLine: 432
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core
  example: []
  syntax:
    content: public Action<LoadingScreen> loadingScreenCallback { get; }
    parameters: []
    return:
      type: System.Action{AdvancedSceneManager.Callbacks.LoadingScreen}
    content.vb: Public ReadOnly Property loadingScreenCallback As Action(Of LoadingScreen)
  overload: AdvancedSceneManager.Core.SceneOperation.loadingScreenCallback*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: AdvancedSceneManager.Core.SceneOperation.loadingPriority
  commentId: P:AdvancedSceneManager.Core.SceneOperation.loadingPriority
  id: loadingPriority
  parent: AdvancedSceneManager.Core.SceneOperation
  langs:
  - csharp
  - vb
  name: loadingPriority
  nameWithType: SceneOperation.loadingPriority
  fullName: AdvancedSceneManager.Core.SceneOperation.loadingPriority
  type: Property
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/SceneOperation.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: loadingPriority
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/SceneOperation.cs
    startLine: 434
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core
  example: []
  syntax:
    content: public ThreadPriority? loadingPriority { get; }
    parameters: []
    return:
      type: System.Nullable{UnityEngine.ThreadPriority}
    content.vb: Public ReadOnly Property loadingPriority As ThreadPriority?
  overload: AdvancedSceneManager.Core.SceneOperation.loadingPriority*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: AdvancedSceneManager.Core.SceneOperation.closeBehavior
  commentId: P:AdvancedSceneManager.Core.SceneOperation.closeBehavior
  id: closeBehavior
  parent: AdvancedSceneManager.Core.SceneOperation
  langs:
  - csharp
  - vb
  name: closeBehavior
  nameWithType: SceneOperation.closeBehavior
  fullName: AdvancedSceneManager.Core.SceneOperation.closeBehavior
  type: Property
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/SceneOperation.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: closeBehavior
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/SceneOperation.cs
    startLine: 436
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core
  example: []
  syntax:
    content: public SceneCloseBehavior? closeBehavior { get; }
    parameters: []
    return:
      type: System.Nullable{AdvancedSceneManager.Models.SceneCloseBehavior}
    content.vb: Public ReadOnly Property closeBehavior As SceneCloseBehavior?
  overload: AdvancedSceneManager.Core.SceneOperation.closeBehavior*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: AdvancedSceneManager.Core.SceneOperation.Open(AdvancedSceneManager.Models.Scene[])
  commentId: M:AdvancedSceneManager.Core.SceneOperation.Open(AdvancedSceneManager.Models.Scene[])
  id: Open(AdvancedSceneManager.Models.Scene[])
  parent: AdvancedSceneManager.Core.SceneOperation
  langs:
  - csharp
  - vb
  name: Open(Scene[])
  nameWithType: SceneOperation.Open(Scene[])
  fullName: AdvancedSceneManager.Core.SceneOperation.Open(AdvancedSceneManager.Models.Scene[])
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/SceneOperation.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: Open
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/SceneOperation.cs
    startLine: 442
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core
  example: []
  syntax:
    content: public SceneOperation Open(params Scene[] scene)
    parameters:
    - id: scene
      type: AdvancedSceneManager.Models.Scene[]
    return:
      type: AdvancedSceneManager.Core.SceneOperation
    content.vb: Public Function Open(ParamArray scene As Scene()) As SceneOperation
  overload: AdvancedSceneManager.Core.SceneOperation.Open*
  nameWithType.vb: SceneOperation.Open(Scene())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: AdvancedSceneManager.Core.SceneOperation.Open(AdvancedSceneManager.Models.Scene())
  name.vb: Open(Scene())
- uid: AdvancedSceneManager.Core.SceneOperation.Open(System.Collections.Generic.IEnumerable{AdvancedSceneManager.Models.Scene},System.Boolean)
  commentId: M:AdvancedSceneManager.Core.SceneOperation.Open(System.Collections.Generic.IEnumerable{AdvancedSceneManager.Models.Scene},System.Boolean)
  id: Open(System.Collections.Generic.IEnumerable{AdvancedSceneManager.Models.Scene},System.Boolean)
  parent: AdvancedSceneManager.Core.SceneOperation
  langs:
  - csharp
  - vb
  name: Open(IEnumerable<Scene>, Boolean)
  nameWithType: SceneOperation.Open(IEnumerable<Scene>, Boolean)
  fullName: AdvancedSceneManager.Core.SceneOperation.Open(System.Collections.Generic.IEnumerable<AdvancedSceneManager.Models.Scene>, System.Boolean)
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/SceneOperation.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: Open
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/SceneOperation.cs
    startLine: 444
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core
  example: []
  syntax:
    content: public SceneOperation Open(IEnumerable<Scene> scene, bool force = true)
    parameters:
    - id: scene
      type: System.Collections.Generic.IEnumerable{AdvancedSceneManager.Models.Scene}
    - id: force
      type: System.Boolean
    return:
      type: AdvancedSceneManager.Core.SceneOperation
    content.vb: Public Function Open(scene As IEnumerable(Of Scene), force As Boolean = True) As SceneOperation
  overload: AdvancedSceneManager.Core.SceneOperation.Open*
  nameWithType.vb: SceneOperation.Open(IEnumerable(Of Scene), Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: AdvancedSceneManager.Core.SceneOperation.Open(System.Collections.Generic.IEnumerable(Of AdvancedSceneManager.Models.Scene), System.Boolean)
  name.vb: Open(IEnumerable(Of Scene), Boolean)
- uid: AdvancedSceneManager.Core.SceneOperation.Close(AdvancedSceneManager.Core.OpenSceneInfo[])
  commentId: M:AdvancedSceneManager.Core.SceneOperation.Close(AdvancedSceneManager.Core.OpenSceneInfo[])
  id: Close(AdvancedSceneManager.Core.OpenSceneInfo[])
  parent: AdvancedSceneManager.Core.SceneOperation
  langs:
  - csharp
  - vb
  name: Close(OpenSceneInfo[])
  nameWithType: SceneOperation.Close(OpenSceneInfo[])
  fullName: AdvancedSceneManager.Core.SceneOperation.Close(AdvancedSceneManager.Core.OpenSceneInfo[])
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/SceneOperation.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: Close
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/SceneOperation.cs
    startLine: 446
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core
  example: []
  syntax:
    content: public SceneOperation Close(params OpenSceneInfo[] scenes)
    parameters:
    - id: scenes
      type: AdvancedSceneManager.Core.OpenSceneInfo[]
    return:
      type: AdvancedSceneManager.Core.SceneOperation
    content.vb: Public Function Close(ParamArray scenes As OpenSceneInfo()) As SceneOperation
  overload: AdvancedSceneManager.Core.SceneOperation.Close*
  nameWithType.vb: SceneOperation.Close(OpenSceneInfo())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: AdvancedSceneManager.Core.SceneOperation.Close(AdvancedSceneManager.Core.OpenSceneInfo())
  name.vb: Close(OpenSceneInfo())
- uid: AdvancedSceneManager.Core.SceneOperation.Close(System.Collections.Generic.IEnumerable{AdvancedSceneManager.Core.OpenSceneInfo},System.Boolean)
  commentId: M:AdvancedSceneManager.Core.SceneOperation.Close(System.Collections.Generic.IEnumerable{AdvancedSceneManager.Core.OpenSceneInfo},System.Boolean)
  id: Close(System.Collections.Generic.IEnumerable{AdvancedSceneManager.Core.OpenSceneInfo},System.Boolean)
  parent: AdvancedSceneManager.Core.SceneOperation
  langs:
  - csharp
  - vb
  name: Close(IEnumerable<OpenSceneInfo>, Boolean)
  nameWithType: SceneOperation.Close(IEnumerable<OpenSceneInfo>, Boolean)
  fullName: AdvancedSceneManager.Core.SceneOperation.Close(System.Collections.Generic.IEnumerable<AdvancedSceneManager.Core.OpenSceneInfo>, System.Boolean)
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/SceneOperation.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: Close
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/SceneOperation.cs
    startLine: 448
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core
  example: []
  syntax:
    content: public SceneOperation Close(IEnumerable<OpenSceneInfo> scenes, bool force = true)
    parameters:
    - id: scenes
      type: System.Collections.Generic.IEnumerable{AdvancedSceneManager.Core.OpenSceneInfo}
    - id: force
      type: System.Boolean
    return:
      type: AdvancedSceneManager.Core.SceneOperation
    content.vb: Public Function Close(scenes As IEnumerable(Of OpenSceneInfo), force As Boolean = True) As SceneOperation
  overload: AdvancedSceneManager.Core.SceneOperation.Close*
  nameWithType.vb: SceneOperation.Close(IEnumerable(Of OpenSceneInfo), Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: AdvancedSceneManager.Core.SceneOperation.Close(System.Collections.Generic.IEnumerable(Of AdvancedSceneManager.Core.OpenSceneInfo), System.Boolean)
  name.vb: Close(IEnumerable(Of OpenSceneInfo), Boolean)
- uid: AdvancedSceneManager.Core.SceneOperation.Close(System.Boolean,AdvancedSceneManager.Core.OpenSceneInfo[])
  commentId: M:AdvancedSceneManager.Core.SceneOperation.Close(System.Boolean,AdvancedSceneManager.Core.OpenSceneInfo[])
  id: Close(System.Boolean,AdvancedSceneManager.Core.OpenSceneInfo[])
  parent: AdvancedSceneManager.Core.SceneOperation
  langs:
  - csharp
  - vb
  name: Close(Boolean, OpenSceneInfo[])
  nameWithType: SceneOperation.Close(Boolean, OpenSceneInfo[])
  fullName: AdvancedSceneManager.Core.SceneOperation.Close(System.Boolean, AdvancedSceneManager.Core.OpenSceneInfo[])
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/SceneOperation.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: Close
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/SceneOperation.cs
    startLine: 450
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core
  example: []
  syntax:
    content: public SceneOperation Close(bool force, params OpenSceneInfo[] scenes)
    parameters:
    - id: force
      type: System.Boolean
    - id: scenes
      type: AdvancedSceneManager.Core.OpenSceneInfo[]
    return:
      type: AdvancedSceneManager.Core.SceneOperation
    content.vb: Public Function Close(force As Boolean, ParamArray scenes As OpenSceneInfo()) As SceneOperation
  overload: AdvancedSceneManager.Core.SceneOperation.Close*
  nameWithType.vb: SceneOperation.Close(Boolean, OpenSceneInfo())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: AdvancedSceneManager.Core.SceneOperation.Close(System.Boolean, AdvancedSceneManager.Core.OpenSceneInfo())
  name.vb: Close(Boolean, OpenSceneInfo())
- uid: AdvancedSceneManager.Core.SceneOperation.Reopen(AdvancedSceneManager.Core.OpenSceneInfo[])
  commentId: M:AdvancedSceneManager.Core.SceneOperation.Reopen(AdvancedSceneManager.Core.OpenSceneInfo[])
  id: Reopen(AdvancedSceneManager.Core.OpenSceneInfo[])
  parent: AdvancedSceneManager.Core.SceneOperation
  langs:
  - csharp
  - vb
  name: Reopen(OpenSceneInfo[])
  nameWithType: SceneOperation.Reopen(OpenSceneInfo[])
  fullName: AdvancedSceneManager.Core.SceneOperation.Reopen(AdvancedSceneManager.Core.OpenSceneInfo[])
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/SceneOperation.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: Reopen
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/SceneOperation.cs
    startLine: 452
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core
  example: []
  syntax:
    content: public SceneOperation Reopen(params OpenSceneInfo[] scene)
    parameters:
    - id: scene
      type: AdvancedSceneManager.Core.OpenSceneInfo[]
    return:
      type: AdvancedSceneManager.Core.SceneOperation
    content.vb: Public Function Reopen(ParamArray scene As OpenSceneInfo()) As SceneOperation
  overload: AdvancedSceneManager.Core.SceneOperation.Reopen*
  nameWithType.vb: SceneOperation.Reopen(OpenSceneInfo())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: AdvancedSceneManager.Core.SceneOperation.Reopen(AdvancedSceneManager.Core.OpenSceneInfo())
  name.vb: Reopen(OpenSceneInfo())
- uid: AdvancedSceneManager.Core.SceneOperation.Reopen(System.Collections.Generic.IEnumerable{AdvancedSceneManager.Core.OpenSceneInfo})
  commentId: M:AdvancedSceneManager.Core.SceneOperation.Reopen(System.Collections.Generic.IEnumerable{AdvancedSceneManager.Core.OpenSceneInfo})
  id: Reopen(System.Collections.Generic.IEnumerable{AdvancedSceneManager.Core.OpenSceneInfo})
  parent: AdvancedSceneManager.Core.SceneOperation
  langs:
  - csharp
  - vb
  name: Reopen(IEnumerable<OpenSceneInfo>)
  nameWithType: SceneOperation.Reopen(IEnumerable<OpenSceneInfo>)
  fullName: AdvancedSceneManager.Core.SceneOperation.Reopen(System.Collections.Generic.IEnumerable<AdvancedSceneManager.Core.OpenSceneInfo>)
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/SceneOperation.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: Reopen
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/SceneOperation.cs
    startLine: 454
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core
  example: []
  syntax:
    content: public SceneOperation Reopen(IEnumerable<OpenSceneInfo> scene)
    parameters:
    - id: scene
      type: System.Collections.Generic.IEnumerable{AdvancedSceneManager.Core.OpenSceneInfo}
    return:
      type: AdvancedSceneManager.Core.SceneOperation
    content.vb: Public Function Reopen(scene As IEnumerable(Of OpenSceneInfo)) As SceneOperation
  overload: AdvancedSceneManager.Core.SceneOperation.Reopen*
  nameWithType.vb: SceneOperation.Reopen(IEnumerable(Of OpenSceneInfo))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: AdvancedSceneManager.Core.SceneOperation.Reopen(System.Collections.Generic.IEnumerable(Of AdvancedSceneManager.Core.OpenSceneInfo))
  name.vb: Reopen(IEnumerable(Of OpenSceneInfo))
- uid: AdvancedSceneManager.Core.SceneOperation.Reopen(AdvancedSceneManager.Models.Scene[])
  commentId: M:AdvancedSceneManager.Core.SceneOperation.Reopen(AdvancedSceneManager.Models.Scene[])
  id: Reopen(AdvancedSceneManager.Models.Scene[])
  parent: AdvancedSceneManager.Core.SceneOperation
  langs:
  - csharp
  - vb
  name: Reopen(Scene[])
  nameWithType: SceneOperation.Reopen(Scene[])
  fullName: AdvancedSceneManager.Core.SceneOperation.Reopen(AdvancedSceneManager.Models.Scene[])
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/SceneOperation.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: Reopen
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/SceneOperation.cs
    startLine: 456
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core
  example: []
  syntax:
    content: public SceneOperation Reopen(params Scene[] scene)
    parameters:
    - id: scene
      type: AdvancedSceneManager.Models.Scene[]
    return:
      type: AdvancedSceneManager.Core.SceneOperation
    content.vb: Public Function Reopen(ParamArray scene As Scene()) As SceneOperation
  overload: AdvancedSceneManager.Core.SceneOperation.Reopen*
  nameWithType.vb: SceneOperation.Reopen(Scene())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: AdvancedSceneManager.Core.SceneOperation.Reopen(AdvancedSceneManager.Models.Scene())
  name.vb: Reopen(Scene())
- uid: AdvancedSceneManager.Core.SceneOperation.Reopen(System.Collections.Generic.IEnumerable{AdvancedSceneManager.Models.Scene})
  commentId: M:AdvancedSceneManager.Core.SceneOperation.Reopen(System.Collections.Generic.IEnumerable{AdvancedSceneManager.Models.Scene})
  id: Reopen(System.Collections.Generic.IEnumerable{AdvancedSceneManager.Models.Scene})
  parent: AdvancedSceneManager.Core.SceneOperation
  langs:
  - csharp
  - vb
  name: Reopen(IEnumerable<Scene>)
  nameWithType: SceneOperation.Reopen(IEnumerable<Scene>)
  fullName: AdvancedSceneManager.Core.SceneOperation.Reopen(System.Collections.Generic.IEnumerable<AdvancedSceneManager.Models.Scene>)
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/SceneOperation.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: Reopen
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/SceneOperation.cs
    startLine: 458
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core
  example: []
  syntax:
    content: public SceneOperation Reopen(IEnumerable<Scene> scene)
    parameters:
    - id: scene
      type: System.Collections.Generic.IEnumerable{AdvancedSceneManager.Models.Scene}
    return:
      type: AdvancedSceneManager.Core.SceneOperation
    content.vb: Public Function Reopen(scene As IEnumerable(Of Scene)) As SceneOperation
  overload: AdvancedSceneManager.Core.SceneOperation.Reopen*
  nameWithType.vb: SceneOperation.Reopen(IEnumerable(Of Scene))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: AdvancedSceneManager.Core.SceneOperation.Reopen(System.Collections.Generic.IEnumerable(Of AdvancedSceneManager.Models.Scene))
  name.vb: Reopen(IEnumerable(Of Scene))
- uid: AdvancedSceneManager.Core.SceneOperation.WithAction(AdvancedSceneManager.Core.Actions.SceneAction[])
  commentId: M:AdvancedSceneManager.Core.SceneOperation.WithAction(AdvancedSceneManager.Core.Actions.SceneAction[])
  id: WithAction(AdvancedSceneManager.Core.Actions.SceneAction[])
  parent: AdvancedSceneManager.Core.SceneOperation
  langs:
  - csharp
  - vb
  name: WithAction(SceneAction[])
  nameWithType: SceneOperation.WithAction(SceneAction[])
  fullName: AdvancedSceneManager.Core.SceneOperation.WithAction(AdvancedSceneManager.Core.Actions.SceneAction[])
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/SceneOperation.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: WithAction
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/SceneOperation.cs
    startLine: 460
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core
  example: []
  syntax:
    content: public SceneOperation WithAction(params SceneAction[] actions)
    parameters:
    - id: actions
      type: AdvancedSceneManager.Core.Actions.SceneAction[]
    return:
      type: AdvancedSceneManager.Core.SceneOperation
    content.vb: Public Function WithAction(ParamArray actions As SceneAction()) As SceneOperation
  overload: AdvancedSceneManager.Core.SceneOperation.WithAction*
  nameWithType.vb: SceneOperation.WithAction(SceneAction())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: AdvancedSceneManager.Core.SceneOperation.WithAction(AdvancedSceneManager.Core.Actions.SceneAction())
  name.vb: WithAction(SceneAction())
- uid: AdvancedSceneManager.Core.SceneOperation.WithCallback(AdvancedSceneManager.Core.Callback)
  commentId: M:AdvancedSceneManager.Core.SceneOperation.WithCallback(AdvancedSceneManager.Core.Callback)
  id: WithCallback(AdvancedSceneManager.Core.Callback)
  parent: AdvancedSceneManager.Core.SceneOperation
  langs:
  - csharp
  - vb
  name: WithCallback(Callback)
  nameWithType: SceneOperation.WithCallback(Callback)
  fullName: AdvancedSceneManager.Core.SceneOperation.WithCallback(AdvancedSceneManager.Core.Callback)
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/SceneOperation.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: WithCallback
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/SceneOperation.cs
    startLine: 462
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core
  example: []
  syntax:
    content: public SceneOperation WithCallback(Callback actions)
    parameters:
    - id: actions
      type: AdvancedSceneManager.Core.Callback
    return:
      type: AdvancedSceneManager.Core.SceneOperation
    content.vb: Public Function WithCallback(actions As Callback) As SceneOperation
  overload: AdvancedSceneManager.Core.SceneOperation.WithCallback*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AdvancedSceneManager.Core.SceneOperation.WithCollection(AdvancedSceneManager.Models.SceneCollection,System.Boolean)
  commentId: M:AdvancedSceneManager.Core.SceneOperation.WithCollection(AdvancedSceneManager.Models.SceneCollection,System.Boolean)
  id: WithCollection(AdvancedSceneManager.Models.SceneCollection,System.Boolean)
  parent: AdvancedSceneManager.Core.SceneOperation
  langs:
  - csharp
  - vb
  name: WithCollection(SceneCollection, Boolean)
  nameWithType: SceneOperation.WithCollection(SceneCollection, Boolean)
  fullName: AdvancedSceneManager.Core.SceneOperation.WithCollection(AdvancedSceneManager.Models.SceneCollection, System.Boolean)
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/SceneOperation.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: WithCollection
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/SceneOperation.cs
    startLine: 464
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core
  example: []
  syntax:
    content: public SceneOperation WithCollection(SceneCollection collection, bool withCallbacks = true)
    parameters:
    - id: collection
      type: AdvancedSceneManager.Models.SceneCollection
    - id: withCallbacks
      type: System.Boolean
    return:
      type: AdvancedSceneManager.Core.SceneOperation
    content.vb: Public Function WithCollection(collection As SceneCollection, withCallbacks As Boolean = True) As SceneOperation
  overload: AdvancedSceneManager.Core.SceneOperation.WithCollection*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AdvancedSceneManager.Core.SceneOperation.WithLoadingScreen(System.Boolean)
  commentId: M:AdvancedSceneManager.Core.SceneOperation.WithLoadingScreen(System.Boolean)
  id: WithLoadingScreen(System.Boolean)
  parent: AdvancedSceneManager.Core.SceneOperation
  langs:
  - csharp
  - vb
  name: WithLoadingScreen(Boolean)
  nameWithType: SceneOperation.WithLoadingScreen(Boolean)
  fullName: AdvancedSceneManager.Core.SceneOperation.WithLoadingScreen(System.Boolean)
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/SceneOperation.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: WithLoadingScreen
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/SceneOperation.cs
    startLine: 466
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core
  example: []
  syntax:
    content: public SceneOperation WithLoadingScreen(bool use)
    parameters:
    - id: use
      type: System.Boolean
    return:
      type: AdvancedSceneManager.Core.SceneOperation
    content.vb: Public Function WithLoadingScreen(use As Boolean) As SceneOperation
  overload: AdvancedSceneManager.Core.SceneOperation.WithLoadingScreen*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AdvancedSceneManager.Core.SceneOperation.WithLoadingScreen(AdvancedSceneManager.Models.Scene)
  commentId: M:AdvancedSceneManager.Core.SceneOperation.WithLoadingScreen(AdvancedSceneManager.Models.Scene)
  id: WithLoadingScreen(AdvancedSceneManager.Models.Scene)
  parent: AdvancedSceneManager.Core.SceneOperation
  langs:
  - csharp
  - vb
  name: WithLoadingScreen(Scene)
  nameWithType: SceneOperation.WithLoadingScreen(Scene)
  fullName: AdvancedSceneManager.Core.SceneOperation.WithLoadingScreen(AdvancedSceneManager.Models.Scene)
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/SceneOperation.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: WithLoadingScreen
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/SceneOperation.cs
    startLine: 468
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core
  example: []
  syntax:
    content: public SceneOperation WithLoadingScreen(Scene scene)
    parameters:
    - id: scene
      type: AdvancedSceneManager.Models.Scene
    return:
      type: AdvancedSceneManager.Core.SceneOperation
    content.vb: Public Function WithLoadingScreen(scene As Scene) As SceneOperation
  overload: AdvancedSceneManager.Core.SceneOperation.WithLoadingScreen*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AdvancedSceneManager.Core.SceneOperation.WithClearUnusedAssets(System.Boolean)
  commentId: M:AdvancedSceneManager.Core.SceneOperation.WithClearUnusedAssets(System.Boolean)
  id: WithClearUnusedAssets(System.Boolean)
  parent: AdvancedSceneManager.Core.SceneOperation
  langs:
  - csharp
  - vb
  name: WithClearUnusedAssets(Boolean)
  nameWithType: SceneOperation.WithClearUnusedAssets(Boolean)
  fullName: AdvancedSceneManager.Core.SceneOperation.WithClearUnusedAssets(System.Boolean)
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/SceneOperation.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: WithClearUnusedAssets
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/SceneOperation.cs
    startLine: 470
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core
  example: []
  syntax:
    content: public SceneOperation WithClearUnusedAssets(bool enable = true)
    parameters:
    - id: enable
      type: System.Boolean
    return:
      type: AdvancedSceneManager.Core.SceneOperation
    content.vb: Public Function WithClearUnusedAssets(enable As Boolean = True) As SceneOperation
  overload: AdvancedSceneManager.Core.SceneOperation.WithClearUnusedAssets*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AdvancedSceneManager.Core.SceneOperation.WithLoadingScreenCallback(System.Action{AdvancedSceneManager.Callbacks.LoadingScreen})
  commentId: M:AdvancedSceneManager.Core.SceneOperation.WithLoadingScreenCallback(System.Action{AdvancedSceneManager.Callbacks.LoadingScreen})
  id: WithLoadingScreenCallback(System.Action{AdvancedSceneManager.Callbacks.LoadingScreen})
  parent: AdvancedSceneManager.Core.SceneOperation
  langs:
  - csharp
  - vb
  name: WithLoadingScreenCallback(Action<LoadingScreen>)
  nameWithType: SceneOperation.WithLoadingScreenCallback(Action<LoadingScreen>)
  fullName: AdvancedSceneManager.Core.SceneOperation.WithLoadingScreenCallback(System.Action<AdvancedSceneManager.Callbacks.LoadingScreen>)
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/SceneOperation.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: WithLoadingScreenCallback
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/SceneOperation.cs
    startLine: 472
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core
  example: []
  syntax:
    content: public SceneOperation WithLoadingScreenCallback(Action<LoadingScreen> callback)
    parameters:
    - id: callback
      type: System.Action{AdvancedSceneManager.Callbacks.LoadingScreen}
    return:
      type: AdvancedSceneManager.Core.SceneOperation
    content.vb: Public Function WithLoadingScreenCallback(callback As Action(Of LoadingScreen)) As SceneOperation
  overload: AdvancedSceneManager.Core.SceneOperation.WithLoadingScreenCallback*
  nameWithType.vb: SceneOperation.WithLoadingScreenCallback(Action(Of LoadingScreen))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: AdvancedSceneManager.Core.SceneOperation.WithLoadingScreenCallback(System.Action(Of AdvancedSceneManager.Callbacks.LoadingScreen))
  name.vb: WithLoadingScreenCallback(Action(Of LoadingScreen))
- uid: AdvancedSceneManager.Core.SceneOperation.WithLoadingPriority(UnityEngine.ThreadPriority)
  commentId: M:AdvancedSceneManager.Core.SceneOperation.WithLoadingPriority(UnityEngine.ThreadPriority)
  id: WithLoadingPriority(UnityEngine.ThreadPriority)
  parent: AdvancedSceneManager.Core.SceneOperation
  langs:
  - csharp
  - vb
  name: WithLoadingPriority(ThreadPriority)
  nameWithType: SceneOperation.WithLoadingPriority(ThreadPriority)
  fullName: AdvancedSceneManager.Core.SceneOperation.WithLoadingPriority(UnityEngine.ThreadPriority)
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/SceneOperation.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: WithLoadingPriority
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/SceneOperation.cs
    startLine: 474
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core
  example: []
  syntax:
    content: public SceneOperation WithLoadingPriority(ThreadPriority priority)
    parameters:
    - id: priority
      type: UnityEngine.ThreadPriority
    return:
      type: AdvancedSceneManager.Core.SceneOperation
    content.vb: Public Function WithLoadingPriority(priority As ThreadPriority) As SceneOperation
  overload: AdvancedSceneManager.Core.SceneOperation.WithLoadingPriority*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AdvancedSceneManager.Core.SceneOperation.AsPersistent(AdvancedSceneManager.Models.SceneCloseBehavior)
  commentId: M:AdvancedSceneManager.Core.SceneOperation.AsPersistent(AdvancedSceneManager.Models.SceneCloseBehavior)
  id: AsPersistent(AdvancedSceneManager.Models.SceneCloseBehavior)
  parent: AdvancedSceneManager.Core.SceneOperation
  langs:
  - csharp
  - vb
  name: AsPersistent(SceneCloseBehavior)
  nameWithType: SceneOperation.AsPersistent(SceneCloseBehavior)
  fullName: AdvancedSceneManager.Core.SceneOperation.AsPersistent(AdvancedSceneManager.Models.SceneCloseBehavior)
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/SceneOperation.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: AsPersistent
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/SceneOperation.cs
    startLine: 476
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core
  example: []
  syntax:
    content: public SceneOperation AsPersistent(SceneCloseBehavior closeBehavior)
    parameters:
    - id: closeBehavior
      type: AdvancedSceneManager.Models.SceneCloseBehavior
    return:
      type: AdvancedSceneManager.Core.SceneOperation
    content.vb: Public Function AsPersistent(closeBehavior As SceneCloseBehavior) As SceneOperation
  overload: AdvancedSceneManager.Core.SceneOperation.AsPersistent*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AdvancedSceneManager.Core.SceneOperation._extCallbacks
  commentId: F:AdvancedSceneManager.Core.SceneOperation._extCallbacks
  id: _extCallbacks
  parent: AdvancedSceneManager.Core.SceneOperation
  langs:
  - csharp
  - vb
  name: _extCallbacks
  nameWithType: SceneOperation._extCallbacks
  fullName: AdvancedSceneManager.Core.SceneOperation._extCallbacks
  type: Field
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/SceneOperation.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: _extCallbacks
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/SceneOperation.cs
    startLine: 481
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core
  syntax:
    content: protected static readonly List<Callback> _extCallbacks
    return:
      type: System.Collections.Generic.List{AdvancedSceneManager.Core.Callback}
    content.vb: Protected Shared ReadOnly _extCallbacks As List(Of Callback)
  modifiers.csharp:
  - protected
  - static
  - readonly
  modifiers.vb:
  - Protected
  - Shared
  - ReadOnly
- uid: AdvancedSceneManager.Core.SceneOperation.AddCallback(AdvancedSceneManager.Core.Callback)
  commentId: M:AdvancedSceneManager.Core.SceneOperation.AddCallback(AdvancedSceneManager.Core.Callback)
  id: AddCallback(AdvancedSceneManager.Core.Callback)
  parent: AdvancedSceneManager.Core.SceneOperation
  langs:
  - csharp
  - vb
  name: AddCallback(Callback)
  nameWithType: SceneOperation.AddCallback(Callback)
  fullName: AdvancedSceneManager.Core.SceneOperation.AddCallback(AdvancedSceneManager.Core.Callback)
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/SceneOperation.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: AddCallback
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/SceneOperation.cs
    startLine: 484
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core
  summary: Adds the callback to every scene operation.
  example: []
  syntax:
    content: public static void AddCallback(Callback callback)
    parameters:
    - id: callback
      type: AdvancedSceneManager.Core.Callback
    content.vb: Public Shared Sub AddCallback(callback As Callback)
  overload: AdvancedSceneManager.Core.SceneOperation.AddCallback*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: AdvancedSceneManager.Core.SceneOperation.RemoveCallback(AdvancedSceneManager.Core.Callback)
  commentId: M:AdvancedSceneManager.Core.SceneOperation.RemoveCallback(AdvancedSceneManager.Core.Callback)
  id: RemoveCallback(AdvancedSceneManager.Core.Callback)
  parent: AdvancedSceneManager.Core.SceneOperation
  langs:
  - csharp
  - vb
  name: RemoveCallback(Callback)
  nameWithType: SceneOperation.RemoveCallback(Callback)
  fullName: AdvancedSceneManager.Core.SceneOperation.RemoveCallback(AdvancedSceneManager.Core.Callback)
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/SceneOperation.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: RemoveCallback
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/SceneOperation.cs
    startLine: 491
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core
  summary: Removes a callback that was added to every scene operation.
  example: []
  syntax:
    content: public static void RemoveCallback(Callback callback)
    parameters:
    - id: callback
      type: AdvancedSceneManager.Core.Callback
    content.vb: Public Shared Sub RemoveCallback(callback As Callback)
  overload: AdvancedSceneManager.Core.SceneOperation.RemoveCallback*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: AdvancedSceneManager.Core.SceneOperation.keepWaiting
  commentId: P:AdvancedSceneManager.Core.SceneOperation.keepWaiting
  id: keepWaiting
  parent: AdvancedSceneManager.Core.SceneOperation
  langs:
  - csharp
  - vb
  name: keepWaiting
  nameWithType: SceneOperation.keepWaiting
  fullName: AdvancedSceneManager.Core.SceneOperation.keepWaiting
  type: Property
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/SceneOperation.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: keepWaiting
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/SceneOperation.cs
    startLine: 518
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core
  summary: Inherited from <xref href="UnityEngine.CustomYieldInstruction" data-throw-if-not-resolved="false"></xref>. Tells unity whatever the operation is done or not.
  example: []
  syntax:
    content: public override bool keepWaiting { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Overrides ReadOnly Property keepWaiting As Boolean
  overridden: UnityEngine.CustomYieldInstruction.keepWaiting
  overload: AdvancedSceneManager.Core.SceneOperation.keepWaiting*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: AdvancedSceneManager.Core.SceneOperation.phase
  commentId: P:AdvancedSceneManager.Core.SceneOperation.phase
  id: phase
  parent: AdvancedSceneManager.Core.SceneOperation
  langs:
  - csharp
  - vb
  name: phase
  nameWithType: SceneOperation.phase
  fullName: AdvancedSceneManager.Core.SceneOperation.phase
  type: Property
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/SceneOperation.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: phase
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/SceneOperation.cs
    startLine: 521
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core
  summary: The phase the this scene operation is currently in.
  example: []
  syntax:
    content: public Phase phase { get; }
    parameters: []
    return:
      type: AdvancedSceneManager.Core.Phase
    content.vb: Public ReadOnly Property phase As Phase
  overload: AdvancedSceneManager.Core.SceneOperation.phase*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: AdvancedSceneManager.Core.SceneOperation.sceneManager
  commentId: P:AdvancedSceneManager.Core.SceneOperation.sceneManager
  id: sceneManager
  parent: AdvancedSceneManager.Core.SceneOperation
  langs:
  - csharp
  - vb
  name: sceneManager
  nameWithType: SceneOperation.sceneManager
  fullName: AdvancedSceneManager.Core.SceneOperation.sceneManager
  type: Property
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/SceneOperation.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: sceneManager
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/SceneOperation.cs
    startLine: 524
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core
  summary: The scene manager that requested this scene operation.
  example: []
  syntax:
    content: public SceneManagerBase sceneManager { get; }
    parameters: []
    return:
      type: AdvancedSceneManager.Core.SceneManagerBase
    content.vb: Public ReadOnly Property sceneManager As SceneManagerBase
  overload: AdvancedSceneManager.Core.SceneOperation.sceneManager*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: AdvancedSceneManager.Core.SceneOperation.current
  commentId: P:AdvancedSceneManager.Core.SceneOperation.current
  id: current
  parent: AdvancedSceneManager.Core.SceneOperation
  langs:
  - csharp
  - vb
  name: current
  nameWithType: SceneOperation.current
  fullName: AdvancedSceneManager.Core.SceneOperation.current
  type: Property
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/SceneOperation.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: current
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/SceneOperation.cs
    startLine: 527
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core
  summary: The current action that is executing.
  example: []
  syntax:
    content: public SceneAction current { get; }
    parameters: []
    return:
      type: AdvancedSceneManager.Core.Actions.SceneAction
    content.vb: Public ReadOnly Property current As SceneAction
  overload: AdvancedSceneManager.Core.SceneOperation.current*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: AdvancedSceneManager.Core.SceneOperation.cancelled
  commentId: P:AdvancedSceneManager.Core.SceneOperation.cancelled
  id: cancelled
  parent: AdvancedSceneManager.Core.SceneOperation
  langs:
  - csharp
  - vb
  name: cancelled
  nameWithType: SceneOperation.cancelled
  fullName: AdvancedSceneManager.Core.SceneOperation.cancelled
  type: Property
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/SceneOperation.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: cancelled
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/SceneOperation.cs
    startLine: 530
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core
  summary: Gets if this scene operation is cancelled.
  example: []
  syntax:
    content: public bool cancelled { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property cancelled As Boolean
  overload: AdvancedSceneManager.Core.SceneOperation.cancelled*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: AdvancedSceneManager.Core.SceneOperation.openedLoadingScreen
  commentId: P:AdvancedSceneManager.Core.SceneOperation.openedLoadingScreen
  id: openedLoadingScreen
  parent: AdvancedSceneManager.Core.SceneOperation
  langs:
  - csharp
  - vb
  name: openedLoadingScreen
  nameWithType: SceneOperation.openedLoadingScreen
  fullName: AdvancedSceneManager.Core.SceneOperation.openedLoadingScreen
  type: Property
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/SceneOperation.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: openedLoadingScreen
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/SceneOperation.cs
    startLine: 533
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core
  summary: Gets the loading screen that was opened.
  example: []
  syntax:
    content: public SceneOperation<LoadingScreen> openedLoadingScreen { get; }
    parameters: []
    return:
      type: AdvancedSceneManager.Core.SceneOperation{AdvancedSceneManager.Callbacks.LoadingScreen}
    content.vb: Public ReadOnly Property openedLoadingScreen As SceneOperation(Of LoadingScreen)
  overload: AdvancedSceneManager.Core.SceneOperation.openedLoadingScreen*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: AdvancedSceneManager.Core.SceneOperation.actions
  commentId: P:AdvancedSceneManager.Core.SceneOperation.actions
  id: actions
  parent: AdvancedSceneManager.Core.SceneOperation
  langs:
  - csharp
  - vb
  name: actions
  nameWithType: SceneOperation.actions
  fullName: AdvancedSceneManager.Core.SceneOperation.actions
  type: Property
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/SceneOperation.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: actions
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/SceneOperation.cs
    startLine: 535
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core
  syntax:
    content: public ReadOnlyCollection<SceneAction> actions { get; }
    parameters: []
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{AdvancedSceneManager.Core.Actions.SceneAction}
    content.vb: Public ReadOnly Property actions As ReadOnlyCollection(Of SceneAction)
  overload: AdvancedSceneManager.Core.SceneOperation.actions*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: AdvancedSceneManager.Core.SceneOperation.totalProgress
  commentId: P:AdvancedSceneManager.Core.SceneOperation.totalProgress
  id: totalProgress
  parent: AdvancedSceneManager.Core.SceneOperation
  langs:
  - csharp
  - vb
  name: totalProgress
  nameWithType: SceneOperation.totalProgress
  fullName: AdvancedSceneManager.Core.SceneOperation.totalProgress
  type: Property
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/SceneOperation.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: totalProgress
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/SceneOperation.cs
    startLine: 539
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core
  summary: The total progress made by this operation.
  example: []
  syntax:
    content: public float totalProgress { get; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public ReadOnly Property totalProgress As Single
  overload: AdvancedSceneManager.Core.SceneOperation.totalProgress*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: AdvancedSceneManager.Core.SceneOperation.Cancel(System.Action)
  commentId: M:AdvancedSceneManager.Core.SceneOperation.Cancel(System.Action)
  id: Cancel(System.Action)
  parent: AdvancedSceneManager.Core.SceneOperation
  langs:
  - csharp
  - vb
  name: Cancel(Action)
  nameWithType: SceneOperation.Cancel(Action)
  fullName: AdvancedSceneManager.Core.SceneOperation.Cancel(System.Action)
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/SceneOperation.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: Cancel
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/SceneOperation.cs
    startLine: 587
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core
  summary: "\nCancel this operation.\n<p>Note that the operation might not be cancelled immediately, if user defined callbacks are currently running\n(WithAction(), WithCallback()) they will run to completion before operation is cancelled. &apos;cancelled&apos; property can be used in callbacks to check whatever a operation is cancelled.</p>\n"
  example: []
  syntax:
    content: public void Cancel(Action callbackWhenFullyCancelled = null)
    parameters:
    - id: callbackWhenFullyCancelled
      type: System.Action
    content.vb: Public Sub Cancel(callbackWhenFullyCancelled As Action = Nothing)
  overload: AdvancedSceneManager.Core.SceneOperation.Cancel*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AdvancedSceneManager.Core.SceneOperation.isDone
  commentId: F:AdvancedSceneManager.Core.SceneOperation.isDone
  id: isDone
  parent: AdvancedSceneManager.Core.SceneOperation
  langs:
  - csharp
  - vb
  name: isDone
  nameWithType: SceneOperation.isDone
  fullName: AdvancedSceneManager.Core.SceneOperation.isDone
  type: Field
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/SceneOperation.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: isDone
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/SceneOperation.cs
    startLine: 595
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core
  syntax:
    content: protected bool isDone
    return:
      type: System.Boolean
    content.vb: Protected isDone As Boolean
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: AdvancedSceneManager.Core.SceneOperation.FindActions``1
  commentId: M:AdvancedSceneManager.Core.SceneOperation.FindActions``1
  id: FindActions``1
  parent: AdvancedSceneManager.Core.SceneOperation
  langs:
  - csharp
  - vb
  name: FindActions<T>()
  nameWithType: SceneOperation.FindActions<T>()
  fullName: AdvancedSceneManager.Core.SceneOperation.FindActions<T>()
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/SceneOperation.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: FindActions
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/SceneOperation.cs
    startLine: 975
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core
  summary: Finds the actions of a specified type that was used in this operation.
  example: []
  syntax:
    content: >-
      public IEnumerable<SceneAction> FindActions<T>()
          where T : SceneAction
    typeParameters:
    - id: T
    return:
      type: System.Collections.Generic.IEnumerable{AdvancedSceneManager.Core.Actions.SceneAction}
    content.vb: Public Function FindActions(Of T As SceneAction) As IEnumerable(Of SceneAction)
  overload: AdvancedSceneManager.Core.SceneOperation.FindActions*
  nameWithType.vb: SceneOperation.FindActions(Of T)()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: AdvancedSceneManager.Core.SceneOperation.FindActions(Of T)()
  name.vb: FindActions(Of T)()
- uid: AdvancedSceneManager.Core.SceneOperation.FindLastAction``1
  commentId: M:AdvancedSceneManager.Core.SceneOperation.FindLastAction``1
  id: FindLastAction``1
  parent: AdvancedSceneManager.Core.SceneOperation
  langs:
  - csharp
  - vb
  name: FindLastAction<T>()
  nameWithType: SceneOperation.FindLastAction<T>()
  fullName: AdvancedSceneManager.Core.SceneOperation.FindLastAction<T>()
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/SceneOperation.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: FindLastAction
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/SceneOperation.cs
    startLine: 988
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core
  summary: Finds the last action of a specified type that was used in this operation.
  example: []
  syntax:
    content: >-
      public SceneAction FindLastAction<T>()
          where T : SceneAction
    typeParameters:
    - id: T
    return:
      type: AdvancedSceneManager.Core.Actions.SceneAction
    content.vb: Public Function FindLastAction(Of T As SceneAction) As SceneAction
  overload: AdvancedSceneManager.Core.SceneOperation.FindLastAction*
  nameWithType.vb: SceneOperation.FindLastAction(Of T)()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: AdvancedSceneManager.Core.SceneOperation.FindLastAction(Of T)()
  name.vb: FindLastAction(Of T)()
- uid: AdvancedSceneManager.Core.SceneOperation.openedScenes
  commentId: P:AdvancedSceneManager.Core.SceneOperation.openedScenes
  id: openedScenes
  parent: AdvancedSceneManager.Core.SceneOperation
  langs:
  - csharp
  - vb
  name: openedScenes
  nameWithType: SceneOperation.openedScenes
  fullName: AdvancedSceneManager.Core.SceneOperation.openedScenes
  type: Property
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/SceneOperation.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: openedScenes
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Core/SceneOperation.cs
    startLine: 1001
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Core
  summary: Gets the scenes that was opened in this operation.
  example: []
  syntax:
    content: public IEnumerable<OpenSceneInfo> openedScenes { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{AdvancedSceneManager.Core.OpenSceneInfo}
    content.vb: Public ReadOnly Property openedScenes As IEnumerable(Of OpenSceneInfo)
  overload: AdvancedSceneManager.Core.SceneOperation.openedScenes*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: AdvancedSceneManager.Core.Actions.SceneAction
  commentId: T:AdvancedSceneManager.Core.Actions.SceneAction
  parent: AdvancedSceneManager.Core.Actions
  name: SceneAction
  nameWithType: SceneAction
  fullName: AdvancedSceneManager.Core.Actions.SceneAction
- uid: AdvancedSceneManager.Core.SceneOperation`1
  commentId: T:AdvancedSceneManager.Core.SceneOperation`1
  parent: AdvancedSceneManager.Core
  name: SceneOperation<ReturnValue>
  nameWithType: SceneOperation<ReturnValue>
  fullName: AdvancedSceneManager.Core.SceneOperation<ReturnValue>
  nameWithType.vb: SceneOperation(Of ReturnValue)
  fullName.vb: AdvancedSceneManager.Core.SceneOperation(Of ReturnValue)
  name.vb: SceneOperation(Of ReturnValue)
  spec.csharp:
  - uid: AdvancedSceneManager.Core.SceneOperation`1
    name: SceneOperation
    nameWithType: SceneOperation
    fullName: AdvancedSceneManager.Core.SceneOperation
  - name: <
    nameWithType: <
    fullName: <
  - name: ReturnValue
    nameWithType: ReturnValue
    fullName: ReturnValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: AdvancedSceneManager.Core.SceneOperation`1
    name: SceneOperation
    nameWithType: SceneOperation
    fullName: AdvancedSceneManager.Core.SceneOperation
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ReturnValue
    nameWithType: ReturnValue
    fullName: ReturnValue
  - name: )
    nameWithType: )
    fullName: )
- uid: AdvancedSceneManager.Core
  commentId: N:AdvancedSceneManager.Core
  name: AdvancedSceneManager.Core
  nameWithType: AdvancedSceneManager.Core
  fullName: AdvancedSceneManager.Core
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: UnityEngine.CustomYieldInstruction
  commentId: T:UnityEngine.CustomYieldInstruction
  parent: UnityEngine
  isExternal: true
  name: CustomYieldInstruction
  nameWithType: CustomYieldInstruction
  fullName: UnityEngine.CustomYieldInstruction
- uid: AdvancedSceneManager.Utility.IQueueable
  commentId: T:AdvancedSceneManager.Utility.IQueueable
  parent: AdvancedSceneManager.Utility
  name: IQueueable
  nameWithType: IQueueable
  fullName: AdvancedSceneManager.Utility.IQueueable
- uid: AdvancedSceneManager.Core.Actions
  commentId: N:AdvancedSceneManager.Core.Actions
  name: AdvancedSceneManager.Core.Actions
  nameWithType: AdvancedSceneManager.Core.Actions
  fullName: AdvancedSceneManager.Core.Actions
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: UnityEngine
  commentId: N:UnityEngine
  isExternal: true
  name: UnityEngine
  nameWithType: UnityEngine
  fullName: UnityEngine
- uid: AdvancedSceneManager.Utility
  commentId: N:AdvancedSceneManager.Utility
  name: AdvancedSceneManager.Utility
  nameWithType: AdvancedSceneManager.Utility
  fullName: AdvancedSceneManager.Utility
- uid: AdvancedSceneManager.Core.SceneOperation
  commentId: T:AdvancedSceneManager.Core.SceneOperation
  parent: AdvancedSceneManager.Core
  name: SceneOperation
  nameWithType: SceneOperation
  fullName: AdvancedSceneManager.Core.SceneOperation
- uid: AdvancedSceneManager.Core.SceneOperation.done*
  commentId: Overload:AdvancedSceneManager.Core.SceneOperation.done
  name: done
  nameWithType: SceneOperation.done
  fullName: AdvancedSceneManager.Core.SceneOperation.done
- uid: AdvancedSceneManager.Core.SceneOperation.Add*
  commentId: Overload:AdvancedSceneManager.Core.SceneOperation.Add
  name: Add
  nameWithType: SceneOperation.Add
  fullName: AdvancedSceneManager.Core.SceneOperation.Add
- uid: AdvancedSceneManager.Core.SceneManagerBase
  commentId: T:AdvancedSceneManager.Core.SceneManagerBase
  parent: AdvancedSceneManager.Core
  name: SceneManagerBase
  nameWithType: SceneManagerBase
  fullName: AdvancedSceneManager.Core.SceneManagerBase
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: AdvancedSceneManager.Core.SceneOperation.Add(AdvancedSceneManager.Core.SceneManagerBase,System.Boolean)
  commentId: M:AdvancedSceneManager.Core.SceneOperation.Add(AdvancedSceneManager.Core.SceneManagerBase,System.Boolean)
  parent: AdvancedSceneManager.Core.SceneOperation
  isExternal: true
  name: Add(SceneManagerBase, Boolean)
  nameWithType: SceneOperation.Add(SceneManagerBase, Boolean)
  fullName: AdvancedSceneManager.Core.SceneOperation.Add(AdvancedSceneManager.Core.SceneManagerBase, System.Boolean)
  spec.csharp:
  - uid: AdvancedSceneManager.Core.SceneOperation.Add(AdvancedSceneManager.Core.SceneManagerBase,System.Boolean)
    name: Add
    nameWithType: SceneOperation.Add
    fullName: AdvancedSceneManager.Core.SceneOperation.Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: AdvancedSceneManager.Core.SceneManagerBase
    name: SceneManagerBase
    nameWithType: SceneManagerBase
    fullName: AdvancedSceneManager.Core.SceneManagerBase
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AdvancedSceneManager.Core.SceneOperation.Add(AdvancedSceneManager.Core.SceneManagerBase,System.Boolean)
    name: Add
    nameWithType: SceneOperation.Add
    fullName: AdvancedSceneManager.Core.SceneOperation.Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: AdvancedSceneManager.Core.SceneManagerBase
    name: SceneManagerBase
    nameWithType: SceneManagerBase
    fullName: AdvancedSceneManager.Core.SceneManagerBase
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: AdvancedSceneManager.Core.SceneOperation{{ReturnValue}}
  commentId: T:AdvancedSceneManager.Core.SceneOperation{``0}
  parent: AdvancedSceneManager.Core
  definition: AdvancedSceneManager.Core.SceneOperation`1
  name: SceneOperation<ReturnValue>
  nameWithType: SceneOperation<ReturnValue>
  fullName: AdvancedSceneManager.Core.SceneOperation<ReturnValue>
  nameWithType.vb: SceneOperation(Of ReturnValue)
  fullName.vb: AdvancedSceneManager.Core.SceneOperation(Of ReturnValue)
  name.vb: SceneOperation(Of ReturnValue)
  spec.csharp:
  - uid: AdvancedSceneManager.Core.SceneOperation`1
    name: SceneOperation
    nameWithType: SceneOperation
    fullName: AdvancedSceneManager.Core.SceneOperation
  - name: <
    nameWithType: <
    fullName: <
  - name: ReturnValue
    nameWithType: ReturnValue
    fullName: ReturnValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: AdvancedSceneManager.Core.SceneOperation`1
    name: SceneOperation
    nameWithType: SceneOperation
    fullName: AdvancedSceneManager.Core.SceneOperation
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ReturnValue
    nameWithType: ReturnValue
    fullName: ReturnValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{AdvancedSceneManager.Core.SceneOperation,{ReturnValue}}
  commentId: T:System.Func{AdvancedSceneManager.Core.SceneOperation,``0}
  parent: System
  definition: System.Func`2
  name: Func<SceneOperation, ReturnValue>
  nameWithType: Func<SceneOperation, ReturnValue>
  fullName: System.Func<AdvancedSceneManager.Core.SceneOperation, ReturnValue>
  nameWithType.vb: Func(Of SceneOperation, ReturnValue)
  fullName.vb: System.Func(Of AdvancedSceneManager.Core.SceneOperation, ReturnValue)
  name.vb: Func(Of SceneOperation, ReturnValue)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: AdvancedSceneManager.Core.SceneOperation
    name: SceneOperation
    nameWithType: SceneOperation
    fullName: AdvancedSceneManager.Core.SceneOperation
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ReturnValue
    nameWithType: ReturnValue
    fullName: ReturnValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: AdvancedSceneManager.Core.SceneOperation
    name: SceneOperation
    nameWithType: SceneOperation
    fullName: AdvancedSceneManager.Core.SceneOperation
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ReturnValue
    nameWithType: ReturnValue
    fullName: ReturnValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: AdvancedSceneManager.Core.SceneOperation.AdvancedSceneManager#Utility#IQueueable#OnTurn*
  commentId: Overload:AdvancedSceneManager.Core.SceneOperation.AdvancedSceneManager#Utility#IQueueable#OnTurn
  name: IQueueable.OnTurn
  nameWithType: SceneOperation.IQueueable.OnTurn
  fullName: AdvancedSceneManager.Core.SceneOperation.AdvancedSceneManager.Utility.IQueueable.OnTurn
  nameWithType.vb: SceneOperation.AdvancedSceneManager.Utility.IQueueable.OnTurn
  name.vb: AdvancedSceneManager.Utility.IQueueable.OnTurn
- uid: AdvancedSceneManager.Utility.IQueueable.OnTurn(System.Action)
  commentId: M:AdvancedSceneManager.Utility.IQueueable.OnTurn(System.Action)
  parent: AdvancedSceneManager.Utility.IQueueable
  isExternal: true
  name: OnTurn(Action)
  nameWithType: IQueueable.OnTurn(Action)
  fullName: AdvancedSceneManager.Utility.IQueueable.OnTurn(System.Action)
  spec.csharp:
  - uid: AdvancedSceneManager.Utility.IQueueable.OnTurn(System.Action)
    name: OnTurn
    nameWithType: IQueueable.OnTurn
    fullName: AdvancedSceneManager.Utility.IQueueable.OnTurn
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AdvancedSceneManager.Utility.IQueueable.OnTurn(System.Action)
    name: OnTurn
    nameWithType: IQueueable.OnTurn
    fullName: AdvancedSceneManager.Utility.IQueueable.OnTurn
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action
  commentId: T:System.Action
  parent: System
  isExternal: true
  name: Action
  nameWithType: Action
  fullName: System.Action
- uid: AdvancedSceneManager.Core.SceneOperation.AdvancedSceneManager#Utility#IQueueable#OnCancel*
  commentId: Overload:AdvancedSceneManager.Core.SceneOperation.AdvancedSceneManager#Utility#IQueueable#OnCancel
  name: IQueueable.OnCancel
  nameWithType: SceneOperation.IQueueable.OnCancel
  fullName: AdvancedSceneManager.Core.SceneOperation.AdvancedSceneManager.Utility.IQueueable.OnCancel
  nameWithType.vb: SceneOperation.AdvancedSceneManager.Utility.IQueueable.OnCancel
  name.vb: AdvancedSceneManager.Utility.IQueueable.OnCancel
- uid: AdvancedSceneManager.Utility.IQueueable.OnCancel
  commentId: M:AdvancedSceneManager.Utility.IQueueable.OnCancel
  parent: AdvancedSceneManager.Utility.IQueueable
  name: OnCancel()
  nameWithType: IQueueable.OnCancel()
  fullName: AdvancedSceneManager.Utility.IQueueable.OnCancel()
  spec.csharp:
  - uid: AdvancedSceneManager.Utility.IQueueable.OnCancel
    name: OnCancel
    nameWithType: IQueueable.OnCancel
    fullName: AdvancedSceneManager.Utility.IQueueable.OnCancel
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AdvancedSceneManager.Utility.IQueueable.OnCancel
    name: OnCancel
    nameWithType: IQueueable.OnCancel
    fullName: AdvancedSceneManager.Utility.IQueueable.OnCancel
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: AdvancedSceneManager.Core.SceneOperation.friendlyText*
  commentId: Overload:AdvancedSceneManager.Core.SceneOperation.friendlyText
  name: friendlyText
  nameWithType: SceneOperation.friendlyText
  fullName: AdvancedSceneManager.Core.SceneOperation.friendlyText
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: AdvancedSceneManager.Core.SceneOperation.WithFriendlyText*
  commentId: Overload:AdvancedSceneManager.Core.SceneOperation.WithFriendlyText
  name: WithFriendlyText
  nameWithType: SceneOperation.WithFriendlyText
  fullName: AdvancedSceneManager.Core.SceneOperation.WithFriendlyText
- uid: AdvancedSceneManager.Core.ISceneOperationProps.open
  commentId: P:AdvancedSceneManager.Core.ISceneOperationProps.open
  isExternal: true
- uid: AdvancedSceneManager.Core.SceneOperation.open*
  commentId: Overload:AdvancedSceneManager.Core.SceneOperation.open
  name: open
  nameWithType: SceneOperation.open
  fullName: AdvancedSceneManager.Core.SceneOperation.open
- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.ValueTuple{AdvancedSceneManager.Models.Scene,System.Boolean}}
  commentId: T:System.Collections.ObjectModel.ReadOnlyCollection{System.ValueTuple{AdvancedSceneManager.Models.Scene,System.Boolean}}
  parent: System.Collections.ObjectModel
  definition: System.Collections.ObjectModel.ReadOnlyCollection`1
  name: ReadOnlyCollection<(T1, T2)<Scene, Boolean>>
  nameWithType: ReadOnlyCollection<(T1, T2)<Scene, Boolean>>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.ValueTuple<AdvancedSceneManager.Models.Scene, System.Boolean>>
  nameWithType.vb: ReadOnlyCollection(Of (T1, T2)(Of Scene, Boolean))
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of System.ValueTuple(Of AdvancedSceneManager.Models.Scene, System.Boolean))
  name.vb: ReadOnlyCollection(Of (T1, T2)(Of Scene, Boolean))
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: AdvancedSceneManager.Models.Scene
    name: Scene
    nameWithType: Scene
    fullName: AdvancedSceneManager.Models.Scene
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: AdvancedSceneManager.Models.Scene
    name: Scene
    nameWithType: Scene
    fullName: AdvancedSceneManager.Models.Scene
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1
  commentId: T:System.Collections.ObjectModel.ReadOnlyCollection`1
  isExternal: true
  name: ReadOnlyCollection<T>
  nameWithType: ReadOnlyCollection<T>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>
  nameWithType.vb: ReadOnlyCollection(Of T)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T)
  name.vb: ReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel
  commentId: N:System.Collections.ObjectModel
  isExternal: true
  name: System.Collections.ObjectModel
  nameWithType: System.Collections.ObjectModel
  fullName: System.Collections.ObjectModel
- uid: AdvancedSceneManager.Core.ISceneOperationProps.close
  commentId: P:AdvancedSceneManager.Core.ISceneOperationProps.close
  isExternal: true
- uid: AdvancedSceneManager.Core.SceneOperation.close*
  commentId: Overload:AdvancedSceneManager.Core.SceneOperation.close
  name: close
  nameWithType: SceneOperation.close
  fullName: AdvancedSceneManager.Core.SceneOperation.close
- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.ValueTuple{AdvancedSceneManager.Core.OpenSceneInfo,System.Boolean}}
  commentId: T:System.Collections.ObjectModel.ReadOnlyCollection{System.ValueTuple{AdvancedSceneManager.Core.OpenSceneInfo,System.Boolean}}
  parent: System.Collections.ObjectModel
  definition: System.Collections.ObjectModel.ReadOnlyCollection`1
  name: ReadOnlyCollection<(T1, T2)<OpenSceneInfo, Boolean>>
  nameWithType: ReadOnlyCollection<(T1, T2)<OpenSceneInfo, Boolean>>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.ValueTuple<AdvancedSceneManager.Core.OpenSceneInfo, System.Boolean>>
  nameWithType.vb: ReadOnlyCollection(Of (T1, T2)(Of OpenSceneInfo, Boolean))
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of System.ValueTuple(Of AdvancedSceneManager.Core.OpenSceneInfo, System.Boolean))
  name.vb: ReadOnlyCollection(Of (T1, T2)(Of OpenSceneInfo, Boolean))
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: AdvancedSceneManager.Core.OpenSceneInfo
    name: OpenSceneInfo
    nameWithType: OpenSceneInfo
    fullName: AdvancedSceneManager.Core.OpenSceneInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: AdvancedSceneManager.Core.OpenSceneInfo
    name: OpenSceneInfo
    nameWithType: OpenSceneInfo
    fullName: AdvancedSceneManager.Core.OpenSceneInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: AdvancedSceneManager.Core.ISceneOperationProps.reopen
  commentId: P:AdvancedSceneManager.Core.ISceneOperationProps.reopen
  isExternal: true
- uid: AdvancedSceneManager.Core.SceneOperation.reopen*
  commentId: Overload:AdvancedSceneManager.Core.SceneOperation.reopen
  name: reopen
  nameWithType: SceneOperation.reopen
  fullName: AdvancedSceneManager.Core.SceneOperation.reopen
- uid: System.Collections.ObjectModel.ReadOnlyCollection{AdvancedSceneManager.Core.OpenSceneInfo}
  commentId: T:System.Collections.ObjectModel.ReadOnlyCollection{AdvancedSceneManager.Core.OpenSceneInfo}
  parent: System.Collections.ObjectModel
  definition: System.Collections.ObjectModel.ReadOnlyCollection`1
  name: ReadOnlyCollection<OpenSceneInfo>
  nameWithType: ReadOnlyCollection<OpenSceneInfo>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<AdvancedSceneManager.Core.OpenSceneInfo>
  nameWithType.vb: ReadOnlyCollection(Of OpenSceneInfo)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of AdvancedSceneManager.Core.OpenSceneInfo)
  name.vb: ReadOnlyCollection(Of OpenSceneInfo)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: AdvancedSceneManager.Core.OpenSceneInfo
    name: OpenSceneInfo
    nameWithType: OpenSceneInfo
    fullName: AdvancedSceneManager.Core.OpenSceneInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: AdvancedSceneManager.Core.OpenSceneInfo
    name: OpenSceneInfo
    nameWithType: OpenSceneInfo
    fullName: AdvancedSceneManager.Core.OpenSceneInfo
  - name: )
    nameWithType: )
    fullName: )
- uid: AdvancedSceneManager.Core.ISceneOperationProps.customActions
  commentId: P:AdvancedSceneManager.Core.ISceneOperationProps.customActions
  isExternal: true
- uid: AdvancedSceneManager.Core.SceneOperation.customActions*
  commentId: Overload:AdvancedSceneManager.Core.SceneOperation.customActions
  name: customActions
  nameWithType: SceneOperation.customActions
  fullName: AdvancedSceneManager.Core.SceneOperation.customActions
- uid: System.Collections.ObjectModel.ReadOnlyCollection{AdvancedSceneManager.Core.Actions.SceneAction}
  commentId: T:System.Collections.ObjectModel.ReadOnlyCollection{AdvancedSceneManager.Core.Actions.SceneAction}
  parent: System.Collections.ObjectModel
  definition: System.Collections.ObjectModel.ReadOnlyCollection`1
  name: ReadOnlyCollection<SceneAction>
  nameWithType: ReadOnlyCollection<SceneAction>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<AdvancedSceneManager.Core.Actions.SceneAction>
  nameWithType.vb: ReadOnlyCollection(Of SceneAction)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of AdvancedSceneManager.Core.Actions.SceneAction)
  name.vb: ReadOnlyCollection(Of SceneAction)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: AdvancedSceneManager.Core.Actions.SceneAction
    name: SceneAction
    nameWithType: SceneAction
    fullName: AdvancedSceneManager.Core.Actions.SceneAction
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: AdvancedSceneManager.Core.Actions.SceneAction
    name: SceneAction
    nameWithType: SceneAction
    fullName: AdvancedSceneManager.Core.Actions.SceneAction
  - name: )
    nameWithType: )
    fullName: )
- uid: AdvancedSceneManager.Core.ISceneOperationProps.callbacks
  commentId: P:AdvancedSceneManager.Core.ISceneOperationProps.callbacks
  isExternal: true
- uid: AdvancedSceneManager.Core.SceneOperation.callbacks*
  commentId: Overload:AdvancedSceneManager.Core.SceneOperation.callbacks
  name: callbacks
  nameWithType: SceneOperation.callbacks
  fullName: AdvancedSceneManager.Core.SceneOperation.callbacks
- uid: System.Collections.ObjectModel.ReadOnlyCollection{AdvancedSceneManager.Core.Callback}
  commentId: T:System.Collections.ObjectModel.ReadOnlyCollection{AdvancedSceneManager.Core.Callback}
  parent: System.Collections.ObjectModel
  definition: System.Collections.ObjectModel.ReadOnlyCollection`1
  name: ReadOnlyCollection<Callback>
  nameWithType: ReadOnlyCollection<Callback>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<AdvancedSceneManager.Core.Callback>
  nameWithType.vb: ReadOnlyCollection(Of Callback)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of AdvancedSceneManager.Core.Callback)
  name.vb: ReadOnlyCollection(Of Callback)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: AdvancedSceneManager.Core.Callback
    name: Callback
    nameWithType: Callback
    fullName: AdvancedSceneManager.Core.Callback
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: AdvancedSceneManager.Core.Callback
    name: Callback
    nameWithType: Callback
    fullName: AdvancedSceneManager.Core.Callback
  - name: )
    nameWithType: )
    fullName: )
- uid: AdvancedSceneManager.Core.ISceneOperationProps.collection
  commentId: P:AdvancedSceneManager.Core.ISceneOperationProps.collection
  isExternal: true
- uid: AdvancedSceneManager.Core.SceneOperation.collection*
  commentId: Overload:AdvancedSceneManager.Core.SceneOperation.collection
  name: collection
  nameWithType: SceneOperation.collection
  fullName: AdvancedSceneManager.Core.SceneOperation.collection
- uid: AdvancedSceneManager.Models.SceneCollection
  commentId: T:AdvancedSceneManager.Models.SceneCollection
  parent: AdvancedSceneManager.Models
  name: SceneCollection
  nameWithType: SceneCollection
  fullName: AdvancedSceneManager.Models.SceneCollection
- uid: AdvancedSceneManager.Models
  commentId: N:AdvancedSceneManager.Models
  name: AdvancedSceneManager.Models
  nameWithType: AdvancedSceneManager.Models
  fullName: AdvancedSceneManager.Models
- uid: AdvancedSceneManager.Core.ISceneOperationProps.loadingScreen
  commentId: P:AdvancedSceneManager.Core.ISceneOperationProps.loadingScreen
  isExternal: true
- uid: AdvancedSceneManager.Core.SceneOperation.loadingScreen*
  commentId: Overload:AdvancedSceneManager.Core.SceneOperation.loadingScreen
  name: loadingScreen
  nameWithType: SceneOperation.loadingScreen
  fullName: AdvancedSceneManager.Core.SceneOperation.loadingScreen
- uid: AdvancedSceneManager.Models.Scene
  commentId: T:AdvancedSceneManager.Models.Scene
  parent: AdvancedSceneManager.Models
  name: Scene
  nameWithType: Scene
  fullName: AdvancedSceneManager.Models.Scene
- uid: AdvancedSceneManager.Core.ISceneOperationProps.useLoadingScreen
  commentId: P:AdvancedSceneManager.Core.ISceneOperationProps.useLoadingScreen
  isExternal: true
- uid: AdvancedSceneManager.Core.SceneOperation.useLoadingScreen*
  commentId: Overload:AdvancedSceneManager.Core.SceneOperation.useLoadingScreen
  name: useLoadingScreen
  nameWithType: SceneOperation.useLoadingScreen
  fullName: AdvancedSceneManager.Core.SceneOperation.useLoadingScreen
- uid: AdvancedSceneManager.Core.ISceneOperationProps.clearUnusedAssets
  commentId: P:AdvancedSceneManager.Core.ISceneOperationProps.clearUnusedAssets
  isExternal: true
- uid: AdvancedSceneManager.Core.SceneOperation.clearUnusedAssets*
  commentId: Overload:AdvancedSceneManager.Core.SceneOperation.clearUnusedAssets
  name: clearUnusedAssets
  nameWithType: SceneOperation.clearUnusedAssets
  fullName: AdvancedSceneManager.Core.SceneOperation.clearUnusedAssets
- uid: System.Nullable{System.Boolean}
  commentId: T:System.Nullable{System.Boolean}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Boolean>
  nameWithType: Nullable<Boolean>
  fullName: System.Nullable<System.Boolean>
  nameWithType.vb: Nullable(Of Boolean)
  fullName.vb: System.Nullable(Of System.Boolean)
  name.vb: Nullable(Of Boolean)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: AdvancedSceneManager.Core.ISceneOperationProps.doCollectionCallbacks
  commentId: P:AdvancedSceneManager.Core.ISceneOperationProps.doCollectionCallbacks
  isExternal: true
- uid: AdvancedSceneManager.Core.SceneOperation.doCollectionCallbacks*
  commentId: Overload:AdvancedSceneManager.Core.SceneOperation.doCollectionCallbacks
  name: doCollectionCallbacks
  nameWithType: SceneOperation.doCollectionCallbacks
  fullName: AdvancedSceneManager.Core.SceneOperation.doCollectionCallbacks
- uid: AdvancedSceneManager.Core.ISceneOperationProps.loadingScreenCallback
  commentId: P:AdvancedSceneManager.Core.ISceneOperationProps.loadingScreenCallback
  isExternal: true
- uid: AdvancedSceneManager.Core.SceneOperation.loadingScreenCallback*
  commentId: Overload:AdvancedSceneManager.Core.SceneOperation.loadingScreenCallback
  name: loadingScreenCallback
  nameWithType: SceneOperation.loadingScreenCallback
  fullName: AdvancedSceneManager.Core.SceneOperation.loadingScreenCallback
- uid: System.Action{AdvancedSceneManager.Callbacks.LoadingScreen}
  commentId: T:System.Action{AdvancedSceneManager.Callbacks.LoadingScreen}
  parent: System
  definition: System.Action`1
  name: Action<LoadingScreen>
  nameWithType: Action<LoadingScreen>
  fullName: System.Action<AdvancedSceneManager.Callbacks.LoadingScreen>
  nameWithType.vb: Action(Of LoadingScreen)
  fullName.vb: System.Action(Of AdvancedSceneManager.Callbacks.LoadingScreen)
  name.vb: Action(Of LoadingScreen)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: AdvancedSceneManager.Callbacks.LoadingScreen
    name: LoadingScreen
    nameWithType: LoadingScreen
    fullName: AdvancedSceneManager.Callbacks.LoadingScreen
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: AdvancedSceneManager.Callbacks.LoadingScreen
    name: LoadingScreen
    nameWithType: LoadingScreen
    fullName: AdvancedSceneManager.Callbacks.LoadingScreen
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: AdvancedSceneManager.Core.ISceneOperationProps.loadingPriority
  commentId: P:AdvancedSceneManager.Core.ISceneOperationProps.loadingPriority
  isExternal: true
- uid: AdvancedSceneManager.Core.SceneOperation.loadingPriority*
  commentId: Overload:AdvancedSceneManager.Core.SceneOperation.loadingPriority
  name: loadingPriority
  nameWithType: SceneOperation.loadingPriority
  fullName: AdvancedSceneManager.Core.SceneOperation.loadingPriority
- uid: System.Nullable{UnityEngine.ThreadPriority}
  commentId: T:System.Nullable{UnityEngine.ThreadPriority}
  parent: System
  definition: System.Nullable`1
  name: Nullable<ThreadPriority>
  nameWithType: Nullable<ThreadPriority>
  fullName: System.Nullable<UnityEngine.ThreadPriority>
  nameWithType.vb: Nullable(Of ThreadPriority)
  fullName.vb: System.Nullable(Of UnityEngine.ThreadPriority)
  name.vb: Nullable(Of ThreadPriority)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: UnityEngine.ThreadPriority
    name: ThreadPriority
    nameWithType: ThreadPriority
    fullName: UnityEngine.ThreadPriority
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: UnityEngine.ThreadPriority
    name: ThreadPriority
    nameWithType: ThreadPriority
    fullName: UnityEngine.ThreadPriority
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: AdvancedSceneManager.Core.ISceneOperationProps.closeBehavior
  commentId: P:AdvancedSceneManager.Core.ISceneOperationProps.closeBehavior
  isExternal: true
- uid: AdvancedSceneManager.Core.SceneOperation.closeBehavior*
  commentId: Overload:AdvancedSceneManager.Core.SceneOperation.closeBehavior
  name: closeBehavior
  nameWithType: SceneOperation.closeBehavior
  fullName: AdvancedSceneManager.Core.SceneOperation.closeBehavior
- uid: System.Nullable{AdvancedSceneManager.Models.SceneCloseBehavior}
  commentId: T:System.Nullable{AdvancedSceneManager.Models.SceneCloseBehavior}
  parent: System
  definition: System.Nullable`1
  name: Nullable<SceneCloseBehavior>
  nameWithType: Nullable<SceneCloseBehavior>
  fullName: System.Nullable<AdvancedSceneManager.Models.SceneCloseBehavior>
  nameWithType.vb: Nullable(Of SceneCloseBehavior)
  fullName.vb: System.Nullable(Of AdvancedSceneManager.Models.SceneCloseBehavior)
  name.vb: Nullable(Of SceneCloseBehavior)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: AdvancedSceneManager.Models.SceneCloseBehavior
    name: SceneCloseBehavior
    nameWithType: SceneCloseBehavior
    fullName: AdvancedSceneManager.Models.SceneCloseBehavior
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: AdvancedSceneManager.Models.SceneCloseBehavior
    name: SceneCloseBehavior
    nameWithType: SceneCloseBehavior
    fullName: AdvancedSceneManager.Models.SceneCloseBehavior
  - name: )
    nameWithType: )
    fullName: )
- uid: AdvancedSceneManager.Core.IFluent`1.Open(AdvancedSceneManager.Models.Scene[])
  commentId: M:AdvancedSceneManager.Core.IFluent`1.Open(AdvancedSceneManager.Models.Scene[])
  isExternal: true
- uid: AdvancedSceneManager.Core.SceneOperation.Open*
  commentId: Overload:AdvancedSceneManager.Core.SceneOperation.Open
  name: Open
  nameWithType: SceneOperation.Open
  fullName: AdvancedSceneManager.Core.SceneOperation.Open
- uid: AdvancedSceneManager.Models.Scene[]
  isExternal: true
  name: Scene[]
  nameWithType: Scene[]
  fullName: AdvancedSceneManager.Models.Scene[]
  nameWithType.vb: Scene()
  fullName.vb: AdvancedSceneManager.Models.Scene()
  name.vb: Scene()
  spec.csharp:
  - uid: AdvancedSceneManager.Models.Scene
    name: Scene
    nameWithType: Scene
    fullName: AdvancedSceneManager.Models.Scene
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: AdvancedSceneManager.Models.Scene
    name: Scene
    nameWithType: Scene
    fullName: AdvancedSceneManager.Models.Scene
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: AdvancedSceneManager.Core.IFluent`1.Close(System.Collections.Generic.IEnumerable{AdvancedSceneManager.Core.OpenSceneInfo},System.Boolean)
  commentId: M:AdvancedSceneManager.Core.IFluent`1.Close(System.Collections.Generic.IEnumerable{AdvancedSceneManager.Core.OpenSceneInfo},System.Boolean)
  isExternal: true
- uid: System.Collections.Generic.IEnumerable{AdvancedSceneManager.Models.Scene}
  commentId: T:System.Collections.Generic.IEnumerable{AdvancedSceneManager.Models.Scene}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Scene>
  nameWithType: IEnumerable<Scene>
  fullName: System.Collections.Generic.IEnumerable<AdvancedSceneManager.Models.Scene>
  nameWithType.vb: IEnumerable(Of Scene)
  fullName.vb: System.Collections.Generic.IEnumerable(Of AdvancedSceneManager.Models.Scene)
  name.vb: IEnumerable(Of Scene)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: AdvancedSceneManager.Models.Scene
    name: Scene
    nameWithType: Scene
    fullName: AdvancedSceneManager.Models.Scene
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: AdvancedSceneManager.Models.Scene
    name: Scene
    nameWithType: Scene
    fullName: AdvancedSceneManager.Models.Scene
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: AdvancedSceneManager.Core.IFluent`1.Close(AdvancedSceneManager.Core.OpenSceneInfo[])
  commentId: M:AdvancedSceneManager.Core.IFluent`1.Close(AdvancedSceneManager.Core.OpenSceneInfo[])
  isExternal: true
- uid: AdvancedSceneManager.Core.SceneOperation.Close*
  commentId: Overload:AdvancedSceneManager.Core.SceneOperation.Close
  name: Close
  nameWithType: SceneOperation.Close
  fullName: AdvancedSceneManager.Core.SceneOperation.Close
- uid: AdvancedSceneManager.Core.OpenSceneInfo[]
  isExternal: true
  name: OpenSceneInfo[]
  nameWithType: OpenSceneInfo[]
  fullName: AdvancedSceneManager.Core.OpenSceneInfo[]
  nameWithType.vb: OpenSceneInfo()
  fullName.vb: AdvancedSceneManager.Core.OpenSceneInfo()
  name.vb: OpenSceneInfo()
  spec.csharp:
  - uid: AdvancedSceneManager.Core.OpenSceneInfo
    name: OpenSceneInfo
    nameWithType: OpenSceneInfo
    fullName: AdvancedSceneManager.Core.OpenSceneInfo
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: AdvancedSceneManager.Core.OpenSceneInfo
    name: OpenSceneInfo
    nameWithType: OpenSceneInfo
    fullName: AdvancedSceneManager.Core.OpenSceneInfo
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Collections.Generic.IEnumerable{AdvancedSceneManager.Core.OpenSceneInfo}
  commentId: T:System.Collections.Generic.IEnumerable{AdvancedSceneManager.Core.OpenSceneInfo}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<OpenSceneInfo>
  nameWithType: IEnumerable<OpenSceneInfo>
  fullName: System.Collections.Generic.IEnumerable<AdvancedSceneManager.Core.OpenSceneInfo>
  nameWithType.vb: IEnumerable(Of OpenSceneInfo)
  fullName.vb: System.Collections.Generic.IEnumerable(Of AdvancedSceneManager.Core.OpenSceneInfo)
  name.vb: IEnumerable(Of OpenSceneInfo)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: AdvancedSceneManager.Core.OpenSceneInfo
    name: OpenSceneInfo
    nameWithType: OpenSceneInfo
    fullName: AdvancedSceneManager.Core.OpenSceneInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: AdvancedSceneManager.Core.OpenSceneInfo
    name: OpenSceneInfo
    nameWithType: OpenSceneInfo
    fullName: AdvancedSceneManager.Core.OpenSceneInfo
  - name: )
    nameWithType: )
    fullName: )
- uid: AdvancedSceneManager.Core.IFluent`1.Close(System.Boolean,AdvancedSceneManager.Core.OpenSceneInfo[])
  commentId: M:AdvancedSceneManager.Core.IFluent`1.Close(System.Boolean,AdvancedSceneManager.Core.OpenSceneInfo[])
  isExternal: true
- uid: AdvancedSceneManager.Core.IFluent`1.Reopen(AdvancedSceneManager.Core.OpenSceneInfo[])
  commentId: M:AdvancedSceneManager.Core.IFluent`1.Reopen(AdvancedSceneManager.Core.OpenSceneInfo[])
  isExternal: true
- uid: AdvancedSceneManager.Core.SceneOperation.Reopen*
  commentId: Overload:AdvancedSceneManager.Core.SceneOperation.Reopen
  name: Reopen
  nameWithType: SceneOperation.Reopen
  fullName: AdvancedSceneManager.Core.SceneOperation.Reopen
- uid: AdvancedSceneManager.Core.IFluent`1.Reopen(System.Collections.Generic.IEnumerable{AdvancedSceneManager.Core.OpenSceneInfo})
  commentId: M:AdvancedSceneManager.Core.IFluent`1.Reopen(System.Collections.Generic.IEnumerable{AdvancedSceneManager.Core.OpenSceneInfo})
  isExternal: true
- uid: AdvancedSceneManager.Core.IFluent`1.Reopen(AdvancedSceneManager.Models.Scene[])
  commentId: M:AdvancedSceneManager.Core.IFluent`1.Reopen(AdvancedSceneManager.Models.Scene[])
  isExternal: true
- uid: AdvancedSceneManager.Core.IFluent`1.Reopen(System.Collections.Generic.IEnumerable{AdvancedSceneManager.Models.Scene})
  commentId: M:AdvancedSceneManager.Core.IFluent`1.Reopen(System.Collections.Generic.IEnumerable{AdvancedSceneManager.Models.Scene})
  isExternal: true
- uid: AdvancedSceneManager.Core.IFluent`1.WithAction(AdvancedSceneManager.Core.Actions.SceneAction[])
  commentId: M:AdvancedSceneManager.Core.IFluent`1.WithAction(AdvancedSceneManager.Core.Actions.SceneAction[])
  isExternal: true
- uid: AdvancedSceneManager.Core.SceneOperation.WithAction*
  commentId: Overload:AdvancedSceneManager.Core.SceneOperation.WithAction
  name: WithAction
  nameWithType: SceneOperation.WithAction
  fullName: AdvancedSceneManager.Core.SceneOperation.WithAction
- uid: AdvancedSceneManager.Core.Actions.SceneAction[]
  isExternal: true
  name: SceneAction[]
  nameWithType: SceneAction[]
  fullName: AdvancedSceneManager.Core.Actions.SceneAction[]
  nameWithType.vb: SceneAction()
  fullName.vb: AdvancedSceneManager.Core.Actions.SceneAction()
  name.vb: SceneAction()
  spec.csharp:
  - uid: AdvancedSceneManager.Core.Actions.SceneAction
    name: SceneAction
    nameWithType: SceneAction
    fullName: AdvancedSceneManager.Core.Actions.SceneAction
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: AdvancedSceneManager.Core.Actions.SceneAction
    name: SceneAction
    nameWithType: SceneAction
    fullName: AdvancedSceneManager.Core.Actions.SceneAction
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: AdvancedSceneManager.Core.IFluent`1.WithCallback(AdvancedSceneManager.Core.Callback)
  commentId: M:AdvancedSceneManager.Core.IFluent`1.WithCallback(AdvancedSceneManager.Core.Callback)
  isExternal: true
- uid: AdvancedSceneManager.Core.SceneOperation.WithCallback*
  commentId: Overload:AdvancedSceneManager.Core.SceneOperation.WithCallback
  name: WithCallback
  nameWithType: SceneOperation.WithCallback
  fullName: AdvancedSceneManager.Core.SceneOperation.WithCallback
- uid: AdvancedSceneManager.Core.Callback
  commentId: T:AdvancedSceneManager.Core.Callback
  parent: AdvancedSceneManager.Core
  name: Callback
  nameWithType: Callback
  fullName: AdvancedSceneManager.Core.Callback
- uid: AdvancedSceneManager.Core.IFluent`1.WithCollection(AdvancedSceneManager.Models.SceneCollection,System.Boolean)
  commentId: M:AdvancedSceneManager.Core.IFluent`1.WithCollection(AdvancedSceneManager.Models.SceneCollection,System.Boolean)
  isExternal: true
- uid: AdvancedSceneManager.Core.SceneOperation.WithCollection*
  commentId: Overload:AdvancedSceneManager.Core.SceneOperation.WithCollection
  name: WithCollection
  nameWithType: SceneOperation.WithCollection
  fullName: AdvancedSceneManager.Core.SceneOperation.WithCollection
- uid: AdvancedSceneManager.Core.IFluent`1.WithLoadingScreen(System.Boolean)
  commentId: M:AdvancedSceneManager.Core.IFluent`1.WithLoadingScreen(System.Boolean)
  isExternal: true
- uid: AdvancedSceneManager.Core.SceneOperation.WithLoadingScreen*
  commentId: Overload:AdvancedSceneManager.Core.SceneOperation.WithLoadingScreen
  name: WithLoadingScreen
  nameWithType: SceneOperation.WithLoadingScreen
  fullName: AdvancedSceneManager.Core.SceneOperation.WithLoadingScreen
- uid: AdvancedSceneManager.Core.IFluent`1.WithLoadingScreen(AdvancedSceneManager.Models.Scene)
  commentId: M:AdvancedSceneManager.Core.IFluent`1.WithLoadingScreen(AdvancedSceneManager.Models.Scene)
  isExternal: true
- uid: AdvancedSceneManager.Core.IFluent`1.WithClearUnusedAssets(System.Boolean)
  commentId: M:AdvancedSceneManager.Core.IFluent`1.WithClearUnusedAssets(System.Boolean)
  isExternal: true
- uid: AdvancedSceneManager.Core.SceneOperation.WithClearUnusedAssets*
  commentId: Overload:AdvancedSceneManager.Core.SceneOperation.WithClearUnusedAssets
  name: WithClearUnusedAssets
  nameWithType: SceneOperation.WithClearUnusedAssets
  fullName: AdvancedSceneManager.Core.SceneOperation.WithClearUnusedAssets
- uid: AdvancedSceneManager.Core.IFluent`1.WithLoadingScreenCallback(System.Action{AdvancedSceneManager.Callbacks.LoadingScreen})
  commentId: M:AdvancedSceneManager.Core.IFluent`1.WithLoadingScreenCallback(System.Action{AdvancedSceneManager.Callbacks.LoadingScreen})
  isExternal: true
- uid: AdvancedSceneManager.Core.SceneOperation.WithLoadingScreenCallback*
  commentId: Overload:AdvancedSceneManager.Core.SceneOperation.WithLoadingScreenCallback
  name: WithLoadingScreenCallback
  nameWithType: SceneOperation.WithLoadingScreenCallback
  fullName: AdvancedSceneManager.Core.SceneOperation.WithLoadingScreenCallback
- uid: AdvancedSceneManager.Core.IFluent`1.WithLoadingPriority(UnityEngine.ThreadPriority)
  commentId: M:AdvancedSceneManager.Core.IFluent`1.WithLoadingPriority(UnityEngine.ThreadPriority)
  isExternal: true
- uid: AdvancedSceneManager.Core.SceneOperation.WithLoadingPriority*
  commentId: Overload:AdvancedSceneManager.Core.SceneOperation.WithLoadingPriority
  name: WithLoadingPriority
  nameWithType: SceneOperation.WithLoadingPriority
  fullName: AdvancedSceneManager.Core.SceneOperation.WithLoadingPriority
- uid: UnityEngine.ThreadPriority
  commentId: T:UnityEngine.ThreadPriority
  parent: UnityEngine
  isExternal: true
  name: ThreadPriority
  nameWithType: ThreadPriority
  fullName: UnityEngine.ThreadPriority
- uid: AdvancedSceneManager.Core.IFluent`1.AsPersistent(AdvancedSceneManager.Models.SceneCloseBehavior)
  commentId: M:AdvancedSceneManager.Core.IFluent`1.AsPersistent(AdvancedSceneManager.Models.SceneCloseBehavior)
  isExternal: true
- uid: AdvancedSceneManager.Core.SceneOperation.AsPersistent*
  commentId: Overload:AdvancedSceneManager.Core.SceneOperation.AsPersistent
  name: AsPersistent
  nameWithType: SceneOperation.AsPersistent
  fullName: AdvancedSceneManager.Core.SceneOperation.AsPersistent
- uid: AdvancedSceneManager.Models.SceneCloseBehavior
  commentId: T:AdvancedSceneManager.Models.SceneCloseBehavior
  parent: AdvancedSceneManager.Models
  name: SceneCloseBehavior
  nameWithType: SceneCloseBehavior
  fullName: AdvancedSceneManager.Models.SceneCloseBehavior
- uid: System.Collections.Generic.List{AdvancedSceneManager.Core.Callback}
  commentId: T:System.Collections.Generic.List{AdvancedSceneManager.Core.Callback}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Callback>
  nameWithType: List<Callback>
  fullName: System.Collections.Generic.List<AdvancedSceneManager.Core.Callback>
  nameWithType.vb: List(Of Callback)
  fullName.vb: System.Collections.Generic.List(Of AdvancedSceneManager.Core.Callback)
  name.vb: List(Of Callback)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: AdvancedSceneManager.Core.Callback
    name: Callback
    nameWithType: Callback
    fullName: AdvancedSceneManager.Core.Callback
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: AdvancedSceneManager.Core.Callback
    name: Callback
    nameWithType: Callback
    fullName: AdvancedSceneManager.Core.Callback
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: AdvancedSceneManager.Core.SceneOperation.AddCallback*
  commentId: Overload:AdvancedSceneManager.Core.SceneOperation.AddCallback
  name: AddCallback
  nameWithType: SceneOperation.AddCallback
  fullName: AdvancedSceneManager.Core.SceneOperation.AddCallback
- uid: AdvancedSceneManager.Core.SceneOperation.RemoveCallback*
  commentId: Overload:AdvancedSceneManager.Core.SceneOperation.RemoveCallback
  name: RemoveCallback
  nameWithType: SceneOperation.RemoveCallback
  fullName: AdvancedSceneManager.Core.SceneOperation.RemoveCallback
- uid: UnityEngine.CustomYieldInstruction.keepWaiting
  commentId: P:UnityEngine.CustomYieldInstruction.keepWaiting
  parent: UnityEngine.CustomYieldInstruction
  isExternal: true
  name: keepWaiting
  nameWithType: CustomYieldInstruction.keepWaiting
  fullName: UnityEngine.CustomYieldInstruction.keepWaiting
- uid: AdvancedSceneManager.Core.SceneOperation.keepWaiting*
  commentId: Overload:AdvancedSceneManager.Core.SceneOperation.keepWaiting
  name: keepWaiting
  nameWithType: SceneOperation.keepWaiting
  fullName: AdvancedSceneManager.Core.SceneOperation.keepWaiting
- uid: AdvancedSceneManager.Core.SceneOperation.phase*
  commentId: Overload:AdvancedSceneManager.Core.SceneOperation.phase
  name: phase
  nameWithType: SceneOperation.phase
  fullName: AdvancedSceneManager.Core.SceneOperation.phase
- uid: AdvancedSceneManager.Core.Phase
  commentId: T:AdvancedSceneManager.Core.Phase
  parent: AdvancedSceneManager.Core
  name: Phase
  nameWithType: Phase
  fullName: AdvancedSceneManager.Core.Phase
- uid: AdvancedSceneManager.Core.SceneOperation.sceneManager*
  commentId: Overload:AdvancedSceneManager.Core.SceneOperation.sceneManager
  name: sceneManager
  nameWithType: SceneOperation.sceneManager
  fullName: AdvancedSceneManager.Core.SceneOperation.sceneManager
- uid: AdvancedSceneManager.Core.SceneOperation.current*
  commentId: Overload:AdvancedSceneManager.Core.SceneOperation.current
  name: current
  nameWithType: SceneOperation.current
  fullName: AdvancedSceneManager.Core.SceneOperation.current
- uid: AdvancedSceneManager.Core.SceneOperation.cancelled*
  commentId: Overload:AdvancedSceneManager.Core.SceneOperation.cancelled
  name: cancelled
  nameWithType: SceneOperation.cancelled
  fullName: AdvancedSceneManager.Core.SceneOperation.cancelled
- uid: AdvancedSceneManager.Core.SceneOperation.openedLoadingScreen*
  commentId: Overload:AdvancedSceneManager.Core.SceneOperation.openedLoadingScreen
  name: openedLoadingScreen
  nameWithType: SceneOperation.openedLoadingScreen
  fullName: AdvancedSceneManager.Core.SceneOperation.openedLoadingScreen
- uid: AdvancedSceneManager.Core.SceneOperation{AdvancedSceneManager.Callbacks.LoadingScreen}
  commentId: T:AdvancedSceneManager.Core.SceneOperation{AdvancedSceneManager.Callbacks.LoadingScreen}
  parent: AdvancedSceneManager.Core
  definition: AdvancedSceneManager.Core.SceneOperation`1
  name: SceneOperation<LoadingScreen>
  nameWithType: SceneOperation<LoadingScreen>
  fullName: AdvancedSceneManager.Core.SceneOperation<AdvancedSceneManager.Callbacks.LoadingScreen>
  nameWithType.vb: SceneOperation(Of LoadingScreen)
  fullName.vb: AdvancedSceneManager.Core.SceneOperation(Of AdvancedSceneManager.Callbacks.LoadingScreen)
  name.vb: SceneOperation(Of LoadingScreen)
  spec.csharp:
  - uid: AdvancedSceneManager.Core.SceneOperation`1
    name: SceneOperation
    nameWithType: SceneOperation
    fullName: AdvancedSceneManager.Core.SceneOperation
  - name: <
    nameWithType: <
    fullName: <
  - uid: AdvancedSceneManager.Callbacks.LoadingScreen
    name: LoadingScreen
    nameWithType: LoadingScreen
    fullName: AdvancedSceneManager.Callbacks.LoadingScreen
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: AdvancedSceneManager.Core.SceneOperation`1
    name: SceneOperation
    nameWithType: SceneOperation
    fullName: AdvancedSceneManager.Core.SceneOperation
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: AdvancedSceneManager.Callbacks.LoadingScreen
    name: LoadingScreen
    nameWithType: LoadingScreen
    fullName: AdvancedSceneManager.Callbacks.LoadingScreen
  - name: )
    nameWithType: )
    fullName: )
- uid: AdvancedSceneManager.Core.SceneOperation.actions*
  commentId: Overload:AdvancedSceneManager.Core.SceneOperation.actions
  name: actions
  nameWithType: SceneOperation.actions
  fullName: AdvancedSceneManager.Core.SceneOperation.actions
- uid: AdvancedSceneManager.Core.SceneOperation.totalProgress*
  commentId: Overload:AdvancedSceneManager.Core.SceneOperation.totalProgress
  name: totalProgress
  nameWithType: SceneOperation.totalProgress
  fullName: AdvancedSceneManager.Core.SceneOperation.totalProgress
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: AdvancedSceneManager.Core.SceneOperation.Cancel*
  commentId: Overload:AdvancedSceneManager.Core.SceneOperation.Cancel
  name: Cancel
  nameWithType: SceneOperation.Cancel
  fullName: AdvancedSceneManager.Core.SceneOperation.Cancel
- uid: AdvancedSceneManager.Core.SceneOperation.FindActions*
  commentId: Overload:AdvancedSceneManager.Core.SceneOperation.FindActions
  name: FindActions
  nameWithType: SceneOperation.FindActions
  fullName: AdvancedSceneManager.Core.SceneOperation.FindActions
- uid: System.Collections.Generic.IEnumerable{AdvancedSceneManager.Core.Actions.SceneAction}
  commentId: T:System.Collections.Generic.IEnumerable{AdvancedSceneManager.Core.Actions.SceneAction}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<SceneAction>
  nameWithType: IEnumerable<SceneAction>
  fullName: System.Collections.Generic.IEnumerable<AdvancedSceneManager.Core.Actions.SceneAction>
  nameWithType.vb: IEnumerable(Of SceneAction)
  fullName.vb: System.Collections.Generic.IEnumerable(Of AdvancedSceneManager.Core.Actions.SceneAction)
  name.vb: IEnumerable(Of SceneAction)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: AdvancedSceneManager.Core.Actions.SceneAction
    name: SceneAction
    nameWithType: SceneAction
    fullName: AdvancedSceneManager.Core.Actions.SceneAction
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: AdvancedSceneManager.Core.Actions.SceneAction
    name: SceneAction
    nameWithType: SceneAction
    fullName: AdvancedSceneManager.Core.Actions.SceneAction
  - name: )
    nameWithType: )
    fullName: )
- uid: AdvancedSceneManager.Core.SceneOperation.FindLastAction*
  commentId: Overload:AdvancedSceneManager.Core.SceneOperation.FindLastAction
  name: FindLastAction
  nameWithType: SceneOperation.FindLastAction
  fullName: AdvancedSceneManager.Core.SceneOperation.FindLastAction
- uid: AdvancedSceneManager.Core.SceneOperation.openedScenes*
  commentId: Overload:AdvancedSceneManager.Core.SceneOperation.openedScenes
  name: openedScenes
  nameWithType: SceneOperation.openedScenes
  fullName: AdvancedSceneManager.Core.SceneOperation.openedScenes
