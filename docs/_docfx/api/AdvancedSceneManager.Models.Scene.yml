### YamlMime:ManagedReference
items:
- uid: AdvancedSceneManager.Models.Scene
  commentId: T:AdvancedSceneManager.Models.Scene
  id: Scene
  parent: AdvancedSceneManager.Models
  children:
  - AdvancedSceneManager.Models.Scene.assetID
  - AdvancedSceneManager.Models.Scene.Close
  - AdvancedSceneManager.Models.Scene.CloseEvent
  - AdvancedSceneManager.Models.Scene.Equals(AdvancedSceneManager.Core.OpenSceneInfo)
  - AdvancedSceneManager.Models.Scene.Equals(AdvancedSceneManager.Models.Scene)
  - AdvancedSceneManager.Models.Scene.Equals(System.Nullable{UnityEngine.SceneManagement.Scene})
  - AdvancedSceneManager.Models.Scene.Equals(System.Object)
  - AdvancedSceneManager.Models.Scene.Equals(UnityEditor.SceneAsset)
  - AdvancedSceneManager.Models.Scene.Equals(UnityEngine.SceneManagement.Scene)
  - AdvancedSceneManager.Models.Scene.Find(System.String,AdvancedSceneManager.Models.SceneCollection,AdvancedSceneManager.Models.Profile)
  - AdvancedSceneManager.Models.Scene.FindAll(System.String,AdvancedSceneManager.Models.SceneCollection,AdvancedSceneManager.Models.Profile)
  - AdvancedSceneManager.Models.Scene.FindCollections(AdvancedSceneManager.Models.Profile)
  - AdvancedSceneManager.Models.Scene.FindCollections(System.Boolean)
  - AdvancedSceneManager.Models.Scene.FindObject``1
  - AdvancedSceneManager.Models.Scene.FindObjects``1
  - AdvancedSceneManager.Models.Scene.GetHashCode
  - AdvancedSceneManager.Models.Scene.GetOpenSceneInfo
  - AdvancedSceneManager.Models.Scene.GetRootGameObjects
  - AdvancedSceneManager.Models.Scene.isActive
  - AdvancedSceneManager.Models.Scene.isIncluded
  - AdvancedSceneManager.Models.Scene.IsOpen
  - AdvancedSceneManager.Models.Scene.name
  - AdvancedSceneManager.Models.Scene.OnOpen(System.Int32,System.Int32)
  - AdvancedSceneManager.Models.Scene.OnPropertyChanged
  - AdvancedSceneManager.Models.Scene.Open
  - AdvancedSceneManager.Models.Scene.OpenEvent
  - AdvancedSceneManager.Models.Scene.OpenSingle
  - AdvancedSceneManager.Models.Scene.OpenSingleEvent
  - AdvancedSceneManager.Models.Scene.OpenWithLoadingScreenEvent(AdvancedSceneManager.Models.Scene)
  - AdvancedSceneManager.Models.Scene.path
  - AdvancedSceneManager.Models.Scene.Preload
  - AdvancedSceneManager.Models.Scene.PropertyChanged
  - AdvancedSceneManager.Models.Scene.Reopen
  - AdvancedSceneManager.Models.Scene.ReopenEvent
  - AdvancedSceneManager.Models.Scene.SetActiveScene
  - AdvancedSceneManager.Models.Scene.Toggle
  - AdvancedSceneManager.Models.Scene.Toggle(System.Boolean)
  - AdvancedSceneManager.Models.Scene.ToggleEvent
  - AdvancedSceneManager.Models.Scene.ToggleEvent(System.Boolean)
  langs:
  - csharp
  - vb
  name: Scene
  nameWithType: Scene
  fullName: AdvancedSceneManager.Models.Scene
  type: Class
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/Scene.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: Scene
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/Scene.cs
    startLine: 28
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Models
  summary: "\n<p>A <xref href=\"AdvancedSceneManager.Models.Scene\" data-throw-if-not-resolved=\"false\"></xref> is a <xref href=\"UnityEngine.ScriptableObject\" data-throw-if-not-resolved=\"false\"></xref> that represents a scene in Unity, and are automatically generated or updated when a scene is added, renamed, moved or removed.</p>\n<p>The advantage of doing it this way is that we can actually create variables in script that refers to a scene rather than an arbitrary int or magic string. This also allows us to open scenes directly from an <xref href=\"UnityEngine.Events.UnityEvent\" data-throw-if-not-resolved=\"false\"></xref> and not have to use a proxy script.</p>\n"
  example: []
  syntax:
    content: 'public class Scene : ScriptableObject, ISceneObject, IEquatable<Scene>, IEquatable<OpenSceneInfo>, IEquatable<Scene>, IEquatable<Scene?>, IEquatable<SceneAsset>, INotifyPropertyChanged'
    content.vb: >-
      Public Class Scene
          Inherits ScriptableObject
          Implements ISceneObject, IEquatable(Of Scene), IEquatable(Of OpenSceneInfo), IEquatable(Of Scene), IEquatable(Of Scene?), IEquatable(Of SceneAsset), INotifyPropertyChanged
  inheritance:
  - System.Object
  - UnityEngine.Object
  - UnityEngine.ScriptableObject
  implements:
  - AdvancedSceneManager.Models.ISceneObject
  extensionMethods:
  - UnityEngine.ScriptableObject.AdvancedSceneManager.Utility.ScriptableObjectUtility.Save
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: AdvancedSceneManager.Models.Scene.PropertyChanged
  commentId: E:AdvancedSceneManager.Models.Scene.PropertyChanged
  id: PropertyChanged
  parent: AdvancedSceneManager.Models.Scene
  langs:
  - csharp
  - vb
  name: PropertyChanged
  nameWithType: Scene.PropertyChanged
  fullName: AdvancedSceneManager.Models.Scene.PropertyChanged
  type: Event
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/Scene.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: PropertyChanged
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/Scene.cs
    startLine: 39
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Models
  syntax:
    content: public event PropertyChangedEventHandler PropertyChanged
    return:
      type: System.ComponentModel.PropertyChangedEventHandler
    content.vb: Public Event PropertyChanged As PropertyChangedEventHandler
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AdvancedSceneManager.Models.Scene.OnPropertyChanged
  commentId: M:AdvancedSceneManager.Models.Scene.OnPropertyChanged
  id: OnPropertyChanged
  parent: AdvancedSceneManager.Models.Scene
  langs:
  - csharp
  - vb
  name: OnPropertyChanged()
  nameWithType: Scene.OnPropertyChanged()
  fullName: AdvancedSceneManager.Models.Scene.OnPropertyChanged()
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/Scene.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: OnPropertyChanged
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/Scene.cs
    startLine: 44
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Models
  syntax:
    content: public void OnPropertyChanged()
    content.vb: Public Sub OnPropertyChanged
  overload: AdvancedSceneManager.Models.Scene.OnPropertyChanged*
  implements:
  - AdvancedSceneManager.Models.ISceneObject.OnPropertyChanged
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AdvancedSceneManager.Models.Scene.name
  commentId: P:AdvancedSceneManager.Models.Scene.name
  id: name
  parent: AdvancedSceneManager.Models.Scene
  langs:
  - csharp
  - vb
  name: name
  nameWithType: Scene.name
  fullName: AdvancedSceneManager.Models.Scene.name
  type: Property
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/Scene.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: name
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/Scene.cs
    startLine: 66
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Models
  remarks: 'See also: <xref href="AdvancedSceneManager.SceneManager.assetManagement" data-throw-if-not-resolved="false"></xref>.Rename().'
  example: []
  syntax:
    content: public string name { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property name As String
  overload: AdvancedSceneManager.Models.Scene.name*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: AdvancedSceneManager.Models.Scene.path
  commentId: P:AdvancedSceneManager.Models.Scene.path
  id: path
  parent: AdvancedSceneManager.Models.Scene
  langs:
  - csharp
  - vb
  name: path
  nameWithType: Scene.path
  fullName: AdvancedSceneManager.Models.Scene.path
  type: Property
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/Scene.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: path
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/Scene.cs
    startLine: 73
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Models
  summary: "\n<p>The path to the scene file, relative to the project folder.</p>\n<p>Automatically updated.</p>\n"
  example: []
  syntax:
    content: public string path { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property path As String
  overload: AdvancedSceneManager.Models.Scene.path*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: AdvancedSceneManager.Models.Scene.assetID
  commentId: P:AdvancedSceneManager.Models.Scene.assetID
  id: assetID
  parent: AdvancedSceneManager.Models.Scene
  langs:
  - csharp
  - vb
  name: assetID
  nameWithType: Scene.assetID
  fullName: AdvancedSceneManager.Models.Scene.assetID
  type: Property
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/Scene.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: assetID
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/Scene.cs
    startLine: 83
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Models
  summary: "\n<p>The id of the asset in the asset database.</p>\n<p>Automatically updated.</p>\n"
  example: []
  syntax:
    content: public string assetID { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property assetID As String
  overload: AdvancedSceneManager.Models.Scene.assetID*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: AdvancedSceneManager.Models.Scene.isIncluded
  commentId: P:AdvancedSceneManager.Models.Scene.isIncluded
  id: isIncluded
  parent: AdvancedSceneManager.Models.Scene
  langs:
  - csharp
  - vb
  name: isIncluded
  nameWithType: Scene.isIncluded
  fullName: AdvancedSceneManager.Models.Scene.isIncluded
  type: Property
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/Scene.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: isIncluded
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/Scene.cs
    startLine: 91
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Models
  summary: Gets whatever this scene is included in build, this would be if the scene is contained in a collection, or if it is used as a splash screen / loading screen.
  example: []
  syntax:
    content: public bool isIncluded { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property isIncluded As Boolean
  overload: AdvancedSceneManager.Models.Scene.isIncluded*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: AdvancedSceneManager.Models.Scene.isActive
  commentId: P:AdvancedSceneManager.Models.Scene.isActive
  id: isActive
  parent: AdvancedSceneManager.Models.Scene
  langs:
  - csharp
  - vb
  name: isActive
  nameWithType: Scene.isActive
  fullName: AdvancedSceneManager.Models.Scene.isActive
  type: Property
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/Scene.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: isActive
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/Scene.cs
    startLine: 97
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Models
  summary: Gets if this scene is currently active.
  example: []
  syntax:
    content: public bool isActive { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property isActive As Boolean
  overload: AdvancedSceneManager.Models.Scene.isActive*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: AdvancedSceneManager.Models.Scene.SetActiveScene
  commentId: M:AdvancedSceneManager.Models.Scene.SetActiveScene
  id: SetActiveScene
  parent: AdvancedSceneManager.Models.Scene
  langs:
  - csharp
  - vb
  name: SetActiveScene()
  nameWithType: Scene.SetActiveScene()
  fullName: AdvancedSceneManager.Models.Scene.SetActiveScene()
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/Scene.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: SetActiveScene
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/Scene.cs
    startLine: 104
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Models
  summary: Sets a scene as the activate scene.
  example: []
  syntax:
    content: public void SetActiveScene()
    content.vb: Public Sub SetActiveScene
  overload: AdvancedSceneManager.Models.Scene.SetActiveScene*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AdvancedSceneManager.Models.Scene.IsOpen
  commentId: M:AdvancedSceneManager.Models.Scene.IsOpen
  id: IsOpen
  parent: AdvancedSceneManager.Models.Scene
  langs:
  - csharp
  - vb
  name: IsOpen()
  nameWithType: Scene.IsOpen()
  fullName: AdvancedSceneManager.Models.Scene.IsOpen()
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/Scene.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: IsOpen
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/Scene.cs
    startLine: 107
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Models
  summary: Gets whatever the scene is open, either as part of a collection, or as stand-alone.
  example: []
  syntax:
    content: public IsOpenReturnValue IsOpen()
    return:
      type: AdvancedSceneManager.Models.IsOpenReturnValue
    content.vb: Public Function IsOpen As IsOpenReturnValue
  overload: AdvancedSceneManager.Models.Scene.IsOpen*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AdvancedSceneManager.Models.Scene.Open
  commentId: M:AdvancedSceneManager.Models.Scene.Open
  id: Open
  parent: AdvancedSceneManager.Models.Scene
  langs:
  - csharp
  - vb
  name: Open()
  nameWithType: Scene.Open()
  fullName: AdvancedSceneManager.Models.Scene.Open()
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/Scene.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: Open
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/Scene.cs
    startLine: 110
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Models
  example: []
  syntax:
    content: public SceneOperation<OpenSceneInfo> Open()
    return:
      type: AdvancedSceneManager.Core.SceneOperation{AdvancedSceneManager.Core.OpenSceneInfo}
    content.vb: Public Function Open As SceneOperation(Of OpenSceneInfo)
  overload: AdvancedSceneManager.Models.Scene.Open*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AdvancedSceneManager.Models.Scene.OpenSingle
  commentId: M:AdvancedSceneManager.Models.Scene.OpenSingle
  id: OpenSingle
  parent: AdvancedSceneManager.Models.Scene
  langs:
  - csharp
  - vb
  name: OpenSingle()
  nameWithType: Scene.OpenSingle()
  fullName: AdvancedSceneManager.Models.Scene.OpenSingle()
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/Scene.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: OpenSingle
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/Scene.cs
    startLine: 113
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Models
  summary: Close existing scenes and open the specified one.
  remarks: This will close the current collection.
  example: []
  syntax:
    content: public SceneOperation<OpenSceneInfo> OpenSingle()
    return:
      type: AdvancedSceneManager.Core.SceneOperation{AdvancedSceneManager.Core.OpenSceneInfo}
    content.vb: Public Function OpenSingle As SceneOperation(Of OpenSceneInfo)
  overload: AdvancedSceneManager.Models.Scene.OpenSingle*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AdvancedSceneManager.Models.Scene.Reopen
  commentId: M:AdvancedSceneManager.Models.Scene.Reopen
  id: Reopen
  parent: AdvancedSceneManager.Models.Scene
  langs:
  - csharp
  - vb
  name: Reopen()
  nameWithType: Scene.Reopen()
  fullName: AdvancedSceneManager.Models.Scene.Reopen()
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/Scene.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: Reopen
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/Scene.cs
    startLine: 116
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Models
  summary: Reopen a scene regardless of whatever it is associated with a collection, or is was opened as stand-alone.
  example: []
  syntax:
    content: public SceneOperation<OpenSceneInfo> Reopen()
    return:
      type: AdvancedSceneManager.Core.SceneOperation{AdvancedSceneManager.Core.OpenSceneInfo}
    content.vb: Public Function Reopen As SceneOperation(Of OpenSceneInfo)
  overload: AdvancedSceneManager.Models.Scene.Reopen*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AdvancedSceneManager.Models.Scene.Toggle
  commentId: M:AdvancedSceneManager.Models.Scene.Toggle
  id: Toggle
  parent: AdvancedSceneManager.Models.Scene
  langs:
  - csharp
  - vb
  name: Toggle()
  nameWithType: Scene.Toggle()
  fullName: AdvancedSceneManager.Models.Scene.Toggle()
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/Scene.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: Toggle
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/Scene.cs
    startLine: 119
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Models
  summary: Toggles the scene open or closed, if the scene is part of the current collection, then the scene will be toggled within the collection, otherwise, it will be toggled as a stand-alone scene.
  example: []
  syntax:
    content: public SceneOperation Toggle()
    return:
      type: AdvancedSceneManager.Core.SceneOperation
    content.vb: Public Function Toggle As SceneOperation
  overload: AdvancedSceneManager.Models.Scene.Toggle*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AdvancedSceneManager.Models.Scene.Toggle(System.Boolean)
  commentId: M:AdvancedSceneManager.Models.Scene.Toggle(System.Boolean)
  id: Toggle(System.Boolean)
  parent: AdvancedSceneManager.Models.Scene
  langs:
  - csharp
  - vb
  name: Toggle(Boolean)
  nameWithType: Scene.Toggle(Boolean)
  fullName: AdvancedSceneManager.Models.Scene.Toggle(System.Boolean)
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/Scene.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: Toggle
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/Scene.cs
    startLine: 122
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Models
  summary: Toggles the scene open or closed, if the scene is part of the current collection, then the scene will be toggled within the collection, otherwise, it will be toggled as a stand-alone scene.
  example: []
  syntax:
    content: public SceneOperation Toggle(bool enabled)
    parameters:
    - id: enabled
      type: System.Boolean
    return:
      type: AdvancedSceneManager.Core.SceneOperation
    content.vb: Public Function Toggle(enabled As Boolean) As SceneOperation
  overload: AdvancedSceneManager.Models.Scene.Toggle*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AdvancedSceneManager.Models.Scene.Close
  commentId: M:AdvancedSceneManager.Models.Scene.Close
  id: Close
  parent: AdvancedSceneManager.Models.Scene
  langs:
  - csharp
  - vb
  name: Close()
  nameWithType: Scene.Close()
  fullName: AdvancedSceneManager.Models.Scene.Close()
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/Scene.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: Close
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/Scene.cs
    startLine: 125
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Models
  summary: Closes a scene regardless of whatever it is associated with a collection, or is was opened as stand-alone.
  example: []
  syntax:
    content: public SceneOperation Close()
    return:
      type: AdvancedSceneManager.Core.SceneOperation
    content.vb: Public Function Close As SceneOperation
  overload: AdvancedSceneManager.Models.Scene.Close*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AdvancedSceneManager.Models.Scene.Preload
  commentId: M:AdvancedSceneManager.Models.Scene.Preload
  id: Preload
  parent: AdvancedSceneManager.Models.Scene
  langs:
  - csharp
  - vb
  name: Preload()
  nameWithType: Scene.Preload()
  fullName: AdvancedSceneManager.Models.Scene.Preload()
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/Scene.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: Preload
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/Scene.cs
    startLine: 128
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Models
  summary: Preloads the scene.
  remarks: Use <xref href="AdvancedSceneManager.Utility.PreloadedSceneHelper.FinishLoading" data-throw-if-not-resolved="false"></xref> or <xref href="AdvancedSceneManager.Core.SceneManagerBase.Open(AdvancedSceneManager.Models.Scene)" data-throw-if-not-resolved="false"></xref> to finish loading scene.
  example: []
  syntax:
    content: public SceneOperation<PreloadedSceneHelper> Preload()
    return:
      type: AdvancedSceneManager.Core.SceneOperation{AdvancedSceneManager.Utility.PreloadedSceneHelper}
    content.vb: Public Function Preload As SceneOperation(Of PreloadedSceneHelper)
  overload: AdvancedSceneManager.Models.Scene.Preload*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AdvancedSceneManager.Models.Scene.OpenEvent
  commentId: M:AdvancedSceneManager.Models.Scene.OpenEvent
  id: OpenEvent
  parent: AdvancedSceneManager.Models.Scene
  langs:
  - csharp
  - vb
  name: OpenEvent()
  nameWithType: Scene.OpenEvent()
  fullName: AdvancedSceneManager.Models.Scene.OpenEvent()
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/Scene.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: OpenEvent
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/Scene.cs
    startLine: 133
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Models
  example: []
  syntax:
    content: public void OpenEvent()
    content.vb: Public Sub OpenEvent
  overload: AdvancedSceneManager.Models.Scene.OpenEvent*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AdvancedSceneManager.Models.Scene.OpenSingleEvent
  commentId: M:AdvancedSceneManager.Models.Scene.OpenSingleEvent
  id: OpenSingleEvent
  parent: AdvancedSceneManager.Models.Scene
  langs:
  - csharp
  - vb
  name: OpenSingleEvent()
  nameWithType: Scene.OpenSingleEvent()
  fullName: AdvancedSceneManager.Models.Scene.OpenSingleEvent()
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/Scene.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: OpenSingleEvent
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/Scene.cs
    startLine: 136
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Models
  summary: Close existing scenes and open the specified one.
  remarks: This will close the current collection.
  example: []
  syntax:
    content: public void OpenSingleEvent()
    content.vb: Public Sub OpenSingleEvent
  overload: AdvancedSceneManager.Models.Scene.OpenSingleEvent*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AdvancedSceneManager.Models.Scene.ReopenEvent
  commentId: M:AdvancedSceneManager.Models.Scene.ReopenEvent
  id: ReopenEvent
  parent: AdvancedSceneManager.Models.Scene
  langs:
  - csharp
  - vb
  name: ReopenEvent()
  nameWithType: Scene.ReopenEvent()
  fullName: AdvancedSceneManager.Models.Scene.ReopenEvent()
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/Scene.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: ReopenEvent
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/Scene.cs
    startLine: 139
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Models
  example: []
  syntax:
    content: public void ReopenEvent()
    content.vb: Public Sub ReopenEvent
  overload: AdvancedSceneManager.Models.Scene.ReopenEvent*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AdvancedSceneManager.Models.Scene.ToggleEvent
  commentId: M:AdvancedSceneManager.Models.Scene.ToggleEvent
  id: ToggleEvent
  parent: AdvancedSceneManager.Models.Scene
  langs:
  - csharp
  - vb
  name: ToggleEvent()
  nameWithType: Scene.ToggleEvent()
  fullName: AdvancedSceneManager.Models.Scene.ToggleEvent()
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/Scene.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: ToggleEvent
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/Scene.cs
    startLine: 142
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Models
  example: []
  syntax:
    content: public void ToggleEvent()
    content.vb: Public Sub ToggleEvent
  overload: AdvancedSceneManager.Models.Scene.ToggleEvent*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AdvancedSceneManager.Models.Scene.ToggleEvent(System.Boolean)
  commentId: M:AdvancedSceneManager.Models.Scene.ToggleEvent(System.Boolean)
  id: ToggleEvent(System.Boolean)
  parent: AdvancedSceneManager.Models.Scene
  langs:
  - csharp
  - vb
  name: ToggleEvent(Boolean)
  nameWithType: Scene.ToggleEvent(Boolean)
  fullName: AdvancedSceneManager.Models.Scene.ToggleEvent(System.Boolean)
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/Scene.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: ToggleEvent
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/Scene.cs
    startLine: 145
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Models
  example: []
  syntax:
    content: public void ToggleEvent(bool enabled)
    parameters:
    - id: enabled
      type: System.Boolean
    content.vb: Public Sub ToggleEvent(enabled As Boolean)
  overload: AdvancedSceneManager.Models.Scene.ToggleEvent*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AdvancedSceneManager.Models.Scene.CloseEvent
  commentId: M:AdvancedSceneManager.Models.Scene.CloseEvent
  id: CloseEvent
  parent: AdvancedSceneManager.Models.Scene
  langs:
  - csharp
  - vb
  name: CloseEvent()
  nameWithType: Scene.CloseEvent()
  fullName: AdvancedSceneManager.Models.Scene.CloseEvent()
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/Scene.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: CloseEvent
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/Scene.cs
    startLine: 148
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Models
  example: []
  syntax:
    content: public void CloseEvent()
    content.vb: Public Sub CloseEvent
  overload: AdvancedSceneManager.Models.Scene.CloseEvent*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AdvancedSceneManager.Models.Scene.OpenWithLoadingScreenEvent(AdvancedSceneManager.Models.Scene)
  commentId: M:AdvancedSceneManager.Models.Scene.OpenWithLoadingScreenEvent(AdvancedSceneManager.Models.Scene)
  id: OpenWithLoadingScreenEvent(AdvancedSceneManager.Models.Scene)
  parent: AdvancedSceneManager.Models.Scene
  langs:
  - csharp
  - vb
  name: OpenWithLoadingScreenEvent(Scene)
  nameWithType: Scene.OpenWithLoadingScreenEvent(Scene)
  fullName: AdvancedSceneManager.Models.Scene.OpenWithLoadingScreenEvent(AdvancedSceneManager.Models.Scene)
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/Scene.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: OpenWithLoadingScreenEvent
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/Scene.cs
    startLine: 149
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Models
  syntax:
    content: public void OpenWithLoadingScreenEvent(Scene loadingScene)
    parameters:
    - id: loadingScene
      type: AdvancedSceneManager.Models.Scene
    content.vb: Public Sub OpenWithLoadingScreenEvent(loadingScene As Scene)
  overload: AdvancedSceneManager.Models.Scene.OpenWithLoadingScreenEvent*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AdvancedSceneManager.Models.Scene.GetOpenSceneInfo
  commentId: M:AdvancedSceneManager.Models.Scene.GetOpenSceneInfo
  id: GetOpenSceneInfo
  parent: AdvancedSceneManager.Models.Scene
  langs:
  - csharp
  - vb
  name: GetOpenSceneInfo()
  nameWithType: Scene.GetOpenSceneInfo()
  fullName: AdvancedSceneManager.Models.Scene.GetOpenSceneInfo()
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/Scene.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: GetOpenSceneInfo
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/Scene.cs
    startLine: 155
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Models
  summary: Finds the first open instance of this <xref href="AdvancedSceneManager.Models.Scene" data-throw-if-not-resolved="false"></xref>, if it is open.
  example: []
  syntax:
    content: public OpenSceneInfo GetOpenSceneInfo()
    return:
      type: AdvancedSceneManager.Core.OpenSceneInfo
    content.vb: Public Function GetOpenSceneInfo As OpenSceneInfo
  overload: AdvancedSceneManager.Models.Scene.GetOpenSceneInfo*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AdvancedSceneManager.Models.Scene.FindCollections(System.Boolean)
  commentId: M:AdvancedSceneManager.Models.Scene.FindCollections(System.Boolean)
  id: FindCollections(System.Boolean)
  parent: AdvancedSceneManager.Models.Scene
  langs:
  - csharp
  - vb
  name: FindCollections(Boolean)
  nameWithType: Scene.FindCollections(Boolean)
  fullName: AdvancedSceneManager.Models.Scene.FindCollections(System.Boolean)
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/Scene.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: FindCollections
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/Scene.cs
    startLine: 158
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Models
  summary: Finds which collections that this scene is a part of.
  example: []
  syntax:
    content: public (SceneCollection collection, bool asLoadingScreen)[] FindCollections(bool allProfiles = false)
    parameters:
    - id: allProfiles
      type: System.Boolean
    return:
      type: System.ValueTuple{AdvancedSceneManager.Models.SceneCollection,System.Boolean}[]
    content.vb: Public Function FindCollections(allProfiles As Boolean = False) As(collection As SceneCollection, asLoadingScreen As Boolean)(Of SceneCollection , Boolean)()
  overload: AdvancedSceneManager.Models.Scene.FindCollections*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AdvancedSceneManager.Models.Scene.FindCollections(AdvancedSceneManager.Models.Profile)
  commentId: M:AdvancedSceneManager.Models.Scene.FindCollections(AdvancedSceneManager.Models.Profile)
  id: FindCollections(AdvancedSceneManager.Models.Profile)
  parent: AdvancedSceneManager.Models.Scene
  langs:
  - csharp
  - vb
  name: FindCollections(Profile)
  nameWithType: Scene.FindCollections(Profile)
  fullName: AdvancedSceneManager.Models.Scene.FindCollections(AdvancedSceneManager.Models.Profile)
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/Scene.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: FindCollections
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/Scene.cs
    startLine: 164
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Models
  summary: Finds which collections that this scene is a part of.
  example: []
  syntax:
    content: public (SceneCollection collection, bool asLoadingScreen)[] FindCollections(Profile profile)
    parameters:
    - id: profile
      type: AdvancedSceneManager.Models.Profile
    return:
      type: System.ValueTuple{AdvancedSceneManager.Models.SceneCollection,System.Boolean}[]
    content.vb: Public Function FindCollections(profile As Profile) As(collection As SceneCollection, asLoadingScreen As Boolean)(Of SceneCollection , Boolean)()
  overload: AdvancedSceneManager.Models.Scene.FindCollections*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AdvancedSceneManager.Models.Scene.GetRootGameObjects
  commentId: M:AdvancedSceneManager.Models.Scene.GetRootGameObjects
  id: GetRootGameObjects
  parent: AdvancedSceneManager.Models.Scene
  langs:
  - csharp
  - vb
  name: GetRootGameObjects()
  nameWithType: Scene.GetRootGameObjects()
  fullName: AdvancedSceneManager.Models.Scene.GetRootGameObjects()
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/Scene.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: GetRootGameObjects
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/Scene.cs
    startLine: 169
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Models
  summary: Gets the root game objects in this <xref href="AdvancedSceneManager.Models.Scene" data-throw-if-not-resolved="false"></xref>, only works if scene is loaded.
  example: []
  syntax:
    content: public IEnumerable<GameObject> GetRootGameObjects()
    return:
      type: System.Collections.Generic.IEnumerable{UnityEngine.GameObject}
    content.vb: Public Function GetRootGameObjects As IEnumerable(Of GameObject)
  overload: AdvancedSceneManager.Models.Scene.GetRootGameObjects*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AdvancedSceneManager.Models.Scene.FindObject``1
  commentId: M:AdvancedSceneManager.Models.Scene.FindObject``1
  id: FindObject``1
  parent: AdvancedSceneManager.Models.Scene
  langs:
  - csharp
  - vb
  name: FindObject<T>()
  nameWithType: Scene.FindObject<T>()
  fullName: AdvancedSceneManager.Models.Scene.FindObject<T>()
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/Scene.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: FindObject
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/Scene.cs
    startLine: 174
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Models
  summary: Finds the object in the heirarchy of this <xref href="AdvancedSceneManager.Models.Scene" data-throw-if-not-resolved="false"></xref>.
  remarks: Only works if scene is loaded.
  example: []
  syntax:
    content: >-
      public T FindObject<T>()
          where T : Component
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Public Function FindObject(Of T As Component) As T
  overload: AdvancedSceneManager.Models.Scene.FindObject*
  nameWithType.vb: Scene.FindObject(Of T)()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: AdvancedSceneManager.Models.Scene.FindObject(Of T)()
  name.vb: FindObject(Of T)()
- uid: AdvancedSceneManager.Models.Scene.FindObjects``1
  commentId: M:AdvancedSceneManager.Models.Scene.FindObjects``1
  id: FindObjects``1
  parent: AdvancedSceneManager.Models.Scene
  langs:
  - csharp
  - vb
  name: FindObjects<T>()
  nameWithType: Scene.FindObjects<T>()
  fullName: AdvancedSceneManager.Models.Scene.FindObjects<T>()
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/Scene.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: FindObjects
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/Scene.cs
    startLine: 179
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Models
  summary: Finds the objects in the heirarchy of this <xref href="AdvancedSceneManager.Models.Scene" data-throw-if-not-resolved="false"></xref>.
  remarks: Only works if scene is loaded.
  example: []
  syntax:
    content: >-
      public IEnumerable<T> FindObjects<T>()
          where T : Component
    typeParameters:
    - id: T
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
    content.vb: Public Function FindObjects(Of T As Component) As IEnumerable(Of T)
  overload: AdvancedSceneManager.Models.Scene.FindObjects*
  nameWithType.vb: Scene.FindObjects(Of T)()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: AdvancedSceneManager.Models.Scene.FindObjects(Of T)()
  name.vb: FindObjects(Of T)()
- uid: AdvancedSceneManager.Models.Scene.Find(System.String,AdvancedSceneManager.Models.SceneCollection,AdvancedSceneManager.Models.Profile)
  commentId: M:AdvancedSceneManager.Models.Scene.Find(System.String,AdvancedSceneManager.Models.SceneCollection,AdvancedSceneManager.Models.Profile)
  id: Find(System.String,AdvancedSceneManager.Models.SceneCollection,AdvancedSceneManager.Models.Profile)
  parent: AdvancedSceneManager.Models.Scene
  langs:
  - csharp
  - vb
  name: Find(String, SceneCollection, Profile)
  nameWithType: Scene.Find(String, SceneCollection, Profile)
  fullName: AdvancedSceneManager.Models.Scene.Find(System.String, AdvancedSceneManager.Models.SceneCollection, AdvancedSceneManager.Models.Profile)
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/Scene.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: Find
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/Scene.cs
    startLine: 183
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Models
  summary: Finds the scene with the specified name.
  example: []
  syntax:
    content: public static Scene Find(string name, SceneCollection inCollection = null, Profile inProfile = null)
    parameters:
    - id: name
      type: System.String
    - id: inCollection
      type: AdvancedSceneManager.Models.SceneCollection
    - id: inProfile
      type: AdvancedSceneManager.Models.Profile
    return:
      type: AdvancedSceneManager.Models.Scene
    content.vb: Public Shared Function Find(name As String, inCollection As SceneCollection = Nothing, inProfile As Profile = Nothing) As Scene
  overload: AdvancedSceneManager.Models.Scene.Find*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: AdvancedSceneManager.Models.Scene.FindAll(System.String,AdvancedSceneManager.Models.SceneCollection,AdvancedSceneManager.Models.Profile)
  commentId: M:AdvancedSceneManager.Models.Scene.FindAll(System.String,AdvancedSceneManager.Models.SceneCollection,AdvancedSceneManager.Models.Profile)
  id: FindAll(System.String,AdvancedSceneManager.Models.SceneCollection,AdvancedSceneManager.Models.Profile)
  parent: AdvancedSceneManager.Models.Scene
  langs:
  - csharp
  - vb
  name: FindAll(String, SceneCollection, Profile)
  nameWithType: Scene.FindAll(String, SceneCollection, Profile)
  fullName: AdvancedSceneManager.Models.Scene.FindAll(System.String, AdvancedSceneManager.Models.SceneCollection, AdvancedSceneManager.Models.Profile)
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/Scene.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: FindAll
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/Scene.cs
    startLine: 187
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Models
  summary: Finds the scenes with the specified name.
  example: []
  syntax:
    content: public static IEnumerable<Scene> FindAll(string name, SceneCollection inCollection = null, Profile inProfile = null)
    parameters:
    - id: name
      type: System.String
    - id: inCollection
      type: AdvancedSceneManager.Models.SceneCollection
    - id: inProfile
      type: AdvancedSceneManager.Models.Profile
    return:
      type: System.Collections.Generic.IEnumerable{AdvancedSceneManager.Models.Scene}
    content.vb: Public Shared Function FindAll(name As String, inCollection As SceneCollection = Nothing, inProfile As Profile = Nothing) As IEnumerable(Of Scene)
  overload: AdvancedSceneManager.Models.Scene.FindAll*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: AdvancedSceneManager.Models.Scene.Equals(System.Object)
  commentId: M:AdvancedSceneManager.Models.Scene.Equals(System.Object)
  id: Equals(System.Object)
  parent: AdvancedSceneManager.Models.Scene
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: Scene.Equals(Object)
  fullName: AdvancedSceneManager.Models.Scene.Equals(System.Object)
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/Scene.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: Equals
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/Scene.cs
    startLine: 204
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Models
  syntax:
    content: public override bool Equals(object other)
    parameters:
    - id: other
      type: System.Object
    return:
      type: System.Boolean
    content.vb: Public Overrides Function Equals(other As Object) As Boolean
  overridden: UnityEngine.Object.Equals(System.Object)
  overload: AdvancedSceneManager.Models.Scene.Equals*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: AdvancedSceneManager.Models.Scene.GetHashCode
  commentId: M:AdvancedSceneManager.Models.Scene.GetHashCode
  id: GetHashCode
  parent: AdvancedSceneManager.Models.Scene
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: Scene.GetHashCode()
  fullName: AdvancedSceneManager.Models.Scene.GetHashCode()
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/Scene.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: GetHashCode
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/Scene.cs
    startLine: 222
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Models
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: UnityEngine.Object.GetHashCode
  overload: AdvancedSceneManager.Models.Scene.GetHashCode*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: AdvancedSceneManager.Models.Scene.Equals(AdvancedSceneManager.Models.Scene)
  commentId: M:AdvancedSceneManager.Models.Scene.Equals(AdvancedSceneManager.Models.Scene)
  id: Equals(AdvancedSceneManager.Models.Scene)
  parent: AdvancedSceneManager.Models.Scene
  langs:
  - csharp
  - vb
  name: Equals(Scene)
  nameWithType: Scene.Equals(Scene)
  fullName: AdvancedSceneManager.Models.Scene.Equals(AdvancedSceneManager.Models.Scene)
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/Scene.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: Equals
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/Scene.cs
    startLine: 225
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Models
  syntax:
    content: public bool Equals(Scene scene)
    parameters:
    - id: scene
      type: AdvancedSceneManager.Models.Scene
    return:
      type: System.Boolean
    content.vb: Public Function Equals(scene As Scene) As Boolean
  overload: AdvancedSceneManager.Models.Scene.Equals*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AdvancedSceneManager.Models.Scene.Equals(AdvancedSceneManager.Core.OpenSceneInfo)
  commentId: M:AdvancedSceneManager.Models.Scene.Equals(AdvancedSceneManager.Core.OpenSceneInfo)
  id: Equals(AdvancedSceneManager.Core.OpenSceneInfo)
  parent: AdvancedSceneManager.Models.Scene
  langs:
  - csharp
  - vb
  name: Equals(OpenSceneInfo)
  nameWithType: Scene.Equals(OpenSceneInfo)
  fullName: AdvancedSceneManager.Models.Scene.Equals(AdvancedSceneManager.Core.OpenSceneInfo)
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/Scene.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: Equals
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/Scene.cs
    startLine: 226
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Models
  syntax:
    content: public bool Equals(OpenSceneInfo scene)
    parameters:
    - id: scene
      type: AdvancedSceneManager.Core.OpenSceneInfo
    return:
      type: System.Boolean
    content.vb: Public Function Equals(scene As OpenSceneInfo) As Boolean
  overload: AdvancedSceneManager.Models.Scene.Equals*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AdvancedSceneManager.Models.Scene.Equals(UnityEngine.SceneManagement.Scene)
  commentId: M:AdvancedSceneManager.Models.Scene.Equals(UnityEngine.SceneManagement.Scene)
  id: Equals(UnityEngine.SceneManagement.Scene)
  parent: AdvancedSceneManager.Models.Scene
  langs:
  - csharp
  - vb
  name: Equals(Scene)
  nameWithType: Scene.Equals(Scene)
  fullName: AdvancedSceneManager.Models.Scene.Equals(UnityEngine.SceneManagement.Scene)
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/Scene.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: Equals
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/Scene.cs
    startLine: 227
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Models
  syntax:
    content: public bool Equals(Scene scene)
    parameters:
    - id: scene
      type: UnityEngine.SceneManagement.Scene
    return:
      type: System.Boolean
    content.vb: Public Function Equals(scene As Scene) As Boolean
  overload: AdvancedSceneManager.Models.Scene.Equals*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AdvancedSceneManager.Models.Scene.Equals(System.Nullable{UnityEngine.SceneManagement.Scene})
  commentId: M:AdvancedSceneManager.Models.Scene.Equals(System.Nullable{UnityEngine.SceneManagement.Scene})
  id: Equals(System.Nullable{UnityEngine.SceneManagement.Scene})
  parent: AdvancedSceneManager.Models.Scene
  langs:
  - csharp
  - vb
  name: Equals(Nullable<Scene>)
  nameWithType: Scene.Equals(Nullable<Scene>)
  fullName: AdvancedSceneManager.Models.Scene.Equals(System.Nullable<UnityEngine.SceneManagement.Scene>)
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/Scene.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: Equals
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/Scene.cs
    startLine: 228
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Models
  syntax:
    content: public bool Equals(Scene? scene)
    parameters:
    - id: scene
      type: System.Nullable{UnityEngine.SceneManagement.Scene}
    return:
      type: System.Boolean
    content.vb: Public Function Equals(scene As Scene?) As Boolean
  overload: AdvancedSceneManager.Models.Scene.Equals*
  nameWithType.vb: Scene.Equals(Nullable(Of Scene))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: AdvancedSceneManager.Models.Scene.Equals(System.Nullable(Of UnityEngine.SceneManagement.Scene))
  name.vb: Equals(Nullable(Of Scene))
- uid: AdvancedSceneManager.Models.Scene.Equals(UnityEditor.SceneAsset)
  commentId: M:AdvancedSceneManager.Models.Scene.Equals(UnityEditor.SceneAsset)
  id: Equals(UnityEditor.SceneAsset)
  parent: AdvancedSceneManager.Models.Scene
  langs:
  - csharp
  - vb
  name: Equals(SceneAsset)
  nameWithType: Scene.Equals(SceneAsset)
  fullName: AdvancedSceneManager.Models.Scene.Equals(UnityEditor.SceneAsset)
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/Scene.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: Equals
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/Scene.cs
    startLine: 232
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Models
  syntax:
    content: public bool Equals(SceneAsset scene)
    parameters:
    - id: scene
      type: UnityEditor.SceneAsset
    return:
      type: System.Boolean
    content.vb: Public Function Equals(scene As SceneAsset) As Boolean
  overload: AdvancedSceneManager.Models.Scene.Equals*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AdvancedSceneManager.Models.Scene.OnOpen(System.Int32,System.Int32)
  commentId: M:AdvancedSceneManager.Models.Scene.OnOpen(System.Int32,System.Int32)
  id: OnOpen(System.Int32,System.Int32)
  parent: AdvancedSceneManager.Models.Scene
  langs:
  - csharp
  - vb
  name: OnOpen(Int32, Int32)
  nameWithType: Scene.OnOpen(Int32, Int32)
  fullName: AdvancedSceneManager.Models.Scene.OnOpen(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/Scene.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: OnOpen
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Models/Scene.cs
    startLine: 262
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Models
  syntax:
    content: >-
      [OnOpenAsset]

      public static bool OnOpen(int instanceID, int _)
    parameters:
    - id: instanceID
      type: System.Int32
    - id: _
      type: System.Int32
    return:
      type: System.Boolean
    content.vb: >-
      <OnOpenAsset>

      Public Shared Function OnOpen(instanceID As Integer, _ As Integer) As Boolean
  overload: AdvancedSceneManager.Models.Scene.OnOpen*
  attributes:
  - type: UnityEditor.Callbacks.OnOpenAssetAttribute
    ctor: UnityEditor.Callbacks.OnOpenAssetAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: AdvancedSceneManager.Models.Scene
  commentId: T:AdvancedSceneManager.Models.Scene
  parent: AdvancedSceneManager.Models
  name: Scene
  nameWithType: Scene
  fullName: AdvancedSceneManager.Models.Scene
- uid: UnityEngine.ScriptableObject
  commentId: T:UnityEngine.ScriptableObject
  parent: UnityEngine
  isExternal: true
  name: ScriptableObject
  nameWithType: ScriptableObject
  fullName: UnityEngine.ScriptableObject
- uid: UnityEngine.Events.UnityEvent
  commentId: T:UnityEngine.Events.UnityEvent
  isExternal: true
- uid: AdvancedSceneManager.Models
  commentId: N:AdvancedSceneManager.Models
  name: AdvancedSceneManager.Models
  nameWithType: AdvancedSceneManager.Models
  fullName: AdvancedSceneManager.Models
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: UnityEngine.Object
  commentId: T:UnityEngine.Object
  parent: UnityEngine
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: UnityEngine.Object
- uid: AdvancedSceneManager.Models.ISceneObject
  commentId: T:AdvancedSceneManager.Models.ISceneObject
  parent: AdvancedSceneManager.Models
  name: ISceneObject
  nameWithType: ISceneObject
  fullName: AdvancedSceneManager.Models.ISceneObject
- uid: UnityEngine.ScriptableObject.AdvancedSceneManager.Utility.ScriptableObjectUtility.Save
  commentId: M:AdvancedSceneManager.Utility.ScriptableObjectUtility.Save(UnityEngine.ScriptableObject)
  parent: AdvancedSceneManager.Utility.ScriptableObjectUtility
  definition: AdvancedSceneManager.Utility.ScriptableObjectUtility.Save(UnityEngine.ScriptableObject)
  name: Save()
  nameWithType: ScriptableObjectUtility.Save()
  fullName: AdvancedSceneManager.Utility.ScriptableObjectUtility.Save()
  spec.csharp:
  - uid: AdvancedSceneManager.Utility.ScriptableObjectUtility.Save
    name: Save
    nameWithType: ScriptableObjectUtility.Save
    fullName: AdvancedSceneManager.Utility.ScriptableObjectUtility.Save
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AdvancedSceneManager.Utility.ScriptableObjectUtility.Save
    name: Save
    nameWithType: ScriptableObjectUtility.Save
    fullName: AdvancedSceneManager.Utility.ScriptableObjectUtility.Save
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: UnityEngine
  commentId: N:UnityEngine
  isExternal: true
  name: UnityEngine
  nameWithType: UnityEngine
  fullName: UnityEngine
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: AdvancedSceneManager.Utility.ScriptableObjectUtility.Save(UnityEngine.ScriptableObject)
  commentId: M:AdvancedSceneManager.Utility.ScriptableObjectUtility.Save(UnityEngine.ScriptableObject)
  isExternal: true
  name: Save(ScriptableObject)
  nameWithType: ScriptableObjectUtility.Save(ScriptableObject)
  fullName: AdvancedSceneManager.Utility.ScriptableObjectUtility.Save(UnityEngine.ScriptableObject)
  spec.csharp:
  - uid: AdvancedSceneManager.Utility.ScriptableObjectUtility.Save(UnityEngine.ScriptableObject)
    name: Save
    nameWithType: ScriptableObjectUtility.Save
    fullName: AdvancedSceneManager.Utility.ScriptableObjectUtility.Save
  - name: (
    nameWithType: (
    fullName: (
  - uid: UnityEngine.ScriptableObject
    name: ScriptableObject
    nameWithType: ScriptableObject
    fullName: UnityEngine.ScriptableObject
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AdvancedSceneManager.Utility.ScriptableObjectUtility.Save(UnityEngine.ScriptableObject)
    name: Save
    nameWithType: ScriptableObjectUtility.Save
    fullName: AdvancedSceneManager.Utility.ScriptableObjectUtility.Save
  - name: (
    nameWithType: (
    fullName: (
  - uid: UnityEngine.ScriptableObject
    name: ScriptableObject
    nameWithType: ScriptableObject
    fullName: UnityEngine.ScriptableObject
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: AdvancedSceneManager.Utility.ScriptableObjectUtility
  commentId: T:AdvancedSceneManager.Utility.ScriptableObjectUtility
  parent: AdvancedSceneManager.Utility
  name: ScriptableObjectUtility
  nameWithType: ScriptableObjectUtility
  fullName: AdvancedSceneManager.Utility.ScriptableObjectUtility
- uid: AdvancedSceneManager.Utility
  commentId: N:AdvancedSceneManager.Utility
  name: AdvancedSceneManager.Utility
  nameWithType: AdvancedSceneManager.Utility
  fullName: AdvancedSceneManager.Utility
- uid: System.ComponentModel.PropertyChangedEventHandler
  commentId: T:System.ComponentModel.PropertyChangedEventHandler
  parent: System.ComponentModel
  isExternal: true
  name: PropertyChangedEventHandler
  nameWithType: PropertyChangedEventHandler
  fullName: System.ComponentModel.PropertyChangedEventHandler
- uid: System.ComponentModel
  commentId: N:System.ComponentModel
  isExternal: true
  name: System.ComponentModel
  nameWithType: System.ComponentModel
  fullName: System.ComponentModel
- uid: AdvancedSceneManager.Models.Scene.OnPropertyChanged*
  commentId: Overload:AdvancedSceneManager.Models.Scene.OnPropertyChanged
  name: OnPropertyChanged
  nameWithType: Scene.OnPropertyChanged
  fullName: AdvancedSceneManager.Models.Scene.OnPropertyChanged
- uid: AdvancedSceneManager.Models.ISceneObject.OnPropertyChanged
  commentId: M:AdvancedSceneManager.Models.ISceneObject.OnPropertyChanged
  parent: AdvancedSceneManager.Models.ISceneObject
  name: OnPropertyChanged()
  nameWithType: ISceneObject.OnPropertyChanged()
  fullName: AdvancedSceneManager.Models.ISceneObject.OnPropertyChanged()
  spec.csharp:
  - uid: AdvancedSceneManager.Models.ISceneObject.OnPropertyChanged
    name: OnPropertyChanged
    nameWithType: ISceneObject.OnPropertyChanged
    fullName: AdvancedSceneManager.Models.ISceneObject.OnPropertyChanged
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AdvancedSceneManager.Models.ISceneObject.OnPropertyChanged
    name: OnPropertyChanged
    nameWithType: ISceneObject.OnPropertyChanged
    fullName: AdvancedSceneManager.Models.ISceneObject.OnPropertyChanged
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: AdvancedSceneManager.SceneManager.assetManagement
  commentId: P:AdvancedSceneManager.SceneManager.assetManagement
  isExternal: true
- uid: AdvancedSceneManager.Models.Scene.name*
  commentId: Overload:AdvancedSceneManager.Models.Scene.name
  name: name
  nameWithType: Scene.name
  fullName: AdvancedSceneManager.Models.Scene.name
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: AdvancedSceneManager.Models.Scene.path*
  commentId: Overload:AdvancedSceneManager.Models.Scene.path
  name: path
  nameWithType: Scene.path
  fullName: AdvancedSceneManager.Models.Scene.path
- uid: AdvancedSceneManager.Models.Scene.assetID*
  commentId: Overload:AdvancedSceneManager.Models.Scene.assetID
  name: assetID
  nameWithType: Scene.assetID
  fullName: AdvancedSceneManager.Models.Scene.assetID
- uid: AdvancedSceneManager.Models.Scene.isIncluded*
  commentId: Overload:AdvancedSceneManager.Models.Scene.isIncluded
  name: isIncluded
  nameWithType: Scene.isIncluded
  fullName: AdvancedSceneManager.Models.Scene.isIncluded
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: AdvancedSceneManager.Models.Scene.isActive*
  commentId: Overload:AdvancedSceneManager.Models.Scene.isActive
  name: isActive
  nameWithType: Scene.isActive
  fullName: AdvancedSceneManager.Models.Scene.isActive
- uid: AdvancedSceneManager.Core.UtilitySceneManager.SetActive(UnityEngine.SceneManagement.Scene)
  commentId: M:AdvancedSceneManager.Core.UtilitySceneManager.SetActive(UnityEngine.SceneManagement.Scene)
  isExternal: true
- uid: AdvancedSceneManager.Models.Scene.SetActiveScene*
  commentId: Overload:AdvancedSceneManager.Models.Scene.SetActiveScene
  name: SetActiveScene
  nameWithType: Scene.SetActiveScene
  fullName: AdvancedSceneManager.Models.Scene.SetActiveScene
- uid: AdvancedSceneManager.Core.UtilitySceneManager.IsOpen(AdvancedSceneManager.Models.Scene)
  commentId: M:AdvancedSceneManager.Core.UtilitySceneManager.IsOpen(AdvancedSceneManager.Models.Scene)
  isExternal: true
- uid: AdvancedSceneManager.Models.Scene.IsOpen*
  commentId: Overload:AdvancedSceneManager.Models.Scene.IsOpen
  name: IsOpen
  nameWithType: Scene.IsOpen
  fullName: AdvancedSceneManager.Models.Scene.IsOpen
- uid: AdvancedSceneManager.Models.IsOpenReturnValue
  commentId: T:AdvancedSceneManager.Models.IsOpenReturnValue
  parent: AdvancedSceneManager.Models
  name: IsOpenReturnValue
  nameWithType: IsOpenReturnValue
  fullName: AdvancedSceneManager.Models.IsOpenReturnValue
- uid: AdvancedSceneManager.Core.SceneManagerBase.Open(AdvancedSceneManager.Models.Scene)
  commentId: M:AdvancedSceneManager.Core.SceneManagerBase.Open(AdvancedSceneManager.Models.Scene)
  parent: AdvancedSceneManager.Core.SceneManagerBase
  name: Open(Scene)
  nameWithType: SceneManagerBase.Open(Scene)
  fullName: AdvancedSceneManager.Core.SceneManagerBase.Open(AdvancedSceneManager.Models.Scene)
  spec.csharp:
  - uid: AdvancedSceneManager.Core.SceneManagerBase.Open(AdvancedSceneManager.Models.Scene)
    name: Open
    nameWithType: SceneManagerBase.Open
    fullName: AdvancedSceneManager.Core.SceneManagerBase.Open
  - name: (
    nameWithType: (
    fullName: (
  - uid: AdvancedSceneManager.Models.Scene
    name: Scene
    nameWithType: Scene
    fullName: AdvancedSceneManager.Models.Scene
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AdvancedSceneManager.Core.SceneManagerBase.Open(AdvancedSceneManager.Models.Scene)
    name: Open
    nameWithType: SceneManagerBase.Open
    fullName: AdvancedSceneManager.Core.SceneManagerBase.Open
  - name: (
    nameWithType: (
    fullName: (
  - uid: AdvancedSceneManager.Models.Scene
    name: Scene
    nameWithType: Scene
    fullName: AdvancedSceneManager.Models.Scene
  - name: )
    nameWithType: )
    fullName: )
- uid: AdvancedSceneManager.Models.Scene.Open*
  commentId: Overload:AdvancedSceneManager.Models.Scene.Open
  name: Open
  nameWithType: Scene.Open
  fullName: AdvancedSceneManager.Models.Scene.Open
- uid: AdvancedSceneManager.Core.SceneOperation{AdvancedSceneManager.Core.OpenSceneInfo}
  commentId: T:AdvancedSceneManager.Core.SceneOperation{AdvancedSceneManager.Core.OpenSceneInfo}
  parent: AdvancedSceneManager.Core
  definition: AdvancedSceneManager.Core.SceneOperation`1
  name: SceneOperation<OpenSceneInfo>
  nameWithType: SceneOperation<OpenSceneInfo>
  fullName: AdvancedSceneManager.Core.SceneOperation<AdvancedSceneManager.Core.OpenSceneInfo>
  nameWithType.vb: SceneOperation(Of OpenSceneInfo)
  fullName.vb: AdvancedSceneManager.Core.SceneOperation(Of AdvancedSceneManager.Core.OpenSceneInfo)
  name.vb: SceneOperation(Of OpenSceneInfo)
  spec.csharp:
  - uid: AdvancedSceneManager.Core.SceneOperation`1
    name: SceneOperation
    nameWithType: SceneOperation
    fullName: AdvancedSceneManager.Core.SceneOperation
  - name: <
    nameWithType: <
    fullName: <
  - uid: AdvancedSceneManager.Core.OpenSceneInfo
    name: OpenSceneInfo
    nameWithType: OpenSceneInfo
    fullName: AdvancedSceneManager.Core.OpenSceneInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: AdvancedSceneManager.Core.SceneOperation`1
    name: SceneOperation
    nameWithType: SceneOperation
    fullName: AdvancedSceneManager.Core.SceneOperation
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: AdvancedSceneManager.Core.OpenSceneInfo
    name: OpenSceneInfo
    nameWithType: OpenSceneInfo
    fullName: AdvancedSceneManager.Core.OpenSceneInfo
  - name: )
    nameWithType: )
    fullName: )
- uid: AdvancedSceneManager.Core.SceneManagerBase
  commentId: T:AdvancedSceneManager.Core.SceneManagerBase
  parent: AdvancedSceneManager.Core
  name: SceneManagerBase
  nameWithType: SceneManagerBase
  fullName: AdvancedSceneManager.Core.SceneManagerBase
- uid: AdvancedSceneManager.Core.SceneOperation`1
  commentId: T:AdvancedSceneManager.Core.SceneOperation`1
  parent: AdvancedSceneManager.Core
  name: SceneOperation<ReturnValue>
  nameWithType: SceneOperation<ReturnValue>
  fullName: AdvancedSceneManager.Core.SceneOperation<ReturnValue>
  nameWithType.vb: SceneOperation(Of ReturnValue)
  fullName.vb: AdvancedSceneManager.Core.SceneOperation(Of ReturnValue)
  name.vb: SceneOperation(Of ReturnValue)
  spec.csharp:
  - uid: AdvancedSceneManager.Core.SceneOperation`1
    name: SceneOperation
    nameWithType: SceneOperation
    fullName: AdvancedSceneManager.Core.SceneOperation
  - name: <
    nameWithType: <
    fullName: <
  - name: ReturnValue
    nameWithType: ReturnValue
    fullName: ReturnValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: AdvancedSceneManager.Core.SceneOperation`1
    name: SceneOperation
    nameWithType: SceneOperation
    fullName: AdvancedSceneManager.Core.SceneOperation
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ReturnValue
    nameWithType: ReturnValue
    fullName: ReturnValue
  - name: )
    nameWithType: )
    fullName: )
- uid: AdvancedSceneManager.Core
  commentId: N:AdvancedSceneManager.Core
  name: AdvancedSceneManager.Core
  nameWithType: AdvancedSceneManager.Core
  fullName: AdvancedSceneManager.Core
- uid: AdvancedSceneManager.Core.StandaloneManager.OpenSingle(AdvancedSceneManager.Models.Scene)
  commentId: M:AdvancedSceneManager.Core.StandaloneManager.OpenSingle(AdvancedSceneManager.Models.Scene)
  isExternal: true
- uid: AdvancedSceneManager.Models.Scene.OpenSingle*
  commentId: Overload:AdvancedSceneManager.Models.Scene.OpenSingle
  name: OpenSingle
  nameWithType: Scene.OpenSingle
  fullName: AdvancedSceneManager.Models.Scene.OpenSingle
- uid: AdvancedSceneManager.Core.UtilitySceneManager.Reopen(AdvancedSceneManager.Core.OpenSceneInfo)
  commentId: M:AdvancedSceneManager.Core.UtilitySceneManager.Reopen(AdvancedSceneManager.Core.OpenSceneInfo)
  isExternal: true
- uid: AdvancedSceneManager.Models.Scene.Reopen*
  commentId: Overload:AdvancedSceneManager.Models.Scene.Reopen
  name: Reopen
  nameWithType: Scene.Reopen
  fullName: AdvancedSceneManager.Models.Scene.Reopen
- uid: AdvancedSceneManager.Core.UtilitySceneManager.Toggle(AdvancedSceneManager.Models.Scene,System.Nullable{System.Boolean})
  commentId: M:AdvancedSceneManager.Core.UtilitySceneManager.Toggle(AdvancedSceneManager.Models.Scene,System.Nullable{System.Boolean})
  isExternal: true
- uid: AdvancedSceneManager.Models.Scene.Toggle*
  commentId: Overload:AdvancedSceneManager.Models.Scene.Toggle
  name: Toggle
  nameWithType: Scene.Toggle
  fullName: AdvancedSceneManager.Models.Scene.Toggle
- uid: AdvancedSceneManager.Core.SceneOperation
  commentId: T:AdvancedSceneManager.Core.SceneOperation
  parent: AdvancedSceneManager.Core
  name: SceneOperation
  nameWithType: SceneOperation
  fullName: AdvancedSceneManager.Core.SceneOperation
- uid: AdvancedSceneManager.Core.UtilitySceneManager.Close(AdvancedSceneManager.Core.OpenSceneInfo)
  commentId: M:AdvancedSceneManager.Core.UtilitySceneManager.Close(AdvancedSceneManager.Core.OpenSceneInfo)
  isExternal: true
- uid: AdvancedSceneManager.Models.Scene.Close*
  commentId: Overload:AdvancedSceneManager.Models.Scene.Close
  name: Close
  nameWithType: Scene.Close
  fullName: AdvancedSceneManager.Models.Scene.Close
- uid: AdvancedSceneManager.Core.StandaloneManager.Preload(AdvancedSceneManager.Models.Scene,System.Boolean)
  commentId: M:AdvancedSceneManager.Core.StandaloneManager.Preload(AdvancedSceneManager.Models.Scene,System.Boolean)
  isExternal: true
- uid: AdvancedSceneManager.Models.Scene.Preload*
  commentId: Overload:AdvancedSceneManager.Models.Scene.Preload
  name: Preload
  nameWithType: Scene.Preload
  fullName: AdvancedSceneManager.Models.Scene.Preload
- uid: AdvancedSceneManager.Core.SceneOperation{AdvancedSceneManager.Utility.PreloadedSceneHelper}
  commentId: T:AdvancedSceneManager.Core.SceneOperation{AdvancedSceneManager.Utility.PreloadedSceneHelper}
  parent: AdvancedSceneManager.Core
  definition: AdvancedSceneManager.Core.SceneOperation`1
  name: SceneOperation<PreloadedSceneHelper>
  nameWithType: SceneOperation<PreloadedSceneHelper>
  fullName: AdvancedSceneManager.Core.SceneOperation<AdvancedSceneManager.Utility.PreloadedSceneHelper>
  nameWithType.vb: SceneOperation(Of PreloadedSceneHelper)
  fullName.vb: AdvancedSceneManager.Core.SceneOperation(Of AdvancedSceneManager.Utility.PreloadedSceneHelper)
  name.vb: SceneOperation(Of PreloadedSceneHelper)
  spec.csharp:
  - uid: AdvancedSceneManager.Core.SceneOperation`1
    name: SceneOperation
    nameWithType: SceneOperation
    fullName: AdvancedSceneManager.Core.SceneOperation
  - name: <
    nameWithType: <
    fullName: <
  - uid: AdvancedSceneManager.Utility.PreloadedSceneHelper
    name: PreloadedSceneHelper
    nameWithType: PreloadedSceneHelper
    fullName: AdvancedSceneManager.Utility.PreloadedSceneHelper
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: AdvancedSceneManager.Core.SceneOperation`1
    name: SceneOperation
    nameWithType: SceneOperation
    fullName: AdvancedSceneManager.Core.SceneOperation
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: AdvancedSceneManager.Utility.PreloadedSceneHelper
    name: PreloadedSceneHelper
    nameWithType: PreloadedSceneHelper
    fullName: AdvancedSceneManager.Utility.PreloadedSceneHelper
  - name: )
    nameWithType: )
    fullName: )
- uid: AdvancedSceneManager.Models.Scene.OpenEvent*
  commentId: Overload:AdvancedSceneManager.Models.Scene.OpenEvent
  name: OpenEvent
  nameWithType: Scene.OpenEvent
  fullName: AdvancedSceneManager.Models.Scene.OpenEvent
- uid: AdvancedSceneManager.Models.Scene.OpenSingleEvent*
  commentId: Overload:AdvancedSceneManager.Models.Scene.OpenSingleEvent
  name: OpenSingleEvent
  nameWithType: Scene.OpenSingleEvent
  fullName: AdvancedSceneManager.Models.Scene.OpenSingleEvent
- uid: AdvancedSceneManager.Core.SceneManagerBase.Reopen(AdvancedSceneManager.Core.OpenSceneInfo)
  commentId: M:AdvancedSceneManager.Core.SceneManagerBase.Reopen(AdvancedSceneManager.Core.OpenSceneInfo)
  isExternal: true
- uid: AdvancedSceneManager.Models.Scene.ReopenEvent*
  commentId: Overload:AdvancedSceneManager.Models.Scene.ReopenEvent
  name: ReopenEvent
  nameWithType: Scene.ReopenEvent
  fullName: AdvancedSceneManager.Models.Scene.ReopenEvent
- uid: AdvancedSceneManager.Core.SceneManagerBase.Toggle(AdvancedSceneManager.Models.Scene,System.Nullable{System.Boolean})
  commentId: M:AdvancedSceneManager.Core.SceneManagerBase.Toggle(AdvancedSceneManager.Models.Scene,System.Nullable{System.Boolean})
  isExternal: true
- uid: AdvancedSceneManager.Models.Scene.ToggleEvent*
  commentId: Overload:AdvancedSceneManager.Models.Scene.ToggleEvent
  name: ToggleEvent
  nameWithType: Scene.ToggleEvent
  fullName: AdvancedSceneManager.Models.Scene.ToggleEvent
- uid: AdvancedSceneManager.Core.SceneManagerBase.Close(AdvancedSceneManager.Core.OpenSceneInfo)
  commentId: M:AdvancedSceneManager.Core.SceneManagerBase.Close(AdvancedSceneManager.Core.OpenSceneInfo)
  parent: AdvancedSceneManager.Core.SceneManagerBase
  name: Close(OpenSceneInfo)
  nameWithType: SceneManagerBase.Close(OpenSceneInfo)
  fullName: AdvancedSceneManager.Core.SceneManagerBase.Close(AdvancedSceneManager.Core.OpenSceneInfo)
  spec.csharp:
  - uid: AdvancedSceneManager.Core.SceneManagerBase.Close(AdvancedSceneManager.Core.OpenSceneInfo)
    name: Close
    nameWithType: SceneManagerBase.Close
    fullName: AdvancedSceneManager.Core.SceneManagerBase.Close
  - name: (
    nameWithType: (
    fullName: (
  - uid: AdvancedSceneManager.Core.OpenSceneInfo
    name: OpenSceneInfo
    nameWithType: OpenSceneInfo
    fullName: AdvancedSceneManager.Core.OpenSceneInfo
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AdvancedSceneManager.Core.SceneManagerBase.Close(AdvancedSceneManager.Core.OpenSceneInfo)
    name: Close
    nameWithType: SceneManagerBase.Close
    fullName: AdvancedSceneManager.Core.SceneManagerBase.Close
  - name: (
    nameWithType: (
    fullName: (
  - uid: AdvancedSceneManager.Core.OpenSceneInfo
    name: OpenSceneInfo
    nameWithType: OpenSceneInfo
    fullName: AdvancedSceneManager.Core.OpenSceneInfo
  - name: )
    nameWithType: )
    fullName: )
- uid: AdvancedSceneManager.Models.Scene.CloseEvent*
  commentId: Overload:AdvancedSceneManager.Models.Scene.CloseEvent
  name: CloseEvent
  nameWithType: Scene.CloseEvent
  fullName: AdvancedSceneManager.Models.Scene.CloseEvent
- uid: AdvancedSceneManager.Models.Scene.OpenWithLoadingScreenEvent*
  commentId: Overload:AdvancedSceneManager.Models.Scene.OpenWithLoadingScreenEvent
  name: OpenWithLoadingScreenEvent
  nameWithType: Scene.OpenWithLoadingScreenEvent
  fullName: AdvancedSceneManager.Models.Scene.OpenWithLoadingScreenEvent
- uid: AdvancedSceneManager.Core.UtilitySceneManager.FindOpenScene(AdvancedSceneManager.Models.Scene)
  commentId: M:AdvancedSceneManager.Core.UtilitySceneManager.FindOpenScene(AdvancedSceneManager.Models.Scene)
  isExternal: true
- uid: AdvancedSceneManager.Models.Scene.GetOpenSceneInfo*
  commentId: Overload:AdvancedSceneManager.Models.Scene.GetOpenSceneInfo
  name: GetOpenSceneInfo
  nameWithType: Scene.GetOpenSceneInfo
  fullName: AdvancedSceneManager.Models.Scene.GetOpenSceneInfo
- uid: AdvancedSceneManager.Core.OpenSceneInfo
  commentId: T:AdvancedSceneManager.Core.OpenSceneInfo
  parent: AdvancedSceneManager.Core
  name: OpenSceneInfo
  nameWithType: OpenSceneInfo
  fullName: AdvancedSceneManager.Core.OpenSceneInfo
- uid: AdvancedSceneManager.Models.Scene.FindCollections*
  commentId: Overload:AdvancedSceneManager.Models.Scene.FindCollections
  name: FindCollections
  nameWithType: Scene.FindCollections
  fullName: AdvancedSceneManager.Models.Scene.FindCollections
- uid: System.ValueTuple{AdvancedSceneManager.Models.SceneCollection,System.Boolean}[]
  isExternal: true
  name: (T1, T2)<SceneCollection, Boolean>[]
  nameWithType: (T1, T2)<SceneCollection, Boolean>[]
  fullName: System.ValueTuple<AdvancedSceneManager.Models.SceneCollection, System.Boolean>[]
  nameWithType.vb: (T1, T2)(Of SceneCollection, Boolean)()
  fullName.vb: System.ValueTuple(Of AdvancedSceneManager.Models.SceneCollection, System.Boolean)()
  name.vb: (T1, T2)(Of SceneCollection, Boolean)()
  spec.csharp:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: AdvancedSceneManager.Models.SceneCollection
    name: SceneCollection
    nameWithType: SceneCollection
    fullName: AdvancedSceneManager.Models.SceneCollection
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: AdvancedSceneManager.Models.SceneCollection
    name: SceneCollection
    nameWithType: SceneCollection
    fullName: AdvancedSceneManager.Models.SceneCollection
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: AdvancedSceneManager.Models.Profile
  commentId: T:AdvancedSceneManager.Models.Profile
  parent: AdvancedSceneManager.Models
  name: Profile
  nameWithType: Profile
  fullName: AdvancedSceneManager.Models.Profile
- uid: AdvancedSceneManager.Models.Scene.GetRootGameObjects*
  commentId: Overload:AdvancedSceneManager.Models.Scene.GetRootGameObjects
  name: GetRootGameObjects
  nameWithType: Scene.GetRootGameObjects
  fullName: AdvancedSceneManager.Models.Scene.GetRootGameObjects
- uid: System.Collections.Generic.IEnumerable{UnityEngine.GameObject}
  commentId: T:System.Collections.Generic.IEnumerable{UnityEngine.GameObject}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<GameObject>
  nameWithType: IEnumerable<GameObject>
  fullName: System.Collections.Generic.IEnumerable<UnityEngine.GameObject>
  nameWithType.vb: IEnumerable(Of GameObject)
  fullName.vb: System.Collections.Generic.IEnumerable(Of UnityEngine.GameObject)
  name.vb: IEnumerable(Of GameObject)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: UnityEngine.GameObject
    name: GameObject
    nameWithType: GameObject
    fullName: UnityEngine.GameObject
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: UnityEngine.GameObject
    name: GameObject
    nameWithType: GameObject
    fullName: UnityEngine.GameObject
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: AdvancedSceneManager.Models.Scene.FindObject*
  commentId: Overload:AdvancedSceneManager.Models.Scene.FindObject
  name: FindObject
  nameWithType: Scene.FindObject
  fullName: AdvancedSceneManager.Models.Scene.FindObject
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: AdvancedSceneManager.Models.Scene.FindObjects*
  commentId: Overload:AdvancedSceneManager.Models.Scene.FindObjects
  name: FindObjects
  nameWithType: Scene.FindObjects
  fullName: AdvancedSceneManager.Models.Scene.FindObjects
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: AdvancedSceneManager.Models.Scene.Find*
  commentId: Overload:AdvancedSceneManager.Models.Scene.Find
  name: Find
  nameWithType: Scene.Find
  fullName: AdvancedSceneManager.Models.Scene.Find
- uid: AdvancedSceneManager.Models.SceneCollection
  commentId: T:AdvancedSceneManager.Models.SceneCollection
  parent: AdvancedSceneManager.Models
  name: SceneCollection
  nameWithType: SceneCollection
  fullName: AdvancedSceneManager.Models.SceneCollection
- uid: AdvancedSceneManager.Models.Scene.FindAll*
  commentId: Overload:AdvancedSceneManager.Models.Scene.FindAll
  name: FindAll
  nameWithType: Scene.FindAll
  fullName: AdvancedSceneManager.Models.Scene.FindAll
- uid: System.Collections.Generic.IEnumerable{AdvancedSceneManager.Models.Scene}
  commentId: T:System.Collections.Generic.IEnumerable{AdvancedSceneManager.Models.Scene}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Scene>
  nameWithType: IEnumerable<Scene>
  fullName: System.Collections.Generic.IEnumerable<AdvancedSceneManager.Models.Scene>
  nameWithType.vb: IEnumerable(Of Scene)
  fullName.vb: System.Collections.Generic.IEnumerable(Of AdvancedSceneManager.Models.Scene)
  name.vb: IEnumerable(Of Scene)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: AdvancedSceneManager.Models.Scene
    name: Scene
    nameWithType: Scene
    fullName: AdvancedSceneManager.Models.Scene
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: AdvancedSceneManager.Models.Scene
    name: Scene
    nameWithType: Scene
    fullName: AdvancedSceneManager.Models.Scene
  - name: )
    nameWithType: )
    fullName: )
- uid: UnityEngine.Object.Equals(System.Object)
  commentId: M:UnityEngine.Object.Equals(System.Object)
  parent: UnityEngine.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: UnityEngine.Object.Equals(System.Object)
  spec.csharp:
  - uid: UnityEngine.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: UnityEngine.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: UnityEngine.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: UnityEngine.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: AdvancedSceneManager.Models.Scene.Equals*
  commentId: Overload:AdvancedSceneManager.Models.Scene.Equals
  name: Equals
  nameWithType: Scene.Equals
  fullName: AdvancedSceneManager.Models.Scene.Equals
- uid: UnityEngine.Object.GetHashCode
  commentId: M:UnityEngine.Object.GetHashCode
  parent: UnityEngine.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: UnityEngine.Object.GetHashCode()
  spec.csharp:
  - uid: UnityEngine.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: UnityEngine.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: UnityEngine.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: UnityEngine.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: AdvancedSceneManager.Models.Scene.GetHashCode*
  commentId: Overload:AdvancedSceneManager.Models.Scene.GetHashCode
  name: GetHashCode
  nameWithType: Scene.GetHashCode
  fullName: AdvancedSceneManager.Models.Scene.GetHashCode
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: UnityEngine.SceneManagement.Scene
  commentId: T:UnityEngine.SceneManagement.Scene
  parent: UnityEngine.SceneManagement
  isExternal: true
  name: Scene
  nameWithType: Scene
  fullName: UnityEngine.SceneManagement.Scene
- uid: UnityEngine.SceneManagement
  commentId: N:UnityEngine.SceneManagement
  isExternal: true
  name: UnityEngine.SceneManagement
  nameWithType: UnityEngine.SceneManagement
  fullName: UnityEngine.SceneManagement
- uid: System.Nullable{UnityEngine.SceneManagement.Scene}
  commentId: T:System.Nullable{UnityEngine.SceneManagement.Scene}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Scene>
  nameWithType: Nullable<Scene>
  fullName: System.Nullable<UnityEngine.SceneManagement.Scene>
  nameWithType.vb: Nullable(Of Scene)
  fullName.vb: System.Nullable(Of UnityEngine.SceneManagement.Scene)
  name.vb: Nullable(Of Scene)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: UnityEngine.SceneManagement.Scene
    name: Scene
    nameWithType: Scene
    fullName: UnityEngine.SceneManagement.Scene
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: UnityEngine.SceneManagement.Scene
    name: Scene
    nameWithType: Scene
    fullName: UnityEngine.SceneManagement.Scene
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: UnityEditor.SceneAsset
  commentId: T:UnityEditor.SceneAsset
  parent: UnityEditor
  isExternal: true
  name: SceneAsset
  nameWithType: SceneAsset
  fullName: UnityEditor.SceneAsset
- uid: UnityEditor
  commentId: N:UnityEditor
  isExternal: true
  name: UnityEditor
  nameWithType: UnityEditor
  fullName: UnityEditor
- uid: AdvancedSceneManager.Models.Scene.OnOpen*
  commentId: Overload:AdvancedSceneManager.Models.Scene.OnOpen
  name: OnOpen
  nameWithType: Scene.OnOpen
  fullName: AdvancedSceneManager.Models.Scene.OnOpen
