### YamlMime:ManagedReference
items:
- uid: AdvancedSceneManager.Utility.SceneCollectionUtility
  commentId: T:AdvancedSceneManager.Utility.SceneCollectionUtility
  id: SceneCollectionUtility
  parent: AdvancedSceneManager.Utility
  children:
  - AdvancedSceneManager.Utility.SceneCollectionUtility.Create(System.String,AdvancedSceneManager.Models.Profile)
  - AdvancedSceneManager.Utility.SceneCollectionUtility.Find(System.Collections.Generic.IEnumerable{AdvancedSceneManager.Core.OpenSceneInfo},AdvancedSceneManager.Models.Scene)
  - AdvancedSceneManager.Utility.SceneCollectionUtility.Find(System.Collections.Generic.IEnumerable{AdvancedSceneManager.Core.OpenSceneInfo},UnityEngine.SceneManagement.Scene)
  - AdvancedSceneManager.Utility.SceneCollectionUtility.Find(System.Collections.Generic.IEnumerable{AdvancedSceneManager.Models.Scene},System.String)
  - AdvancedSceneManager.Utility.SceneCollectionUtility.Find(System.Collections.Generic.IEnumerable{UnityEngine.SceneManagement.Scene},System.String)
  - AdvancedSceneManager.Utility.SceneCollectionUtility.Remove(AdvancedSceneManager.Models.SceneCollection)
  - AdvancedSceneManager.Utility.SceneCollectionUtility.RemoveNullScenes(AdvancedSceneManager.Models.SceneCollection)
  langs:
  - csharp
  - vb
  name: SceneCollectionUtility
  nameWithType: SceneCollectionUtility
  fullName: AdvancedSceneManager.Utility.SceneCollectionUtility
  type: Class
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Utility/SceneCollectionUtility.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: SceneCollectionUtility
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Utility/SceneCollectionUtility.cs
    startLine: 11
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Utility
  summary: An utility class to perform actions on collections.
  example: []
  syntax:
    content: public static class SceneCollectionUtility
    content.vb: Public Module SceneCollectionUtility
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: AdvancedSceneManager.Utility.SceneCollectionUtility.Create(System.String,AdvancedSceneManager.Models.Profile)
  commentId: M:AdvancedSceneManager.Utility.SceneCollectionUtility.Create(System.String,AdvancedSceneManager.Models.Profile)
  id: Create(System.String,AdvancedSceneManager.Models.Profile)
  parent: AdvancedSceneManager.Utility.SceneCollectionUtility
  langs:
  - csharp
  - vb
  name: Create(String, Profile)
  nameWithType: SceneCollectionUtility.Create(String, Profile)
  fullName: AdvancedSceneManager.Utility.SceneCollectionUtility.Create(System.String, AdvancedSceneManager.Models.Profile)
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Utility/SceneCollectionUtility.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: Create
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Utility/SceneCollectionUtility.cs
    startLine: 21
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Utility
  summary: Creates a <xref href="AdvancedSceneManager.Models.SceneCollection" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public static SceneCollection Create(string title, Profile profile = null)
    parameters:
    - id: title
      type: System.String
      description: The name of the collection.
    - id: profile
      type: AdvancedSceneManager.Models.Profile
      description: The profile to add this collection to. Defaults to <xref href="AdvancedSceneManager.Models.Profile.current" data-throw-if-not-resolved="false"></xref>.
    return:
      type: AdvancedSceneManager.Models.SceneCollection
    content.vb: Public Shared Function Create(title As String, profile As Profile = Nothing) As SceneCollection
  overload: AdvancedSceneManager.Utility.SceneCollectionUtility.Create*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: AdvancedSceneManager.Utility.SceneCollectionUtility.Remove(AdvancedSceneManager.Models.SceneCollection)
  commentId: M:AdvancedSceneManager.Utility.SceneCollectionUtility.Remove(AdvancedSceneManager.Models.SceneCollection)
  id: Remove(AdvancedSceneManager.Models.SceneCollection)
  parent: AdvancedSceneManager.Utility.SceneCollectionUtility
  langs:
  - csharp
  - vb
  name: Remove(SceneCollection)
  nameWithType: SceneCollectionUtility.Remove(SceneCollection)
  fullName: AdvancedSceneManager.Utility.SceneCollectionUtility.Remove(AdvancedSceneManager.Models.SceneCollection)
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Utility/SceneCollectionUtility.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: Remove
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Utility/SceneCollectionUtility.cs
    startLine: 35
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Utility
  summary: Removes a <xref href="AdvancedSceneManager.Models.SceneCollection" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public static void Remove(SceneCollection collection)
    parameters:
    - id: collection
      type: AdvancedSceneManager.Models.SceneCollection
    content.vb: Public Shared Sub Remove(collection As SceneCollection)
  overload: AdvancedSceneManager.Utility.SceneCollectionUtility.Remove*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: AdvancedSceneManager.Utility.SceneCollectionUtility.RemoveNullScenes(AdvancedSceneManager.Models.SceneCollection)
  commentId: M:AdvancedSceneManager.Utility.SceneCollectionUtility.RemoveNullScenes(AdvancedSceneManager.Models.SceneCollection)
  id: RemoveNullScenes(AdvancedSceneManager.Models.SceneCollection)
  parent: AdvancedSceneManager.Utility.SceneCollectionUtility
  langs:
  - csharp
  - vb
  name: RemoveNullScenes(SceneCollection)
  nameWithType: SceneCollectionUtility.RemoveNullScenes(SceneCollection)
  fullName: AdvancedSceneManager.Utility.SceneCollectionUtility.RemoveNullScenes(AdvancedSceneManager.Models.SceneCollection)
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Utility/SceneCollectionUtility.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: RemoveNullScenes
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Utility/SceneCollectionUtility.cs
    startLine: 39
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Utility
  summary: Removes all null scenes in the collection.
  example: []
  syntax:
    content: public static void RemoveNullScenes(SceneCollection collection)
    parameters:
    - id: collection
      type: AdvancedSceneManager.Models.SceneCollection
    content.vb: Public Shared Sub RemoveNullScenes(collection As SceneCollection)
  overload: AdvancedSceneManager.Utility.SceneCollectionUtility.RemoveNullScenes*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: AdvancedSceneManager.Utility.SceneCollectionUtility.Find(System.Collections.Generic.IEnumerable{AdvancedSceneManager.Models.Scene},System.String)
  commentId: M:AdvancedSceneManager.Utility.SceneCollectionUtility.Find(System.Collections.Generic.IEnumerable{AdvancedSceneManager.Models.Scene},System.String)
  id: Find(System.Collections.Generic.IEnumerable{AdvancedSceneManager.Models.Scene},System.String)
  isExtensionMethod: true
  parent: AdvancedSceneManager.Utility.SceneCollectionUtility
  langs:
  - csharp
  - vb
  name: Find(IEnumerable<Scene>, String)
  nameWithType: SceneCollectionUtility.Find(IEnumerable<Scene>, String)
  fullName: AdvancedSceneManager.Utility.SceneCollectionUtility.Find(System.Collections.Generic.IEnumerable<AdvancedSceneManager.Models.Scene>, System.String)
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Utility/SceneCollectionUtility.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: Find
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Utility/SceneCollectionUtility.cs
    startLine: 53
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Utility
  summary: Finds the scene with the specified path.
  example: []
  syntax:
    content: public static Scene Find(this IEnumerable<Scene> list, string path)
    parameters:
    - id: list
      type: System.Collections.Generic.IEnumerable{AdvancedSceneManager.Models.Scene}
      description: The list of scenes to query.
    - id: path
      type: System.String
      description: The path of the scene to find.
    return:
      type: AdvancedSceneManager.Models.Scene
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Find(list As IEnumerable(Of Scene), path As String) As Scene
  overload: AdvancedSceneManager.Utility.SceneCollectionUtility.Find*
  nameWithType.vb: SceneCollectionUtility.Find(IEnumerable(Of Scene), String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AdvancedSceneManager.Utility.SceneCollectionUtility.Find(System.Collections.Generic.IEnumerable(Of AdvancedSceneManager.Models.Scene), System.String)
  name.vb: Find(IEnumerable(Of Scene), String)
- uid: AdvancedSceneManager.Utility.SceneCollectionUtility.Find(System.Collections.Generic.IEnumerable{UnityEngine.SceneManagement.Scene},System.String)
  commentId: M:AdvancedSceneManager.Utility.SceneCollectionUtility.Find(System.Collections.Generic.IEnumerable{UnityEngine.SceneManagement.Scene},System.String)
  id: Find(System.Collections.Generic.IEnumerable{UnityEngine.SceneManagement.Scene},System.String)
  isExtensionMethod: true
  parent: AdvancedSceneManager.Utility.SceneCollectionUtility
  langs:
  - csharp
  - vb
  name: Find(IEnumerable<Scene>, String)
  nameWithType: SceneCollectionUtility.Find(IEnumerable<Scene>, String)
  fullName: AdvancedSceneManager.Utility.SceneCollectionUtility.Find(System.Collections.Generic.IEnumerable<UnityEngine.SceneManagement.Scene>, System.String)
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Utility/SceneCollectionUtility.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: Find
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Utility/SceneCollectionUtility.cs
    startLine: 57
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Utility
  summary: Finds the scene with the specified path.
  example: []
  syntax:
    content: public static Scene Find(this IEnumerable<Scene> list, string path)
    parameters:
    - id: list
      type: System.Collections.Generic.IEnumerable{UnityEngine.SceneManagement.Scene}
    - id: path
      type: System.String
      description: The path of the scene to find.
    return:
      type: UnityEngine.SceneManagement.Scene
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Find(list As IEnumerable(Of Scene), path As String) As Scene
  overload: AdvancedSceneManager.Utility.SceneCollectionUtility.Find*
  nameWithType.vb: SceneCollectionUtility.Find(IEnumerable(Of Scene), String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AdvancedSceneManager.Utility.SceneCollectionUtility.Find(System.Collections.Generic.IEnumerable(Of UnityEngine.SceneManagement.Scene), System.String)
  name.vb: Find(IEnumerable(Of Scene), String)
- uid: AdvancedSceneManager.Utility.SceneCollectionUtility.Find(System.Collections.Generic.IEnumerable{AdvancedSceneManager.Core.OpenSceneInfo},AdvancedSceneManager.Models.Scene)
  commentId: M:AdvancedSceneManager.Utility.SceneCollectionUtility.Find(System.Collections.Generic.IEnumerable{AdvancedSceneManager.Core.OpenSceneInfo},AdvancedSceneManager.Models.Scene)
  id: Find(System.Collections.Generic.IEnumerable{AdvancedSceneManager.Core.OpenSceneInfo},AdvancedSceneManager.Models.Scene)
  isExtensionMethod: true
  parent: AdvancedSceneManager.Utility.SceneCollectionUtility
  langs:
  - csharp
  - vb
  name: Find(IEnumerable<OpenSceneInfo>, Scene)
  nameWithType: SceneCollectionUtility.Find(IEnumerable<OpenSceneInfo>, Scene)
  fullName: AdvancedSceneManager.Utility.SceneCollectionUtility.Find(System.Collections.Generic.IEnumerable<AdvancedSceneManager.Core.OpenSceneInfo>, AdvancedSceneManager.Models.Scene)
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Utility/SceneCollectionUtility.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: Find
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Utility/SceneCollectionUtility.cs
    startLine: 61
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Utility
  summary: Finds the scene with the specified path.
  example: []
  syntax:
    content: public static OpenSceneInfo Find(this IEnumerable<OpenSceneInfo> list, Scene scene)
    parameters:
    - id: list
      type: System.Collections.Generic.IEnumerable{AdvancedSceneManager.Core.OpenSceneInfo}
    - id: scene
      type: AdvancedSceneManager.Models.Scene
    return:
      type: AdvancedSceneManager.Core.OpenSceneInfo
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Find(list As IEnumerable(Of OpenSceneInfo), scene As Scene) As OpenSceneInfo
  overload: AdvancedSceneManager.Utility.SceneCollectionUtility.Find*
  nameWithType.vb: SceneCollectionUtility.Find(IEnumerable(Of OpenSceneInfo), Scene)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AdvancedSceneManager.Utility.SceneCollectionUtility.Find(System.Collections.Generic.IEnumerable(Of AdvancedSceneManager.Core.OpenSceneInfo), AdvancedSceneManager.Models.Scene)
  name.vb: Find(IEnumerable(Of OpenSceneInfo), Scene)
- uid: AdvancedSceneManager.Utility.SceneCollectionUtility.Find(System.Collections.Generic.IEnumerable{AdvancedSceneManager.Core.OpenSceneInfo},UnityEngine.SceneManagement.Scene)
  commentId: M:AdvancedSceneManager.Utility.SceneCollectionUtility.Find(System.Collections.Generic.IEnumerable{AdvancedSceneManager.Core.OpenSceneInfo},UnityEngine.SceneManagement.Scene)
  id: Find(System.Collections.Generic.IEnumerable{AdvancedSceneManager.Core.OpenSceneInfo},UnityEngine.SceneManagement.Scene)
  isExtensionMethod: true
  parent: AdvancedSceneManager.Utility.SceneCollectionUtility
  langs:
  - csharp
  - vb
  name: Find(IEnumerable<OpenSceneInfo>, Scene)
  nameWithType: SceneCollectionUtility.Find(IEnumerable<OpenSceneInfo>, Scene)
  fullName: AdvancedSceneManager.Utility.SceneCollectionUtility.Find(System.Collections.Generic.IEnumerable<AdvancedSceneManager.Core.OpenSceneInfo>, UnityEngine.SceneManagement.Scene)
  type: Method
  source:
    remote:
      path: Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Utility/SceneCollectionUtility.cs
      branch: dev
      repo: https://github.com/Lazy-Solutions/Unity.AdvancedSceneManager.git
    id: Find
    path: ../../../Unity.AdvancedSceneManager/Unity projects/ASM-dev-2019/Assets/AdvancedSceneManager/System/Utility/SceneCollectionUtility.cs
    startLine: 65
  assemblies:
  - AdvancedSceneManager
  namespace: AdvancedSceneManager.Utility
  summary: Finds the scene with the specified path.
  example: []
  syntax:
    content: public static OpenSceneInfo Find(this IEnumerable<OpenSceneInfo> list, Scene scene)
    parameters:
    - id: list
      type: System.Collections.Generic.IEnumerable{AdvancedSceneManager.Core.OpenSceneInfo}
    - id: scene
      type: UnityEngine.SceneManagement.Scene
    return:
      type: AdvancedSceneManager.Core.OpenSceneInfo
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Find(list As IEnumerable(Of OpenSceneInfo), scene As Scene) As OpenSceneInfo
  overload: AdvancedSceneManager.Utility.SceneCollectionUtility.Find*
  nameWithType.vb: SceneCollectionUtility.Find(IEnumerable(Of OpenSceneInfo), Scene)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AdvancedSceneManager.Utility.SceneCollectionUtility.Find(System.Collections.Generic.IEnumerable(Of AdvancedSceneManager.Core.OpenSceneInfo), UnityEngine.SceneManagement.Scene)
  name.vb: Find(IEnumerable(Of OpenSceneInfo), Scene)
references:
- uid: AdvancedSceneManager.Utility
  commentId: N:AdvancedSceneManager.Utility
  name: AdvancedSceneManager.Utility
  nameWithType: AdvancedSceneManager.Utility
  fullName: AdvancedSceneManager.Utility
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: AdvancedSceneManager.Models.SceneCollection
  commentId: T:AdvancedSceneManager.Models.SceneCollection
  parent: AdvancedSceneManager.Models
  name: SceneCollection
  nameWithType: SceneCollection
  fullName: AdvancedSceneManager.Models.SceneCollection
- uid: AdvancedSceneManager.Models.Profile.current
  commentId: P:AdvancedSceneManager.Models.Profile.current
  isExternal: true
- uid: AdvancedSceneManager.Utility.SceneCollectionUtility.Create*
  commentId: Overload:AdvancedSceneManager.Utility.SceneCollectionUtility.Create
  name: Create
  nameWithType: SceneCollectionUtility.Create
  fullName: AdvancedSceneManager.Utility.SceneCollectionUtility.Create
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: AdvancedSceneManager.Models.Profile
  commentId: T:AdvancedSceneManager.Models.Profile
  parent: AdvancedSceneManager.Models
  name: Profile
  nameWithType: Profile
  fullName: AdvancedSceneManager.Models.Profile
- uid: AdvancedSceneManager.Models
  commentId: N:AdvancedSceneManager.Models
  name: AdvancedSceneManager.Models
  nameWithType: AdvancedSceneManager.Models
  fullName: AdvancedSceneManager.Models
- uid: AdvancedSceneManager.Utility.SceneCollectionUtility.Remove*
  commentId: Overload:AdvancedSceneManager.Utility.SceneCollectionUtility.Remove
  name: Remove
  nameWithType: SceneCollectionUtility.Remove
  fullName: AdvancedSceneManager.Utility.SceneCollectionUtility.Remove
- uid: AdvancedSceneManager.Utility.SceneCollectionUtility.RemoveNullScenes*
  commentId: Overload:AdvancedSceneManager.Utility.SceneCollectionUtility.RemoveNullScenes
  name: RemoveNullScenes
  nameWithType: SceneCollectionUtility.RemoveNullScenes
  fullName: AdvancedSceneManager.Utility.SceneCollectionUtility.RemoveNullScenes
- uid: AdvancedSceneManager.Utility.SceneCollectionUtility.Find*
  commentId: Overload:AdvancedSceneManager.Utility.SceneCollectionUtility.Find
  name: Find
  nameWithType: SceneCollectionUtility.Find
  fullName: AdvancedSceneManager.Utility.SceneCollectionUtility.Find
- uid: System.Collections.Generic.IEnumerable{AdvancedSceneManager.Models.Scene}
  commentId: T:System.Collections.Generic.IEnumerable{AdvancedSceneManager.Models.Scene}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Scene>
  nameWithType: IEnumerable<Scene>
  fullName: System.Collections.Generic.IEnumerable<AdvancedSceneManager.Models.Scene>
  nameWithType.vb: IEnumerable(Of Scene)
  fullName.vb: System.Collections.Generic.IEnumerable(Of AdvancedSceneManager.Models.Scene)
  name.vb: IEnumerable(Of Scene)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: AdvancedSceneManager.Models.Scene
    name: Scene
    nameWithType: Scene
    fullName: AdvancedSceneManager.Models.Scene
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: AdvancedSceneManager.Models.Scene
    name: Scene
    nameWithType: Scene
    fullName: AdvancedSceneManager.Models.Scene
  - name: )
    nameWithType: )
    fullName: )
- uid: AdvancedSceneManager.Models.Scene
  commentId: T:AdvancedSceneManager.Models.Scene
  parent: AdvancedSceneManager.Models
  name: Scene
  nameWithType: Scene
  fullName: AdvancedSceneManager.Models.Scene
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: AdvancedSceneManager.Utility.SceneCollectionUtility.Find(System.Collections.Generic.IEnumerable{AdvancedSceneManager.Models.Scene},System.String)
  commentId: M:AdvancedSceneManager.Utility.SceneCollectionUtility.Find(System.Collections.Generic.IEnumerable{AdvancedSceneManager.Models.Scene},System.String)
  isExternal: true
  name: Find(IEnumerable<Scene>, String)
  nameWithType: SceneCollectionUtility.Find(IEnumerable<Scene>, String)
  fullName: AdvancedSceneManager.Utility.SceneCollectionUtility.Find(System.Collections.Generic.IEnumerable<AdvancedSceneManager.Models.Scene>, System.String)
  nameWithType.vb: SceneCollectionUtility.Find(IEnumerable(Of Scene), String)
  fullName.vb: AdvancedSceneManager.Utility.SceneCollectionUtility.Find(System.Collections.Generic.IEnumerable(Of AdvancedSceneManager.Models.Scene), System.String)
  name.vb: Find(IEnumerable(Of Scene), String)
  spec.csharp:
  - uid: AdvancedSceneManager.Utility.SceneCollectionUtility.Find(System.Collections.Generic.IEnumerable{AdvancedSceneManager.Models.Scene},System.String)
    name: Find
    nameWithType: SceneCollectionUtility.Find
    fullName: AdvancedSceneManager.Utility.SceneCollectionUtility.Find
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: AdvancedSceneManager.Models.Scene
    name: Scene
    nameWithType: Scene
    fullName: AdvancedSceneManager.Models.Scene
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AdvancedSceneManager.Utility.SceneCollectionUtility.Find(System.Collections.Generic.IEnumerable{AdvancedSceneManager.Models.Scene},System.String)
    name: Find
    nameWithType: SceneCollectionUtility.Find
    fullName: AdvancedSceneManager.Utility.SceneCollectionUtility.Find
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: AdvancedSceneManager.Models.Scene
    name: Scene
    nameWithType: Scene
    fullName: AdvancedSceneManager.Models.Scene
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{UnityEngine.SceneManagement.Scene}
  commentId: T:System.Collections.Generic.IEnumerable{UnityEngine.SceneManagement.Scene}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Scene>
  nameWithType: IEnumerable<Scene>
  fullName: System.Collections.Generic.IEnumerable<UnityEngine.SceneManagement.Scene>
  nameWithType.vb: IEnumerable(Of Scene)
  fullName.vb: System.Collections.Generic.IEnumerable(Of UnityEngine.SceneManagement.Scene)
  name.vb: IEnumerable(Of Scene)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: UnityEngine.SceneManagement.Scene
    name: Scene
    nameWithType: Scene
    fullName: UnityEngine.SceneManagement.Scene
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: UnityEngine.SceneManagement.Scene
    name: Scene
    nameWithType: Scene
    fullName: UnityEngine.SceneManagement.Scene
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: UnityEngine.SceneManagement.Scene
  commentId: T:UnityEngine.SceneManagement.Scene
  parent: UnityEngine.SceneManagement
  isExternal: true
  name: Scene
  nameWithType: Scene
  fullName: UnityEngine.SceneManagement.Scene
- uid: UnityEngine.SceneManagement
  commentId: N:UnityEngine.SceneManagement
  isExternal: true
  name: UnityEngine.SceneManagement
  nameWithType: UnityEngine.SceneManagement
  fullName: UnityEngine.SceneManagement
- uid: System.Collections.Generic.IEnumerable{AdvancedSceneManager.Core.OpenSceneInfo}
  commentId: T:System.Collections.Generic.IEnumerable{AdvancedSceneManager.Core.OpenSceneInfo}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<OpenSceneInfo>
  nameWithType: IEnumerable<OpenSceneInfo>
  fullName: System.Collections.Generic.IEnumerable<AdvancedSceneManager.Core.OpenSceneInfo>
  nameWithType.vb: IEnumerable(Of OpenSceneInfo)
  fullName.vb: System.Collections.Generic.IEnumerable(Of AdvancedSceneManager.Core.OpenSceneInfo)
  name.vb: IEnumerable(Of OpenSceneInfo)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: AdvancedSceneManager.Core.OpenSceneInfo
    name: OpenSceneInfo
    nameWithType: OpenSceneInfo
    fullName: AdvancedSceneManager.Core.OpenSceneInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: AdvancedSceneManager.Core.OpenSceneInfo
    name: OpenSceneInfo
    nameWithType: OpenSceneInfo
    fullName: AdvancedSceneManager.Core.OpenSceneInfo
  - name: )
    nameWithType: )
    fullName: )
- uid: AdvancedSceneManager.Core.OpenSceneInfo
  commentId: T:AdvancedSceneManager.Core.OpenSceneInfo
  parent: AdvancedSceneManager.Core
  name: OpenSceneInfo
  nameWithType: OpenSceneInfo
  fullName: AdvancedSceneManager.Core.OpenSceneInfo
- uid: AdvancedSceneManager.Core
  commentId: N:AdvancedSceneManager.Core
  name: AdvancedSceneManager.Core
  nameWithType: AdvancedSceneManager.Core
  fullName: AdvancedSceneManager.Core
