<!DOCTYPE html>
<!--[if IE]><![endif]-->
<html>
  <head>
    <link rel="stylesheet" href="../styles/docfx.vendor.css">
    <link rel="stylesheet" href="../styles/default.css">
    <link rel="stylesheet" href="../styles/main.css">
  </head>
  <body>
    <article>
  
  
  <h1 id="AdvancedSceneManager_Editor_Utility_ListUtility" data-uid="AdvancedSceneManager.Editor.Utility.ListUtility" class="text-break">Class ListUtility
  </h1>
  <div class="markdown level0 summary"><p>Provides methods for working with lists.</p>
</div>
  <div class="markdown level0 conceptual"></div>
  <div class="inheritance">
    <h5>Inheritance</h5>
    <div class="level0"><span class="xref">System.Object</span></div>
    <div class="level1"><span class="xref">ListUtility</span></div>
  </div>
  <h6><strong>Namespace</strong>: <a class="xref" href="AdvancedSceneManager.Editor.Utility.html">AdvancedSceneManager.Editor.Utility</a></h6>
  <h6><strong>Assembly</strong>: AdvancedSceneManager.dll</h6>
  <h5 id="AdvancedSceneManager_Editor_Utility_ListUtility_syntax">Syntax</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public static class ListUtility</code></pre>
  </div>
  <h5 id="AdvancedSceneManager_Editor_Utility_ListUtility_remarks"><strong>Remarks</strong></h5>
  <div class="markdown level0 remarks"><p>Only available in editor.</p>
</div>
  <h3 id="methods">Methods
  </h3>
  <a id="AdvancedSceneManager_Editor_Utility_ListUtility_Except_" data-uid="AdvancedSceneManager.Editor.Utility.ListUtility.Except*"></a>
  <h4 id="AdvancedSceneManager_Editor_Utility_ListUtility_Except__1_System_Collections_Generic_IEnumerable___0____0_" data-uid="AdvancedSceneManager.Editor.Utility.ListUtility.Except``1(System.Collections.Generic.IEnumerable{``0},``0)">Except&lt;T&gt;(IEnumerable&lt;T&gt;, T)</h4>
  <div class="markdown level1 summary"><p>Excludes the items from the list.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public static IEnumerable&lt;T&gt; Except&lt;T&gt;(this IEnumerable&lt;T&gt; list, T item)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.IEnumerable</span>&lt;T&gt;</td>
        <td><span class="parametername">list</span></td>
        <td></td>
      </tr>
      <tr>
        <td><span class="xref">T</span></td>
        <td><span class="parametername">item</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.IEnumerable</span>&lt;T&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="typeParameters">Type Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="parametername">T</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <a id="AdvancedSceneManager_Editor_Utility_ListUtility_Flatten_" data-uid="AdvancedSceneManager.Editor.Utility.ListUtility.Flatten*"></a>
  <h4 id="AdvancedSceneManager_Editor_Utility_ListUtility_Flatten__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Collections_Generic_IEnumerable___0___" data-uid="AdvancedSceneManager.Editor.Utility.ListUtility.Flatten``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}})">Flatten&lt;T&gt;(IEnumerable&lt;T&gt;, Func&lt;T, IEnumerable&lt;T&gt;&gt;)</h4>
  <div class="markdown level1 summary"><p>Flattens a multidimensional list.</p>
<p>Usage: list.Flatten(item =&gt; item.subItems);</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public static IEnumerable&lt;T&gt; Flatten&lt;T&gt;(this IEnumerable&lt;T&gt; list, Func&lt;T, IEnumerable&lt;T&gt;&gt; getSubList)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.IEnumerable</span>&lt;T&gt;</td>
        <td><span class="parametername">list</span></td>
        <td></td>
      </tr>
      <tr>
        <td><span class="xref">System.Func</span>&lt;T, <span class="xref">System.Collections.Generic.IEnumerable</span>&lt;T&gt;&gt;</td>
        <td><span class="parametername">getSubList</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.IEnumerable</span>&lt;T&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="typeParameters">Type Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="parametername">T</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <a id="AdvancedSceneManager_Editor_Utility_ListUtility_ForEach_" data-uid="AdvancedSceneManager.Editor.Utility.ListUtility.ForEach*"></a>
  <h4 id="AdvancedSceneManager_Editor_Utility_ListUtility_ForEach__1___0___System_Action___0_System_Int32__" data-uid="AdvancedSceneManager.Editor.Utility.ListUtility.ForEach``1(``0[],System.Action{``0,System.Int32})">ForEach&lt;T&gt;(T[], Action&lt;T, Int32&gt;)</h4>
  <div class="markdown level1 summary"><p>Runs <code data-dev-comment-type="paramref" class="paramref">action</code> on each item in <code data-dev-comment-type="paramref" class="paramref">list</code>.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public static void ForEach&lt;T&gt;(this T[] list, Action&lt;T, int&gt; action)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>T[]</td>
        <td><span class="parametername">list</span></td>
        <td></td>
      </tr>
      <tr>
        <td><span class="xref">System.Action</span>&lt;T, <span class="xref">System.Int32</span>&gt;</td>
        <td><span class="parametername">action</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="typeParameters">Type Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="parametername">T</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <a id="AdvancedSceneManager_Editor_Utility_ListUtility_ForEach_" data-uid="AdvancedSceneManager.Editor.Utility.ListUtility.ForEach*"></a>
  <h4 id="AdvancedSceneManager_Editor_Utility_ListUtility_ForEach__1_System_Collections_Generic_IEnumerable___0__System_Action___0_System_Int32__" data-uid="AdvancedSceneManager.Editor.Utility.ListUtility.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})">ForEach&lt;T&gt;(IEnumerable&lt;T&gt;, Action&lt;T, Int32&gt;)</h4>
  <div class="markdown level1 summary"><p>Runs <code data-dev-comment-type="paramref" class="paramref">action</code> on each item in <code data-dev-comment-type="paramref" class="paramref">list</code>.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public static void ForEach&lt;T&gt;(this IEnumerable&lt;T&gt; list, Action&lt;T, int&gt; action)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.IEnumerable</span>&lt;T&gt;</td>
        <td><span class="parametername">list</span></td>
        <td></td>
      </tr>
      <tr>
        <td><span class="xref">System.Action</span>&lt;T, <span class="xref">System.Int32</span>&gt;</td>
        <td><span class="parametername">action</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="typeParameters">Type Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="parametername">T</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <a id="AdvancedSceneManager_Editor_Utility_ListUtility_GroupConsecutive_" data-uid="AdvancedSceneManager.Editor.Utility.ListUtility.GroupConsecutive*"></a>
  <h4 id="AdvancedSceneManager_Editor_Utility_ListUtility_GroupConsecutive__1_System_Collections_Generic_IEnumerable___0__System_Func___0___0_System_Boolean__" data-uid="AdvancedSceneManager.Editor.Utility.ListUtility.GroupConsecutive``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})">GroupConsecutive&lt;T&gt;(IEnumerable&lt;T&gt;, Func&lt;T, T, Boolean&gt;)</h4>
  <div class="markdown level1 summary"><p>Groups consecutive items together.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public static IEnumerable&lt;IEnumerable&lt;T&gt;&gt; GroupConsecutive&lt;T&gt;(this IEnumerable&lt;T&gt; list, Func&lt;T, T, bool&gt; compare)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.IEnumerable</span>&lt;T&gt;</td>
        <td><span class="parametername">list</span></td>
        <td></td>
      </tr>
      <tr>
        <td><span class="xref">System.Func</span>&lt;T, T, <span class="xref">System.Boolean</span>&gt;</td>
        <td><span class="parametername">compare</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.IEnumerable</span>&lt;<span class="xref">System.Collections.Generic.IEnumerable</span>&lt;T&gt;&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="typeParameters">Type Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="parametername">T</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <a id="AdvancedSceneManager_Editor_Utility_ListUtility_MoveDown_" data-uid="AdvancedSceneManager.Editor.Utility.ListUtility.MoveDown*"></a>
  <h4 id="AdvancedSceneManager_Editor_Utility_ListUtility_MoveDown__1___0______0_" data-uid="AdvancedSceneManager.Editor.Utility.ListUtility.MoveDown``1(``0[]@,``0)">MoveDown&lt;T&gt;(ref T[], T)</h4>
  <div class="markdown level1 summary"><p>Moves the <code data-dev-comment-type="paramref" class="paramref">item</code> up in the <code data-dev-comment-type="paramref" class="paramref">array</code>. Returns false if index is last or <code data-dev-comment-type="paramref" class="paramref">item</code> does not exist in <code data-dev-comment-type="paramref" class="paramref">array</code>.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public static bool MoveDown&lt;T&gt;(ref T[] array, T item)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>T[]</td>
        <td><span class="parametername">array</span></td>
        <td></td>
      </tr>
      <tr>
        <td><span class="xref">T</span></td>
        <td><span class="parametername">item</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Boolean</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="typeParameters">Type Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="parametername">T</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <a id="AdvancedSceneManager_Editor_Utility_ListUtility_MoveUp_" data-uid="AdvancedSceneManager.Editor.Utility.ListUtility.MoveUp*"></a>
  <h4 id="AdvancedSceneManager_Editor_Utility_ListUtility_MoveUp__1___0______0_" data-uid="AdvancedSceneManager.Editor.Utility.ListUtility.MoveUp``1(``0[]@,``0)">MoveUp&lt;T&gt;(ref T[], T)</h4>
  <div class="markdown level1 summary"><p>Moves the <code data-dev-comment-type="paramref" class="paramref">item</code> up in the <code data-dev-comment-type="paramref" class="paramref">array</code>. Returns false if index is 0 or <code data-dev-comment-type="paramref" class="paramref">item</code> does not exist in <code data-dev-comment-type="paramref" class="paramref">array</code>.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public static bool MoveUp&lt;T&gt;(ref T[] array, T item)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>T[]</td>
        <td><span class="parametername">array</span></td>
        <td></td>
      </tr>
      <tr>
        <td><span class="xref">T</span></td>
        <td><span class="parametername">item</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Boolean</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="typeParameters">Type Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="parametername">T</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
</article>
    <script type="text/javascript" src="../styles/docfx.vendor.js"></script>
    <script type="text/javascript" src="../styles/docfx.js"></script>
    <script type="text/javascript" src="../styles/main.js"></script>
  </body>
</html>
