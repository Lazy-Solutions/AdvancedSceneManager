<!DOCTYPE html>
<!--[if IE]><![endif]-->
<html>
  <head>
    <link rel="stylesheet" href="../styles/docfx.vendor.css">
    <link rel="stylesheet" href="../styles/default.css">
    <link rel="stylesheet" href="../styles/main.css">
  </head>
  <body>
    <article>
  
  
  <h1 id="AdvancedSceneManager_Core_UtilitySceneManager" data-uid="AdvancedSceneManager.Core.UtilitySceneManager" class="text-break">Class UtilitySceneManager
  </h1>
  <div class="markdown level0 summary"><p sourcefile="api/AdvancedSceneManager.Core.UtilitySceneManager.yml" sourcestartlinenumber="1" sourceendlinenumber="1">An utility scene manager that helps with actions that might relate to either <a class="xref" href="AdvancedSceneManager.SceneManager.html#AdvancedSceneManager_SceneManager_collection">collection</a> or <a class="xref" href="AdvancedSceneManager.SceneManager.html#AdvancedSceneManager_SceneManager_standalone">standalone</a> managers.</p>
</div>
  <div class="markdown level0 conceptual"></div>
  <div class="inheritance">
    <h5>Inheritance</h5>
    <div class="level0"><span class="xref">System.Object</span></div>
    <div class="level1"><span class="xref">UtilitySceneManager</span></div>
  </div>
  <h6><strong>Namespace</strong>: <a class="xref" href="AdvancedSceneManager.Core.html">AdvancedSceneManager.Core</a></h6>
  <h6><strong>Assembly</strong>: AdvancedSceneManager.dll</h6>
  <h5 id="AdvancedSceneManager_Core_UtilitySceneManager_syntax">Syntax</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public class UtilitySceneManager</code></pre>
  </div>
  <h5 id="AdvancedSceneManager_Core_UtilitySceneManager_remarks"><strong>Remarks</strong></h5>
  <div class="markdown level0 remarks"><p sourcefile="api/AdvancedSceneManager.Core.UtilitySceneManager.yml" sourcestartlinenumber="1" sourceendlinenumber="1">Usage: <a class="xref" href="AdvancedSceneManager.SceneManager.html#AdvancedSceneManager_SceneManager_utility">utility</a>.</p>
</div>
  <h3 id="properties">Properties
  </h3>
  <a id="AdvancedSceneManager_Core_UtilitySceneManager_activeScene_" data-uid="AdvancedSceneManager.Core.UtilitySceneManager.activeScene*"></a>
  <h4 id="AdvancedSceneManager_Core_UtilitySceneManager_activeScene" data-uid="AdvancedSceneManager.Core.UtilitySceneManager.activeScene">activeScene</h4>
  <div class="markdown level1 summary"><p sourcefile="api/AdvancedSceneManager.Core.UtilitySceneManager.yml" sourcestartlinenumber="1" sourceendlinenumber="1">Gets the currently open scene.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public OpenSceneInfo activeScene { get; }</code></pre>
  </div>
  <h5 class="propertyValue">Property Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="AdvancedSceneManager.Core.OpenSceneInfo.html">OpenSceneInfo</a></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <a id="AdvancedSceneManager_Core_UtilitySceneManager_currentOperation_" data-uid="AdvancedSceneManager.Core.UtilitySceneManager.currentOperation*"></a>
  <h4 id="AdvancedSceneManager_Core_UtilitySceneManager_currentOperation" data-uid="AdvancedSceneManager.Core.UtilitySceneManager.currentOperation">currentOperation</h4>
  <div class="markdown level1 summary"><p sourcefile="api/AdvancedSceneManager.Core.UtilitySceneManager.yml" sourcestartlinenumber="1" sourceendlinenumber="1">Gets the current active operation in the queue.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public SceneOperation currentOperation { get; }</code></pre>
  </div>
  <h5 class="propertyValue">Property Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="AdvancedSceneManager.Core.SceneOperation.html">SceneOperation</a></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <a id="AdvancedSceneManager_Core_UtilitySceneManager_dontDestroyOnLoad_" data-uid="AdvancedSceneManager.Core.UtilitySceneManager.dontDestroyOnLoad*"></a>
  <h4 id="AdvancedSceneManager_Core_UtilitySceneManager_dontDestroyOnLoad" data-uid="AdvancedSceneManager.Core.UtilitySceneManager.dontDestroyOnLoad">dontDestroyOnLoad</h4>
  <div class="markdown level1 summary"><p sourcefile="api/AdvancedSceneManager.Core.UtilitySceneManager.yml" sourcestartlinenumber="1" sourceendlinenumber="1">Represents &apos;DontDestroyOnLoad&apos; scene.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public OpenSceneInfo dontDestroyOnLoad { get; }</code></pre>
  </div>
  <h5 class="propertyValue">Property Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="AdvancedSceneManager.Core.OpenSceneInfo.html">OpenSceneInfo</a></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <a id="AdvancedSceneManager_Core_UtilitySceneManager_isBusy_" data-uid="AdvancedSceneManager.Core.UtilitySceneManager.isBusy*"></a>
  <h4 id="AdvancedSceneManager_Core_UtilitySceneManager_isBusy" data-uid="AdvancedSceneManager.Core.UtilitySceneManager.isBusy">isBusy</h4>
  <div class="markdown level1 summary"></div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public bool isBusy { get; }</code></pre>
  </div>
  <h5 class="propertyValue">Property Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Boolean</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <a id="AdvancedSceneManager_Core_UtilitySceneManager_openScenes_" data-uid="AdvancedSceneManager.Core.UtilitySceneManager.openScenes*"></a>
  <h4 id="AdvancedSceneManager_Core_UtilitySceneManager_openScenes" data-uid="AdvancedSceneManager.Core.UtilitySceneManager.openScenes">openScenes</h4>
  <div class="markdown level1 summary"><p sourcefile="api/AdvancedSceneManager.Core.UtilitySceneManager.yml" sourcestartlinenumber="1" sourceendlinenumber="1">Gets all currently open scenes.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public IEnumerable&lt;OpenSceneInfo&gt; openScenes { get; }</code></pre>
  </div>
  <h5 class="propertyValue">Property Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.IEnumerable</span>&lt;<a class="xref" href="AdvancedSceneManager.Core.OpenSceneInfo.html">OpenSceneInfo</a>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <a id="AdvancedSceneManager_Core_UtilitySceneManager_queuedOperations_" data-uid="AdvancedSceneManager.Core.UtilitySceneManager.queuedOperations*"></a>
  <h4 id="AdvancedSceneManager_Core_UtilitySceneManager_queuedOperations" data-uid="AdvancedSceneManager.Core.UtilitySceneManager.queuedOperations">queuedOperations</h4>
  <div class="markdown level1 summary"><p sourcefile="api/AdvancedSceneManager.Core.UtilitySceneManager.yml" sourcestartlinenumber="1" sourceendlinenumber="1">Gets the current scene operation queue.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public IEnumerable&lt;SceneOperation&gt; queuedOperations { get; }</code></pre>
  </div>
  <h5 class="propertyValue">Property Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.IEnumerable</span>&lt;<a class="xref" href="AdvancedSceneManager.Core.SceneOperation.html">SceneOperation</a>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <a id="AdvancedSceneManager_Core_UtilitySceneManager_runningOperations_" data-uid="AdvancedSceneManager.Core.UtilitySceneManager.runningOperations*"></a>
  <h4 id="AdvancedSceneManager_Core_UtilitySceneManager_runningOperations" data-uid="AdvancedSceneManager.Core.UtilitySceneManager.runningOperations">runningOperations</h4>
  <div class="markdown level1 summary"><p sourcefile="api/AdvancedSceneManager.Core.UtilitySceneManager.yml" sourcestartlinenumber="1" sourceendlinenumber="1">The currently running scene operations.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public IEnumerable&lt;SceneOperation&gt; runningOperations { get; }</code></pre>
  </div>
  <h5 class="propertyValue">Property Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.IEnumerable</span>&lt;<a class="xref" href="AdvancedSceneManager.Core.SceneOperation.html">SceneOperation</a>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h3 id="methods">Methods
  </h3>
  <a id="AdvancedSceneManager_Core_UtilitySceneManager_Close_" data-uid="AdvancedSceneManager.Core.UtilitySceneManager.Close*"></a>
  <h4 id="AdvancedSceneManager_Core_UtilitySceneManager_Close_AdvancedSceneManager_Core_OpenSceneInfo_" data-uid="AdvancedSceneManager.Core.UtilitySceneManager.Close(AdvancedSceneManager.Core.OpenSceneInfo)">Close(OpenSceneInfo)</h4>
  <div class="markdown level1 summary"><p sourcefile="api/AdvancedSceneManager.Core.UtilitySceneManager.yml" sourcestartlinenumber="1" sourceendlinenumber="1">Closes a scene regardless of whatever it is associated with a collection, or is was opened as stand-alone.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public SceneOperation Close(OpenSceneInfo scene)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="AdvancedSceneManager.Core.OpenSceneInfo.html">OpenSceneInfo</a></td>
        <td><span class="parametername">scene</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="AdvancedSceneManager.Core.SceneOperation.html">SceneOperation</a></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <a id="AdvancedSceneManager_Core_UtilitySceneManager_CloseAll_" data-uid="AdvancedSceneManager.Core.UtilitySceneManager.CloseAll*"></a>
  <h4 id="AdvancedSceneManager_Core_UtilitySceneManager_CloseAll_System_Boolean_" data-uid="AdvancedSceneManager.Core.UtilitySceneManager.CloseAll(System.Boolean)">CloseAll(Boolean)</h4>
  <div class="markdown level1 summary"><p sourcefile="api/AdvancedSceneManager.Core.UtilitySceneManager.yml" sourcestartlinenumber="1" sourceendlinenumber="1">Closes all scenes.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public SceneOperation CloseAll(bool closeLoadingScreens = false)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Boolean</span></td>
        <td><span class="parametername">closeLoadingScreens</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="AdvancedSceneManager.Core.SceneOperation.html">SceneOperation</a></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <a id="AdvancedSceneManager_Core_UtilitySceneManager_DoSceneCallback_" data-uid="AdvancedSceneManager.Core.UtilitySceneManager.DoSceneCallback*"></a>
  <h4 id="AdvancedSceneManager_Core_UtilitySceneManager_DoSceneCallback__1_System_Func___0_System_Collections_IEnumerator__" data-uid="AdvancedSceneManager.Core.UtilitySceneManager.DoSceneCallback``1(System.Func{``0,System.Collections.IEnumerator})">DoSceneCallback&lt;T&gt;(Func&lt;T, IEnumerator&gt;)</h4>
  <div class="markdown level1 summary"><p sourcefile="api/AdvancedSceneManager.Core.UtilitySceneManager.yml" sourcestartlinenumber="1" sourceendlinenumber="1">Performs a callback on the scripts on all open scenes.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public IEnumerator DoSceneCallback&lt;T&gt;(Func&lt;T, IEnumerator&gt; action)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Func</span>&lt;T, <span class="xref">System.Collections.IEnumerator</span>&gt;</td>
        <td><span class="parametername">action</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.IEnumerator</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="typeParameters">Type Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="parametername">T</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <a id="AdvancedSceneManager_Core_UtilitySceneManager_FindOpenScene_" data-uid="AdvancedSceneManager.Core.UtilitySceneManager.FindOpenScene*"></a>
  <h4 id="AdvancedSceneManager_Core_UtilitySceneManager_FindOpenScene_AdvancedSceneManager_Models_Scene_" data-uid="AdvancedSceneManager.Core.UtilitySceneManager.FindOpenScene(AdvancedSceneManager.Models.Scene)">FindOpenScene(Scene)</h4>
  <div class="markdown level1 summary"><p sourcefile="api/AdvancedSceneManager.Core.UtilitySceneManager.yml" sourcestartlinenumber="1" sourceendlinenumber="1">Finds the first open instance of this <a class="xref" href="AdvancedSceneManager.Models.Scene.html">Scene</a>, if it is open.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public OpenSceneInfo FindOpenScene(Scene scene)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="AdvancedSceneManager.Models.Scene.html">Scene</a></td>
        <td><span class="parametername">scene</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="AdvancedSceneManager.Core.OpenSceneInfo.html">OpenSceneInfo</a></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <a id="AdvancedSceneManager_Core_UtilitySceneManager_FindOpenScene_" data-uid="AdvancedSceneManager.Core.UtilitySceneManager.FindOpenScene*"></a>
  <h4 id="AdvancedSceneManager_Core_UtilitySceneManager_FindOpenScene_UnityEngine_SceneManagement_Scene_" data-uid="AdvancedSceneManager.Core.UtilitySceneManager.FindOpenScene(UnityEngine.SceneManagement.Scene)">FindOpenScene(Scene)</h4>
  <div class="markdown level1 summary"><p sourcefile="api/AdvancedSceneManager.Core.UtilitySceneManager.yml" sourcestartlinenumber="1" sourceendlinenumber="1">Finds the <a class="xref" href="AdvancedSceneManager.Core.OpenSceneInfo.html">OpenSceneInfo</a> of this <span class="xref">UnityEngine.SceneManagement.Scene</span>.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public OpenSceneInfo FindOpenScene(Scene scene)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">UnityEngine.SceneManagement.Scene</span></td>
        <td><span class="parametername">scene</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="AdvancedSceneManager.Core.OpenSceneInfo.html">OpenSceneInfo</a></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <a id="AdvancedSceneManager_Core_UtilitySceneManager_FindPreloadedScene_" data-uid="AdvancedSceneManager.Core.UtilitySceneManager.FindPreloadedScene*"></a>
  <h4 id="AdvancedSceneManager_Core_UtilitySceneManager_FindPreloadedScene_AdvancedSceneManager_Models_Scene_" data-uid="AdvancedSceneManager.Core.UtilitySceneManager.FindPreloadedScene(AdvancedSceneManager.Models.Scene)">FindPreloadedScene(Scene)</h4>
  <div class="markdown level1 summary"><p sourcefile="api/AdvancedSceneManager.Core.UtilitySceneManager.yml" sourcestartlinenumber="1" sourceendlinenumber="1">Find first preloaded instance this scene.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public OpenSceneInfo FindPreloadedScene(Scene scene)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="AdvancedSceneManager.Models.Scene.html">Scene</a></td>
        <td><span class="parametername">scene</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="AdvancedSceneManager.Core.OpenSceneInfo.html">OpenSceneInfo</a></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <a id="AdvancedSceneManager_Core_UtilitySceneManager_FindPreloadedScene_" data-uid="AdvancedSceneManager.Core.UtilitySceneManager.FindPreloadedScene*"></a>
  <h4 id="AdvancedSceneManager_Core_UtilitySceneManager_FindPreloadedScene_UnityEngine_SceneManagement_Scene_" data-uid="AdvancedSceneManager.Core.UtilitySceneManager.FindPreloadedScene(UnityEngine.SceneManagement.Scene)">FindPreloadedScene(Scene)</h4>
  <div class="markdown level1 summary"><p sourcefile="api/AdvancedSceneManager.Core.UtilitySceneManager.yml" sourcestartlinenumber="1" sourceendlinenumber="1">Find first preloaded instance this scene.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public OpenSceneInfo FindPreloadedScene(Scene scene)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">UnityEngine.SceneManagement.Scene</span></td>
        <td><span class="parametername">scene</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="AdvancedSceneManager.Core.OpenSceneInfo.html">OpenSceneInfo</a></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <a id="AdvancedSceneManager_Core_UtilitySceneManager_FindPreloadedScenes_" data-uid="AdvancedSceneManager.Core.UtilitySceneManager.FindPreloadedScenes*"></a>
  <h4 id="AdvancedSceneManager_Core_UtilitySceneManager_FindPreloadedScenes" data-uid="AdvancedSceneManager.Core.UtilitySceneManager.FindPreloadedScenes">FindPreloadedScenes()</h4>
  <div class="markdown level1 summary"><p sourcefile="api/AdvancedSceneManager.Core.UtilitySceneManager.yml" sourcestartlinenumber="1" sourceendlinenumber="1">Finds all current preloaded scenes.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public IEnumerable&lt;(OpenSceneInfo scene, SceneManagerBase sceneManager)&gt; FindPreloadedScenes()</code></pre>
  </div>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Collections.Generic.IEnumerable</span>&lt;<span class="xref">System.ValueTuple</span>&lt;<a class="xref" href="AdvancedSceneManager.Core.OpenSceneInfo.html">OpenSceneInfo</a>, <span class="xref">AdvancedSceneManager.Core.SceneManagerBase</span>&gt;&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <a id="AdvancedSceneManager_Core_UtilitySceneManager_IsOpen_" data-uid="AdvancedSceneManager.Core.UtilitySceneManager.IsOpen*"></a>
  <h4 id="AdvancedSceneManager_Core_UtilitySceneManager_IsOpen_AdvancedSceneManager_Models_Scene_" data-uid="AdvancedSceneManager.Core.UtilitySceneManager.IsOpen(AdvancedSceneManager.Models.Scene)">IsOpen(Scene)</h4>
  <div class="markdown level1 summary"><p sourcefile="api/AdvancedSceneManager.Core.UtilitySceneManager.yml" sourcestartlinenumber="1" sourceendlinenumber="1">Gets whatever the scene is open, either as part of a collection, or as stand-alone.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public IsOpenReturnValue IsOpen(Scene scene)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="AdvancedSceneManager.Models.Scene.html">Scene</a></td>
        <td><span class="parametername">scene</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="AdvancedSceneManager.Models.IsOpenReturnValue.html">IsOpenReturnValue</a></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <a id="AdvancedSceneManager_Core_UtilitySceneManager_IsOpen_" data-uid="AdvancedSceneManager.Core.UtilitySceneManager.IsOpen*"></a>
  <h4 id="AdvancedSceneManager_Core_UtilitySceneManager_IsOpen_UnityEngine_SceneManagement_Scene_" data-uid="AdvancedSceneManager.Core.UtilitySceneManager.IsOpen(UnityEngine.SceneManagement.Scene)">IsOpen(Scene)</h4>
  <div class="markdown level1 summary"><p sourcefile="api/AdvancedSceneManager.Core.UtilitySceneManager.yml" sourcestartlinenumber="1" sourceendlinenumber="1">Gets whatever the scene is open, either as part of a collection, or as stand-alone.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public IsOpenReturnValue IsOpen(Scene scene)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">UnityEngine.SceneManagement.Scene</span></td>
        <td><span class="parametername">scene</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="AdvancedSceneManager.Models.IsOpenReturnValue.html">IsOpenReturnValue</a></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <a id="AdvancedSceneManager_Core_UtilitySceneManager_OpenOrReopen_" data-uid="AdvancedSceneManager.Core.UtilitySceneManager.OpenOrReopen*"></a>
  <h4 id="AdvancedSceneManager_Core_UtilitySceneManager_OpenOrReopen_AdvancedSceneManager_Models_Scene_AdvancedSceneManager_Models_SceneCollection_" data-uid="AdvancedSceneManager.Core.UtilitySceneManager.OpenOrReopen(AdvancedSceneManager.Models.Scene,AdvancedSceneManager.Models.SceneCollection)">OpenOrReopen(Scene, SceneCollection)</h4>
  <div class="markdown level1 summary"><p sourcefile="api/AdvancedSceneManager.Core.UtilitySceneManager.yml" sourcestartlinenumber="1" sourceendlinenumber="1">Opens the scene if not open, otherwise it will be reopened.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public SceneOperation&lt;OpenSceneInfo&gt; OpenOrReopen(Scene scene, SceneCollection collection = null)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="AdvancedSceneManager.Models.Scene.html">Scene</a></td>
        <td><span class="parametername">scene</span></td>
        <td></td>
      </tr>
      <tr>
        <td><a class="xref" href="AdvancedSceneManager.Models.SceneCollection.html">SceneCollection</a></td>
        <td><span class="parametername">collection</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="AdvancedSceneManager.Core.SceneOperation-1.html">SceneOperation</a>&lt;<a class="xref" href="AdvancedSceneManager.Core.OpenSceneInfo.html">OpenSceneInfo</a>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <a id="AdvancedSceneManager_Core_UtilitySceneManager_RegisterOpenCallback_" data-uid="AdvancedSceneManager.Core.UtilitySceneManager.RegisterOpenCallback*"></a>
  <h4 id="AdvancedSceneManager_Core_UtilitySceneManager_RegisterOpenCallback__1___0_System_Action_System_Action_System_Boolean_" data-uid="AdvancedSceneManager.Core.UtilitySceneManager.RegisterOpenCallback``1(``0,System.Action,System.Action,System.Boolean)">RegisterOpenCallback&lt;T&gt;(T, Action, Action, Boolean)</h4>
  <div class="markdown level1 summary"><p sourcefile="api/AdvancedSceneManager.Core.UtilitySceneManager.yml" sourcestartlinenumber="1" sourceendlinenumber="1">Registers a callback for when a scene or collection has opened, or closed, the callback is removed once it has been called, unless persistent is true.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public void RegisterOpenCallback&lt;T&gt;(T scene, Action onOpen = null, Action onClose = null, bool persistent = false)
    where T : Object, ISceneObject</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">T</span></td>
        <td><span class="parametername">scene</span></td>
        <td></td>
      </tr>
      <tr>
        <td><span class="xref">System.Action</span></td>
        <td><span class="parametername">onOpen</span></td>
        <td></td>
      </tr>
      <tr>
        <td><span class="xref">System.Action</span></td>
        <td><span class="parametername">onClose</span></td>
        <td></td>
      </tr>
      <tr>
        <td><span class="xref">System.Boolean</span></td>
        <td><span class="parametername">persistent</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="typeParameters">Type Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="parametername">T</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <a id="AdvancedSceneManager_Core_UtilitySceneManager_Reopen_" data-uid="AdvancedSceneManager.Core.UtilitySceneManager.Reopen*"></a>
  <h4 id="AdvancedSceneManager_Core_UtilitySceneManager_Reopen_AdvancedSceneManager_Core_OpenSceneInfo_" data-uid="AdvancedSceneManager.Core.UtilitySceneManager.Reopen(AdvancedSceneManager.Core.OpenSceneInfo)">Reopen(OpenSceneInfo)</h4>
  <div class="markdown level1 summary"><p sourcefile="api/AdvancedSceneManager.Core.UtilitySceneManager.yml" sourcestartlinenumber="1" sourceendlinenumber="1">Reopen a scene regardless of whatever it is associated with a collection, or is was opened as stand-alone.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public SceneOperation&lt;OpenSceneInfo&gt; Reopen(OpenSceneInfo scene)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="AdvancedSceneManager.Core.OpenSceneInfo.html">OpenSceneInfo</a></td>
        <td><span class="parametername">scene</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="AdvancedSceneManager.Core.SceneOperation-1.html">SceneOperation</a>&lt;<a class="xref" href="AdvancedSceneManager.Core.OpenSceneInfo.html">OpenSceneInfo</a>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <a id="AdvancedSceneManager_Core_UtilitySceneManager_SetActive_" data-uid="AdvancedSceneManager.Core.UtilitySceneManager.SetActive*"></a>
  <h4 id="AdvancedSceneManager_Core_UtilitySceneManager_SetActive_AdvancedSceneManager_Models_Scene_" data-uid="AdvancedSceneManager.Core.UtilitySceneManager.SetActive(AdvancedSceneManager.Models.Scene)">SetActive(Scene)</h4>
  <div class="markdown level1 summary"><p sourcefile="api/AdvancedSceneManager.Core.UtilitySceneManager.yml" sourcestartlinenumber="1" sourceendlinenumber="1">Sets a scene as the activate scene.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public void SetActive(Scene scene)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="AdvancedSceneManager.Models.Scene.html">Scene</a></td>
        <td><span class="parametername">scene</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <a id="AdvancedSceneManager_Core_UtilitySceneManager_SetActive_" data-uid="AdvancedSceneManager.Core.UtilitySceneManager.SetActive*"></a>
  <h4 id="AdvancedSceneManager_Core_UtilitySceneManager_SetActive_UnityEngine_SceneManagement_Scene_" data-uid="AdvancedSceneManager.Core.UtilitySceneManager.SetActive(UnityEngine.SceneManagement.Scene)">SetActive(Scene)</h4>
  <div class="markdown level1 summary"><p sourcefile="api/AdvancedSceneManager.Core.UtilitySceneManager.yml" sourcestartlinenumber="1" sourceendlinenumber="1">Sets a scene as the activate scene.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public void SetActive(Scene scene)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">UnityEngine.SceneManagement.Scene</span></td>
        <td><span class="parametername">scene</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <a id="AdvancedSceneManager_Core_UtilitySceneManager_Toggle_" data-uid="AdvancedSceneManager.Core.UtilitySceneManager.Toggle*"></a>
  <h4 id="AdvancedSceneManager_Core_UtilitySceneManager_Toggle_AdvancedSceneManager_Models_Scene_System_Nullable_System_Boolean__" data-uid="AdvancedSceneManager.Core.UtilitySceneManager.Toggle(AdvancedSceneManager.Models.Scene,System.Nullable{System.Boolean})">Toggle(Scene, Nullable&lt;Boolean&gt;)</h4>
  <div class="markdown level1 summary"><p sourcefile="api/AdvancedSceneManager.Core.UtilitySceneManager.yml" sourcestartlinenumber="1" sourceendlinenumber="1">Toggles the scene open or closed, if the scene is part of the current collection, then the scene will be toggled within the collection, otherwise, it will be toggled as a stand-alone scene.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public SceneOperation Toggle(Scene scene, bool? enabled = null)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="AdvancedSceneManager.Models.Scene.html">Scene</a></td>
        <td><span class="parametername">scene</span></td>
        <td></td>
      </tr>
      <tr>
        <td><span class="xref">System.Nullable</span>&lt;<span class="xref">System.Boolean</span>&gt;</td>
        <td><span class="parametername">enabled</span></td>
        <td><p sourcefile="api/AdvancedSceneManager.Core.UtilitySceneManager.yml" sourcestartlinenumber="1" sourceendlinenumber="1">If null, the scene will be toggled on or off depending on whatever the scene is open or not. Pass a value to ensure that the scene either open or closed.</p>
</td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="AdvancedSceneManager.Core.SceneOperation.html">SceneOperation</a></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <a id="AdvancedSceneManager_Core_UtilitySceneManager_Toggle_" data-uid="AdvancedSceneManager.Core.UtilitySceneManager.Toggle*"></a>
  <h4 id="AdvancedSceneManager_Core_UtilitySceneManager_Toggle_UnityEngine_SceneManagement_Scene_System_Nullable_System_Boolean__" data-uid="AdvancedSceneManager.Core.UtilitySceneManager.Toggle(UnityEngine.SceneManagement.Scene,System.Nullable{System.Boolean})">Toggle(Scene, Nullable&lt;Boolean&gt;)</h4>
  <div class="markdown level1 summary"><p sourcefile="api/AdvancedSceneManager.Core.UtilitySceneManager.yml" sourcestartlinenumber="1" sourceendlinenumber="1">Toggles the scene open or closed, if the scene is part of the current collection, then the scene will be toggled within the collection, otherwise, it will be toggled as a stand-alone scene.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public SceneOperation Toggle(Scene scene, bool? enabled = null)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">UnityEngine.SceneManagement.Scene</span></td>
        <td><span class="parametername">scene</span></td>
        <td></td>
      </tr>
      <tr>
        <td><span class="xref">System.Nullable</span>&lt;<span class="xref">System.Boolean</span>&gt;</td>
        <td><span class="parametername">enabled</span></td>
        <td><p sourcefile="api/AdvancedSceneManager.Core.UtilitySceneManager.yml" sourcestartlinenumber="1" sourceendlinenumber="1">If null, the scene will be toggled on or off depending on whatever the scene is open or not. Pass a value to ensure that the scene either open or closed.</p>
</td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="AdvancedSceneManager.Core.SceneOperation.html">SceneOperation</a></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <a id="AdvancedSceneManager_Core_UtilitySceneManager_UnregisterCallback_" data-uid="AdvancedSceneManager.Core.UtilitySceneManager.UnregisterCallback*"></a>
  <h4 id="AdvancedSceneManager_Core_UtilitySceneManager_UnregisterCallback__1___0_System_Action_System_Action_" data-uid="AdvancedSceneManager.Core.UtilitySceneManager.UnregisterCallback``1(``0,System.Action,System.Action)">UnregisterCallback&lt;T&gt;(T, Action, Action)</h4>
  <div class="markdown level1 summary"><p sourcefile="api/AdvancedSceneManager.Core.UtilitySceneManager.yml" sourcestartlinenumber="1" sourceendlinenumber="1">Unregisters a callback.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public void UnregisterCallback&lt;T&gt;(T scene, Action onOpen = null, Action onClose = null)
    where T : Object, ISceneObject</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">T</span></td>
        <td><span class="parametername">scene</span></td>
        <td></td>
      </tr>
      <tr>
        <td><span class="xref">System.Action</span></td>
        <td><span class="parametername">onOpen</span></td>
        <td></td>
      </tr>
      <tr>
        <td><span class="xref">System.Action</span></td>
        <td><span class="parametername">onClose</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="typeParameters">Type Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="parametername">T</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h3 id="events">Events
  </h3>
  <h4 id="AdvancedSceneManager_Core_UtilitySceneManager_ActiveSceneChanged" data-uid="AdvancedSceneManager.Core.UtilitySceneManager.ActiveSceneChanged">ActiveSceneChanged</h4>
  <div class="markdown level1 summary"><p sourcefile="api/AdvancedSceneManager.Core.UtilitySceneManager.yml" sourcestartlinenumber="1" sourceendlinenumber="1">Occurs when the active scene changes.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public event UtilitySceneManager.ActiveSceneChangedHandler ActiveSceneChanged</code></pre>
  </div>
  <h5 class="eventType">Event Type</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="AdvancedSceneManager.Core.UtilitySceneManager.ActiveSceneChangedHandler.html">UtilitySceneManager.ActiveSceneChangedHandler</a></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h4 id="AdvancedSceneManager_Core_UtilitySceneManager_LoadingScreenClosed" data-uid="AdvancedSceneManager.Core.UtilitySceneManager.LoadingScreenClosed">LoadingScreenClosed</h4>
  <div class="markdown level1 summary"><p sourcefile="api/AdvancedSceneManager.Core.UtilitySceneManager.yml" sourcestartlinenumber="1" sourceendlinenumber="1">Occurs when a loading screen has closed.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public event Action&lt;LoadingScreen&gt; LoadingScreenClosed</code></pre>
  </div>
  <h5 class="eventType">Event Type</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Action</span>&lt;<a class="xref" href="AdvancedSceneManager.Callbacks.LoadingScreen.html">LoadingScreen</a>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h4 id="AdvancedSceneManager_Core_UtilitySceneManager_LoadingScreenClosing" data-uid="AdvancedSceneManager.Core.UtilitySceneManager.LoadingScreenClosing">LoadingScreenClosing</h4>
  <div class="markdown level1 summary"><p sourcefile="api/AdvancedSceneManager.Core.UtilitySceneManager.yml" sourcestartlinenumber="1" sourceendlinenumber="1">Occurs when a loading screen is about to close.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public event Action&lt;LoadingScreen&gt; LoadingScreenClosing</code></pre>
  </div>
  <h5 class="eventType">Event Type</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Action</span>&lt;<a class="xref" href="AdvancedSceneManager.Callbacks.LoadingScreen.html">LoadingScreen</a>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h4 id="AdvancedSceneManager_Core_UtilitySceneManager_LoadingScreenOpened" data-uid="AdvancedSceneManager.Core.UtilitySceneManager.LoadingScreenOpened">LoadingScreenOpened</h4>
  <div class="markdown level1 summary"><p sourcefile="api/AdvancedSceneManager.Core.UtilitySceneManager.yml" sourcestartlinenumber="1" sourceendlinenumber="1">Occurs when a loading screen has opened.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public event Action&lt;LoadingScreen&gt; LoadingScreenOpened</code></pre>
  </div>
  <h5 class="eventType">Event Type</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Action</span>&lt;<a class="xref" href="AdvancedSceneManager.Callbacks.LoadingScreen.html">LoadingScreen</a>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h4 id="AdvancedSceneManager_Core_UtilitySceneManager_LoadingScreenOpening" data-uid="AdvancedSceneManager.Core.UtilitySceneManager.LoadingScreenOpening">LoadingScreenOpening</h4>
  <div class="markdown level1 summary"><p sourcefile="api/AdvancedSceneManager.Core.UtilitySceneManager.yml" sourcestartlinenumber="1" sourceendlinenumber="1">Occurs when a loading screen is about to be opened.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public event Action&lt;LoadingScreen&gt; LoadingScreenOpening</code></pre>
  </div>
  <h5 class="eventType">Event Type</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Action</span>&lt;<a class="xref" href="AdvancedSceneManager.Callbacks.LoadingScreen.html">LoadingScreen</a>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h4 id="AdvancedSceneManager_Core_UtilitySceneManager_queueEmpty" data-uid="AdvancedSceneManager.Core.UtilitySceneManager.queueEmpty">queueEmpty</h4>
  <div class="markdown level1 summary"></div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public event Action queueEmpty</code></pre>
  </div>
  <h5 class="eventType">Event Type</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Action</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h4 id="AdvancedSceneManager_Core_UtilitySceneManager_SceneClosed" data-uid="AdvancedSceneManager.Core.UtilitySceneManager.SceneClosed">SceneClosed</h4>
  <div class="markdown level1 summary"><p sourcefile="api/AdvancedSceneManager.Core.UtilitySceneManager.yml" sourcestartlinenumber="1" sourceendlinenumber="1">Occurs when a scene is closed.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public event Action&lt;OpenSceneInfo, SceneManagerBase&gt; SceneClosed</code></pre>
  </div>
  <h5 class="eventType">Event Type</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Action</span>&lt;<a class="xref" href="AdvancedSceneManager.Core.OpenSceneInfo.html">OpenSceneInfo</a>, <span class="xref">AdvancedSceneManager.Core.SceneManagerBase</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h4 id="AdvancedSceneManager_Core_UtilitySceneManager_SceneOpened" data-uid="AdvancedSceneManager.Core.UtilitySceneManager.SceneOpened">SceneOpened</h4>
  <div class="markdown level1 summary"><p sourcefile="api/AdvancedSceneManager.Core.UtilitySceneManager.yml" sourcestartlinenumber="1" sourceendlinenumber="1">Occurs when a scene is opened.</p>
</div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public event Action&lt;OpenSceneInfo, SceneManagerBase&gt; SceneOpened</code></pre>
  </div>
  <h5 class="eventType">Event Type</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Action</span>&lt;<a class="xref" href="AdvancedSceneManager.Core.OpenSceneInfo.html">OpenSceneInfo</a>, <span class="xref">AdvancedSceneManager.Core.SceneManagerBase</span>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
</article>
    <script type="text/javascript" src="../styles/docfx.vendor.js"></script>
    <script type="text/javascript" src="../styles/docfx.js"></script>
    <script type="text/javascript" src="../styles/main.js"></script>
  </body>
</html>
